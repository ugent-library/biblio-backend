/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./assets/js/app.js":
/*!**************************!*\
  !*** ./assets/js/app.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! htmx.org */ \"./node_modules/htmx.org/dist/htmx.min.js\");\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(htmx_org__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _ui_csrf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ui/csrf.js */ \"./assets/js/ui/csrf.js\");\n/* harmony import */ var _ui_checkbox_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui/checkbox.js */ \"./assets/js/ui/checkbox.js\");\n/* harmony import */ var _ui_bootstrap_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ui/bootstrap.js */ \"./assets/js/ui/bootstrap.js\");\n/* harmony import */ var _ui_popover_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ui/popover.js */ \"./assets/js/ui/popover.js\");\n/* harmony import */ var _ui_header_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ui/header.js */ \"./assets/js/ui/header.js\");\n/* harmony import */ var _ui_multiple_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ui/multiple.js */ \"./assets/js/ui/multiple.js\");\n/* harmony import */ var _ui_form_change_submit_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ui/form_change_submit.js */ \"./assets/js/ui/form_change_submit.js\");\n/* harmony import */ var _ui_autocomplete_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ui/autocomplete.js */ \"./assets/js/ui/autocomplete.js\");\n/* harmony import */ var _ui_form_submit_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ui/form_submit.js */ \"./assets/js/ui/form_submit.js\");\n/* harmony import */ var _ui_modal_close_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ui/modal_close.js */ \"./assets/js/ui/modal_close.js\");\n/* harmony import */ var _ui_modal_popper_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ui/modal_popper.js */ \"./assets/js/ui/modal_popper.js\");\n/* harmony import */ var _ui_tabs_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./ui/tabs.js */ \"./assets/js/ui/tabs.js\");\n/* harmony import */ var _ui_radio_card_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./ui/radio_card.js */ \"./assets/js/ui/radio_card.js\");\n/* harmony import */ var _ui_toast_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./ui/toast.js */ \"./assets/js/ui/toast.js\");\n/* harmony import */ var _ui_sortable_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./ui/sortable.js */ \"./assets/js/ui/sortable.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  (htmx_org__WEBPACK_IMPORTED_MODULE_0___default().config.defaultFocusScroll) = true;\n  (0,_ui_csrf_js__WEBPACK_IMPORTED_MODULE_1__.default)();\n  (0,_ui_tabs_js__WEBPACK_IMPORTED_MODULE_12__.default)();\n  (0,_ui_checkbox_js__WEBPACK_IMPORTED_MODULE_2__.default)();\n  (0,_ui_bootstrap_js__WEBPACK_IMPORTED_MODULE_3__.default)();\n  (0,_ui_popover_js__WEBPACK_IMPORTED_MODULE_4__.default)();\n  (0,_ui_header_js__WEBPACK_IMPORTED_MODULE_5__.default)();\n  (0,_ui_multiple_js__WEBPACK_IMPORTED_MODULE_6__.default)();\n  (0,_ui_form_change_submit_js__WEBPACK_IMPORTED_MODULE_7__.default)();\n  (0,_ui_autocomplete_js__WEBPACK_IMPORTED_MODULE_8__.default)();\n  (0,_ui_form_submit_js__WEBPACK_IMPORTED_MODULE_9__.default)();\n  (0,_ui_modal_close_js__WEBPACK_IMPORTED_MODULE_10__.default)();\n  (0,_ui_modal_popper_js__WEBPACK_IMPORTED_MODULE_11__.default)();\n  (0,_ui_radio_card_js__WEBPACK_IMPORTED_MODULE_13__.default)();\n  (0,_ui_toast_js__WEBPACK_IMPORTED_MODULE_14__.default)();\n  (0,_ui_sortable_js__WEBPACK_IMPORTED_MODULE_15__.default)();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvYXBwLmpzPzllMGUiXSwibmFtZXMiOlsiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiaHRteCIsImNzcmYiLCJ0YWJzIiwiY2hlY2tib3giLCJib290c3RyYXAiLCJwb3BvdmVyIiwiaGVhZGVyIiwibXVsdGlwbGUiLCJjaGFuZ2VTdWJtaXQiLCJhdXRvY29tcGxldGUiLCJzdWJtaXQiLCJtb2RhbENsb3NlIiwibW9kYWxQb3BwZXIiLCJyYWRpb0NhcmQiLCJ0b2FzdCIsInNvcnRhYmxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBQSxRQUFRLENBQUNDLGdCQUFULENBQTBCLGtCQUExQixFQUE4QyxZQUFZO0FBRXREQyw2RUFBQSxHQUFpQyxJQUFqQztBQUVBQyxzREFBSTtBQUNKQyx1REFBSTtBQUNKQywwREFBUTtBQUNSQywyREFBUztBQUNUQyx5REFBTztBQUNQQyx3REFBTTtBQUNOQywwREFBUTtBQUNSQyxvRUFBWTtBQUNaQyw4REFBWTtBQUNaQyw2REFBTTtBQUNOQyw4REFBVTtBQUNWQywrREFBVztBQUNYQyw2REFBUztBQUNUQyx3REFBSztBQUNMQywyREFBUTtBQUNYLENBbkJEIiwiZmlsZSI6Ii4vYXNzZXRzL2pzL2FwcC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBodG14IGZyb20gJ2h0bXgub3JnJztcbmltcG9ydCBjc3JmIGZyb20gJy4vdWkvY3NyZi5qcydcbmltcG9ydCBjaGVja2JveCBmcm9tICcuL3VpL2NoZWNrYm94LmpzJ1xuaW1wb3J0IGJvb3RzdHJhcCBmcm9tICcuL3VpL2Jvb3RzdHJhcC5qcydcbmltcG9ydCBwb3BvdmVyIGZyb20gJy4vdWkvcG9wb3Zlci5qcydcbmltcG9ydCBoZWFkZXIgZnJvbSAnLi91aS9oZWFkZXIuanMnXG5pbXBvcnQgbXVsdGlwbGUgZnJvbSAnLi91aS9tdWx0aXBsZS5qcydcbmltcG9ydCBjaGFuZ2VTdWJtaXQgZnJvbSAnLi91aS9mb3JtX2NoYW5nZV9zdWJtaXQuanMnXG5pbXBvcnQgYXV0b2NvbXBsZXRlIGZyb20gJy4vdWkvYXV0b2NvbXBsZXRlLmpzJztcbmltcG9ydCBzdWJtaXQgZnJvbSAnLi91aS9mb3JtX3N1Ym1pdC5qcydcbmltcG9ydCBtb2RhbENsb3NlIGZyb20gJy4vdWkvbW9kYWxfY2xvc2UuanMnXG5pbXBvcnQgbW9kYWxQb3BwZXIgZnJvbSAnLi91aS9tb2RhbF9wb3BwZXIuanMnXG5pbXBvcnQgdGFicyBmcm9tICcuL3VpL3RhYnMuanMnXG5pbXBvcnQgcmFkaW9DYXJkIGZyb20gJy4vdWkvcmFkaW9fY2FyZC5qcydcbmltcG9ydCB0b2FzdCBmcm9tICcuL3VpL3RvYXN0LmpzJ1xuaW1wb3J0IHNvcnRhYmxlIGZyb20gJy4vdWkvc29ydGFibGUuanMnO1xuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24gKCkge1xuXG4gICAgaHRteC5jb25maWcuZGVmYXVsdEZvY3VzU2Nyb2xsID0gdHJ1ZVxuXG4gICAgY3NyZigpXG4gICAgdGFicygpXG4gICAgY2hlY2tib3goKVxuICAgIGJvb3RzdHJhcCgpXG4gICAgcG9wb3ZlcigpXG4gICAgaGVhZGVyKClcbiAgICBtdWx0aXBsZSgpXG4gICAgY2hhbmdlU3VibWl0KClcbiAgICBhdXRvY29tcGxldGUoKVxuICAgIHN1Ym1pdCgpXG4gICAgbW9kYWxDbG9zZSgpXG4gICAgbW9kYWxQb3BwZXIoKVxuICAgIHJhZGlvQ2FyZCgpXG4gICAgdG9hc3QoKVxuICAgIHNvcnRhYmxlKClcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./assets/js/app.js\n");

/***/ }),

/***/ "./assets/js/ui/autocomplete.js":
/*!**************************************!*\
  !*** ./assets/js/ui/autocomplete.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! htmx.org */ \"./node_modules/htmx.org/dist/htmx.min.js\");\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(htmx_org__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var addEvents = function addEvents(rootEl) {\n    rootEl.querySelectorAll('.autocomplete').forEach(function (ac) {\n      var target = document.querySelector(ac.dataset.target);\n      target.addEventListener('keydown', function (evt) {\n        if (evt.key === \"Escape\") {\n          ac.querySelector(\".autocomplete-hits\").innerHTML = \"\";\n        }\n      });\n    });\n    rootEl.querySelectorAll('.autocomplete-hit').forEach(function (hit) {\n      hit.addEventListener('click', function () {\n        var target = hit.closest(\".autocomplete\").dataset.target;\n        var v = hit.dataset.value;\n        document.querySelector(target).value = v;\n        hit.closest(\".autocomplete-hits\").innerHTML = \"\";\n      });\n    });\n  };\n\n  htmx_org__WEBPACK_IMPORTED_MODULE_0___default().onLoad(function (el) {\n    addEvents(el);\n  }); // listen for inputs added with multiple.js\n\n  document.addEventListener('form-value-add', function (evt) {\n    addEvents(evt.target);\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvdWkvYXV0b2NvbXBsZXRlLmpzP2Y0Y2YiXSwibmFtZXMiOlsiYWRkRXZlbnRzIiwicm9vdEVsIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJhYyIsInRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImRhdGFzZXQiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZ0Iiwia2V5IiwiaW5uZXJIVE1MIiwiaGl0IiwiY2xvc2VzdCIsInYiLCJ2YWx1ZSIsImh0bXgiLCJlbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFFQSw2QkFBZSxzQ0FBWTtBQUN2QixNQUFJQSxTQUFTLEdBQUcsU0FBWkEsU0FBWSxDQUFTQyxNQUFULEVBQWlCO0FBQzdCQSxVQUFNLENBQUNDLGdCQUFQLENBQXdCLGVBQXhCLEVBQXlDQyxPQUF6QyxDQUFpRCxVQUFTQyxFQUFULEVBQWE7QUFDMUQsVUFBSUMsTUFBTSxHQUFHQyxRQUFRLENBQUNDLGFBQVQsQ0FBdUJILEVBQUUsQ0FBQ0ksT0FBSCxDQUFXSCxNQUFsQyxDQUFiO0FBQ0FBLFlBQU0sQ0FBQ0ksZ0JBQVAsQ0FBd0IsU0FBeEIsRUFBbUMsVUFBU0MsR0FBVCxFQUFhO0FBQzVDLFlBQUlBLEdBQUcsQ0FBQ0MsR0FBSixLQUFZLFFBQWhCLEVBQTBCO0FBQ3RCUCxZQUFFLENBQUNHLGFBQUgsQ0FBaUIsb0JBQWpCLEVBQXVDSyxTQUF2QyxHQUFtRCxFQUFuRDtBQUNIO0FBQ0osT0FKRDtBQUtILEtBUEQ7QUFTQVgsVUFBTSxDQUFDQyxnQkFBUCxDQUF3QixtQkFBeEIsRUFBNkNDLE9BQTdDLENBQXFELFVBQVNVLEdBQVQsRUFBYztBQUMvREEsU0FBRyxDQUFDSixnQkFBSixDQUFxQixPQUFyQixFQUE4QixZQUFZO0FBQ3RDLFlBQUlKLE1BQU0sR0FBR1EsR0FBRyxDQUFDQyxPQUFKLENBQVksZUFBWixFQUE2Qk4sT0FBN0IsQ0FBcUNILE1BQWxEO0FBQ0EsWUFBSVUsQ0FBQyxHQUFHRixHQUFHLENBQUNMLE9BQUosQ0FBWVEsS0FBcEI7QUFDQVYsZ0JBQVEsQ0FBQ0MsYUFBVCxDQUF1QkYsTUFBdkIsRUFBK0JXLEtBQS9CLEdBQXVDRCxDQUF2QztBQUNBRixXQUFHLENBQUNDLE9BQUosQ0FBWSxvQkFBWixFQUFrQ0YsU0FBbEMsR0FBOEMsRUFBOUM7QUFDSCxPQUxEO0FBTUgsS0FQRDtBQVFILEdBbEJEOztBQW9CQUssd0RBQUEsQ0FBWSxVQUFTQyxFQUFULEVBQWE7QUFDckJsQixhQUFTLENBQUNrQixFQUFELENBQVQ7QUFDSCxHQUZELEVBckJ1QixDQXdCdkI7O0FBQ0FaLFVBQVEsQ0FBQ0csZ0JBQVQsQ0FBMEIsZ0JBQTFCLEVBQTRDLFVBQVNDLEdBQVQsRUFBYztBQUN0RFYsYUFBUyxDQUFDVSxHQUFHLENBQUNMLE1BQUwsQ0FBVDtBQUNILEdBRkQ7QUFHSCIsImZpbGUiOiIuL2Fzc2V0cy9qcy91aS9hdXRvY29tcGxldGUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaHRteCBmcm9tICdodG14Lm9yZyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgYWRkRXZlbnRzID0gZnVuY3Rpb24ocm9vdEVsKSB7XG4gICAgICAgIHJvb3RFbC5xdWVyeVNlbGVjdG9yQWxsKCcuYXV0b2NvbXBsZXRlJykuZm9yRWFjaChmdW5jdGlvbihhYykge1xuICAgICAgICAgICAgbGV0IHRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYWMuZGF0YXNldC50YXJnZXQpO1xuICAgICAgICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBmdW5jdGlvbihldnQpe1xuICAgICAgICAgICAgICAgIGlmIChldnQua2V5ID09PSBcIkVzY2FwZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjLnF1ZXJ5U2VsZWN0b3IoXCIuYXV0b2NvbXBsZXRlLWhpdHNcIikuaW5uZXJIVE1MID0gXCJcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG5cbiAgICAgICAgcm9vdEVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5hdXRvY29tcGxldGUtaGl0JykuZm9yRWFjaChmdW5jdGlvbihoaXQpIHtcbiAgICAgICAgICAgIGhpdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0ID0gaGl0LmNsb3Nlc3QoXCIuYXV0b2NvbXBsZXRlXCIpLmRhdGFzZXQudGFyZ2V0O1xuICAgICAgICAgICAgICAgIGxldCB2ID0gaGl0LmRhdGFzZXQudmFsdWU7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpLnZhbHVlID0gdjtcbiAgICAgICAgICAgICAgICBoaXQuY2xvc2VzdChcIi5hdXRvY29tcGxldGUtaGl0c1wiKS5pbm5lckhUTUwgPSBcIlwiICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBodG14Lm9uTG9hZChmdW5jdGlvbihlbCkge1xuICAgICAgICBhZGRFdmVudHMoZWwpXG4gICAgfSk7XG4gICAgLy8gbGlzdGVuIGZvciBpbnB1dHMgYWRkZWQgd2l0aCBtdWx0aXBsZS5qc1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2Zvcm0tdmFsdWUtYWRkJywgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgIGFkZEV2ZW50cyhldnQudGFyZ2V0KVxuICAgIH0pO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./assets/js/ui/autocomplete.js\n");

/***/ }),

/***/ "./assets/js/ui/bootstrap.js":
/*!***********************************!*\
  !*** ./assets/js/ui/bootstrap.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! htmx.org */ \"./node_modules/htmx.org/dist/htmx.min.js\");\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(htmx_org__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var bootstrap_native_dist_bootstrap_native_v4__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bootstrap.native/dist/bootstrap-native-v4 */ \"./node_modules/bootstrap.native/dist/bootstrap-native-v4.js\");\n/* harmony import */ var bootstrap_native_dist_bootstrap_native_v4__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(bootstrap_native_dist_bootstrap_native_v4__WEBPACK_IMPORTED_MODULE_1__);\n\n\n/**\n * Initialize Bootstrap Native after HTMX has settled the DOM.\n *\n * When HTMX is executed, the updated parts of the DOM won't be\n * registered with Bootstrap Native. Elements like i.e. popovers,\n * alerts, tooltips,... won't work passed via HTMX won't work.\n * This function re-initializes Bootstrap Native on the updated DOM.\n */\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  htmx_org__WEBPACK_IMPORTED_MODULE_0___default().on(\"htmx:afterSettle\", function (evt) {\n    bootstrap_native_dist_bootstrap_native_v4__WEBPACK_IMPORTED_MODULE_1___default().initCallback();\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvdWkvYm9vdHN0cmFwLmpzPzFlZTMiXSwibmFtZXMiOlsiaHRteCIsImV2dCIsIkJTTiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSw2QkFBZSxzQ0FBVztBQUN0QkEsb0RBQUEsQ0FBUSxrQkFBUixFQUE0QixVQUFTQyxHQUFULEVBQWM7QUFDdENDLGlHQUFBO0FBQ0gsR0FGRDtBQUdIIiwiZmlsZSI6Ii4vYXNzZXRzL2pzL3VpL2Jvb3RzdHJhcC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBodG14IGZyb20gJ2h0bXgub3JnJztcbmltcG9ydCBCU04gZnJvbSBcImJvb3RzdHJhcC5uYXRpdmUvZGlzdC9ib290c3RyYXAtbmF0aXZlLXY0XCI7XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBCb290c3RyYXAgTmF0aXZlIGFmdGVyIEhUTVggaGFzIHNldHRsZWQgdGhlIERPTS5cbiAqXG4gKiBXaGVuIEhUTVggaXMgZXhlY3V0ZWQsIHRoZSB1cGRhdGVkIHBhcnRzIG9mIHRoZSBET00gd29uJ3QgYmVcbiAqIHJlZ2lzdGVyZWQgd2l0aCBCb290c3RyYXAgTmF0aXZlLiBFbGVtZW50cyBsaWtlIGkuZS4gcG9wb3ZlcnMsXG4gKiBhbGVydHMsIHRvb2x0aXBzLC4uLiB3b24ndCB3b3JrIHBhc3NlZCB2aWEgSFRNWCB3b24ndCB3b3JrLlxuICogVGhpcyBmdW5jdGlvbiByZS1pbml0aWFsaXplcyBCb290c3RyYXAgTmF0aXZlIG9uIHRoZSB1cGRhdGVkIERPTS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gICAgaHRteC5vbihcImh0bXg6YWZ0ZXJTZXR0bGVcIiwgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgIEJTTi5pbml0Q2FsbGJhY2soKVxuICAgIH0pO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./assets/js/ui/bootstrap.js\n");

/***/ }),

/***/ "./assets/js/ui/checkbox.js":
/*!**********************************!*\
  !*** ./assets/js/ui/checkbox.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var formCheckAll = function formCheckAll(evt) {\n    var form = evt.target.closest(\"form\");\n    var chks = form.querySelectorAll(\"input[type='checkbox']\");\n    chks.forEach(function (el) {\n      return el.checked = true;\n    });\n  };\n\n  document.querySelectorAll(\"button.form-check-all\").forEach(function (el) {\n    return el.addEventListener(\"click\", formCheckAll);\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvdWkvY2hlY2tib3guanM/NmNmZSJdLCJuYW1lcyI6WyJmb3JtQ2hlY2tBbGwiLCJldnQiLCJmb3JtIiwidGFyZ2V0IiwiY2xvc2VzdCIsImNoa3MiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsImVsIiwiY2hlY2tlZCIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDZCQUFlLHNDQUFXO0FBQ3RCLE1BQUlBLFlBQVksR0FBRyxTQUFmQSxZQUFlLENBQVVDLEdBQVYsRUFBZTtBQUM5QixRQUFJQyxJQUFJLEdBQUdELEdBQUcsQ0FBQ0UsTUFBSixDQUFXQyxPQUFYLENBQW1CLE1BQW5CLENBQVg7QUFDQSxRQUFJQyxJQUFJLEdBQUdILElBQUksQ0FBQ0ksZ0JBQUwsQ0FBc0Isd0JBQXRCLENBQVg7QUFDQUQsUUFBSSxDQUFDRSxPQUFMLENBQWEsVUFBQUMsRUFBRTtBQUFBLGFBQ1hBLEVBQUUsQ0FBQ0MsT0FBSCxHQUFhLElBREY7QUFBQSxLQUFmO0FBR0gsR0FORDs7QUFRQUMsVUFBUSxDQUFDSixnQkFBVCxDQUEwQix1QkFBMUIsRUFBbURDLE9BQW5ELENBQTJELFVBQUFDLEVBQUU7QUFBQSxXQUN6REEsRUFBRSxDQUFDRyxnQkFBSCxDQUFvQixPQUFwQixFQUE2QlgsWUFBN0IsQ0FEeUQ7QUFBQSxHQUE3RDtBQUdIIiwiZmlsZSI6Ii4vYXNzZXRzL2pzL3VpL2NoZWNrYm94LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gICAgbGV0IGZvcm1DaGVja0FsbCA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgbGV0IGZvcm0gPSBldnQudGFyZ2V0LmNsb3Nlc3QoXCJmb3JtXCIpXG4gICAgICAgIGxldCBjaGtzID0gZm9ybS5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbdHlwZT0nY2hlY2tib3gnXVwiKVxuICAgICAgICBjaGtzLmZvckVhY2goZWwgPT5cbiAgICAgICAgICAgIGVsLmNoZWNrZWQgPSB0cnVlXG4gICAgICAgIClcbiAgICB9XG5cbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiYnV0dG9uLmZvcm0tY2hlY2stYWxsXCIpLmZvckVhY2goZWwgPT5cbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZvcm1DaGVja0FsbClcbiAgICApXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./assets/js/ui/checkbox.js\n");

/***/ }),

/***/ "./assets/js/ui/csrf.js":
/*!******************************!*\
  !*** ./assets/js/ui/csrf.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  document.body.addEventListener('htmx:configRequest', function (evt) {\n    evt.detail.headers['X-CSRF-Token'] = document.querySelector('meta[name=\"csrf-token\"]').content;\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvdWkvY3NyZi5qcz8wZDI4Il0sIm5hbWVzIjpbImRvY3VtZW50IiwiYm9keSIsImFkZEV2ZW50TGlzdGVuZXIiLCJldnQiLCJkZXRhaWwiLCJoZWFkZXJzIiwicXVlcnlTZWxlY3RvciIsImNvbnRlbnQiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSw2QkFBZSxzQ0FBVztBQUN0QkEsVUFBUSxDQUFDQyxJQUFULENBQWNDLGdCQUFkLENBQStCLG9CQUEvQixFQUFxRCxVQUFDQyxHQUFELEVBQVM7QUFDMURBLE9BQUcsQ0FBQ0MsTUFBSixDQUFXQyxPQUFYLENBQW1CLGNBQW5CLElBQXFDTCxRQUFRLENBQUNNLGFBQVQsQ0FBdUIseUJBQXZCLEVBQWtEQyxPQUF2RjtBQUNILEdBRkQ7QUFHSCIsImZpbGUiOiIuL2Fzc2V0cy9qcy91aS9jc3JmLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdodG14OmNvbmZpZ1JlcXVlc3QnLCAoZXZ0KSA9PiB7XG4gICAgICAgIGV2dC5kZXRhaWwuaGVhZGVyc1snWC1DU1JGLVRva2VuJ10gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtZXRhW25hbWU9XCJjc3JmLXRva2VuXCJdJykuY29udGVudFxuICAgIH0pXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./assets/js/ui/csrf.js\n");

/***/ }),

/***/ "./assets/js/ui/form_change_submit.js":
/*!********************************************!*\
  !*** ./assets/js/ui/form_change_submit.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  document.querySelectorAll(\"form.form-change-submit\").forEach(function (el) {\n    el.addEventListener(\"change\", function (evt) {\n      var spinner = el.querySelector(\".spinner-border\");\n\n      if (spinner !== null) {\n        spinner.style.display = \"inline-block\";\n        spinner.style.opacity = \"1\";\n      }\n\n      el.submit();\n    });\n  });\n  document.querySelectorAll(\"form .form-change-submit\").forEach(function (el) {\n    el.addEventListener(\"change\", function (evt) {\n      evt.target.closest(\"form\").submit();\n    });\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvdWkvZm9ybV9jaGFuZ2Vfc3VibWl0LmpzPzhmMjYiXSwibmFtZXMiOlsiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsImVsIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2dCIsInNwaW5uZXIiLCJxdWVyeVNlbGVjdG9yIiwic3R5bGUiLCJkaXNwbGF5Iiwib3BhY2l0eSIsInN1Ym1pdCIsInRhcmdldCIsImNsb3Nlc3QiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSw2QkFBZSxzQ0FBVztBQUN0QkEsVUFBUSxDQUFDQyxnQkFBVCxDQUEwQix5QkFBMUIsRUFBcURDLE9BQXJELENBQTZELFVBQVNDLEVBQVQsRUFBYTtBQUN0RUEsTUFBRSxDQUFDQyxnQkFBSCxDQUFvQixRQUFwQixFQUE4QixVQUFTQyxHQUFULEVBQWM7QUFDeEMsVUFBTUMsT0FBTyxHQUFHSCxFQUFFLENBQUNJLGFBQUgsQ0FBaUIsaUJBQWpCLENBQWhCOztBQUNBLFVBQUlELE9BQU8sS0FBSyxJQUFoQixFQUFzQjtBQUNsQkEsZUFBTyxDQUFDRSxLQUFSLENBQWNDLE9BQWQsR0FBd0IsY0FBeEI7QUFDQUgsZUFBTyxDQUFDRSxLQUFSLENBQWNFLE9BQWQsR0FBd0IsR0FBeEI7QUFDSDs7QUFFRFAsUUFBRSxDQUFDUSxNQUFIO0FBQ0gsS0FSRDtBQVNILEdBVkQ7QUFZQVgsVUFBUSxDQUFDQyxnQkFBVCxDQUEwQiwwQkFBMUIsRUFBc0RDLE9BQXRELENBQThELFVBQVNDLEVBQVQsRUFBYTtBQUN2RUEsTUFBRSxDQUFDQyxnQkFBSCxDQUFvQixRQUFwQixFQUE4QixVQUFTQyxHQUFULEVBQWM7QUFDeENBLFNBQUcsQ0FBQ08sTUFBSixDQUFXQyxPQUFYLENBQW1CLE1BQW5CLEVBQTJCRixNQUEzQjtBQUNILEtBRkQ7QUFHSCxHQUpEO0FBS0giLCJmaWxlIjoiLi9hc3NldHMvanMvdWkvZm9ybV9jaGFuZ2Vfc3VibWl0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImZvcm0uZm9ybS1jaGFuZ2Utc3VibWl0XCIpLmZvckVhY2goZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHNwaW5uZXIgPSBlbC5xdWVyeVNlbGVjdG9yKFwiLnNwaW5uZXItYm9yZGVyXCIpXG4gICAgICAgICAgICBpZiAoc3Bpbm5lciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHNwaW5uZXIuc3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG4gICAgICAgICAgICAgICAgc3Bpbm5lci5zdHlsZS5vcGFjaXR5ID0gXCIxXCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVsLnN1Ym1pdCgpXG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImZvcm0gLmZvcm0tY2hhbmdlLXN1Ym1pdFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgICAgICBldnQudGFyZ2V0LmNsb3Nlc3QoXCJmb3JtXCIpLnN1Ym1pdCgpXG4gICAgICAgIH0pO1xuICAgIH0pO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./assets/js/ui/form_change_submit.js\n");

/***/ }),

/***/ "./assets/js/ui/form_submit.js":
/*!*************************************!*\
  !*** ./assets/js/ui/form_submit.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! htmx.org */ \"./node_modules/htmx.org/dist/htmx.min.js\");\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(htmx_org__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  // Disable save/cancel buttons when a htmx request is being processed.\n  // See: https://github.com/bigskysoftware/htmx/issues/394\n  htmx_org__WEBPACK_IMPORTED_MODULE_0___default().on(\"htmx:afterSettle\", function (evt) {\n    var buttons = document.querySelectorAll(\".btn-save\");\n\n    if (buttons !== undefined) {\n      buttons.forEach(function (el) {\n        el.addEventListener(\"click\", function (evt) {\n          htmx_org__WEBPACK_IMPORTED_MODULE_0___default().on('htmx:beforeRequest', function (e) {\n            // Save button\n            el.setAttribute(\"disabled\", \"disabled\"); // Cancel button, if any\n\n            if (el.previousElementSibling !== undefined) {\n              el.previousElementSibling.setAttribute(\"disabled\", \"disabled\");\n            }\n          });\n        });\n      });\n    }\n  }); // Generic spinner for buttons. Add .btn-display-indicator as a button class. Ensure\n  // you've got a spinner added to the button itself e.g.\n  //\n  // <button type=\"submit\" class=\"btn btn-primary btn-display-indicator\">\n  //     <div class=\"btn-text\">Complete description</div>\n  //     <i class=\"if if-arrow-right\"></i>\n  //     <div class=\"spinner-border\">\n  //         <span class=\"sr-only\"></span>\n  //     </div>\n  // </button>\n\n  function showIndicatorOnButton() {\n    document.querySelectorAll('.btn-display-indicator').forEach(function (button) {\n      button.addEventListener(\"click\", function (evt) {\n        var spinner = button.querySelector('.spinner-border');\n        spinner.style.display = \"inline-block\";\n        spinner.style.opacity = \"1\";\n      });\n    });\n  }\n\n  showIndicatorOnButton();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvdWkvZm9ybV9zdWJtaXQuanM/ZDg3OSJdLCJuYW1lcyI6WyJodG14IiwiZXZ0IiwiYnV0dG9ucyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsInVuZGVmaW5lZCIsImZvckVhY2giLCJlbCIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwic2V0QXR0cmlidXRlIiwicHJldmlvdXNFbGVtZW50U2libGluZyIsInNob3dJbmRpY2F0b3JPbkJ1dHRvbiIsImJ1dHRvbiIsInNwaW5uZXIiLCJxdWVyeVNlbGVjdG9yIiwic3R5bGUiLCJkaXNwbGF5Iiwib3BhY2l0eSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFFQSw2QkFBZSxzQ0FBVztBQUV0QjtBQUNBO0FBQ0FBLG9EQUFBLENBQVEsa0JBQVIsRUFBNEIsVUFBU0MsR0FBVCxFQUFjO0FBQ3RDLFFBQU1DLE9BQU8sR0FBR0MsUUFBUSxDQUFDQyxnQkFBVCxDQUEwQixXQUExQixDQUFoQjs7QUFDQSxRQUFJRixPQUFPLEtBQUtHLFNBQWhCLEVBQTJCO0FBQ3ZCSCxhQUFPLENBQUNJLE9BQVIsQ0FBZ0IsVUFBU0MsRUFBVCxFQUFhO0FBQ3pCQSxVQUFFLENBQUNDLGdCQUFILENBQW9CLE9BQXBCLEVBQTZCLFVBQVVQLEdBQVYsRUFBZTtBQUN4Q0QsNERBQUEsQ0FBUSxvQkFBUixFQUE4QixVQUFTUyxDQUFULEVBQVk7QUFDdEM7QUFDQUYsY0FBRSxDQUFDRyxZQUFILENBQWdCLFVBQWhCLEVBQTRCLFVBQTVCLEVBRnNDLENBR3RDOztBQUNBLGdCQUFJSCxFQUFFLENBQUNJLHNCQUFILEtBQThCTixTQUFsQyxFQUE2QztBQUN6Q0UsZ0JBQUUsQ0FBQ0ksc0JBQUgsQ0FBMEJELFlBQTFCLENBQXVDLFVBQXZDLEVBQW1ELFVBQW5EO0FBQ0g7QUFDSixXQVBEO0FBUUgsU0FURDtBQVVILE9BWEQ7QUFZSDtBQUNKLEdBaEJELEVBSnNCLENBc0J0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxXQUFTRSxxQkFBVCxHQUFpQztBQUM3QlQsWUFBUSxDQUFDQyxnQkFBVCxDQUEwQix3QkFBMUIsRUFBb0RFLE9BQXBELENBQTRELFVBQVNPLE1BQVQsRUFBaUI7QUFDekVBLFlBQU0sQ0FBQ0wsZ0JBQVAsQ0FBd0IsT0FBeEIsRUFBaUMsVUFBU1AsR0FBVCxFQUFjO0FBQzNDLFlBQU1hLE9BQU8sR0FBR0QsTUFBTSxDQUFDRSxhQUFQLENBQXFCLGlCQUFyQixDQUFoQjtBQUNBRCxlQUFPLENBQUNFLEtBQVIsQ0FBY0MsT0FBZCxHQUF3QixjQUF4QjtBQUNBSCxlQUFPLENBQUNFLEtBQVIsQ0FBY0UsT0FBZCxHQUF3QixHQUF4QjtBQUNILE9BSkQ7QUFLSCxLQU5EO0FBT0g7O0FBRUROLHVCQUFxQjtBQUV4QiIsImZpbGUiOiIuL2Fzc2V0cy9qcy91aS9mb3JtX3N1Ym1pdC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBodG14IGZyb20gJ2h0bXgub3JnJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG5cbiAgICAvLyBEaXNhYmxlIHNhdmUvY2FuY2VsIGJ1dHRvbnMgd2hlbiBhIGh0bXggcmVxdWVzdCBpcyBiZWluZyBwcm9jZXNzZWQuXG4gICAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmlnc2t5c29mdHdhcmUvaHRteC9pc3N1ZXMvMzk0XG4gICAgaHRteC5vbihcImh0bXg6YWZ0ZXJTZXR0bGVcIiwgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgIGNvbnN0IGJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmJ0bi1zYXZlXCIpO1xuICAgICAgICBpZiAoYnV0dG9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBidXR0b25zLmZvckVhY2goZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICAgICAgICAgICAgICBodG14Lm9uKCdodG14OmJlZm9yZVJlcXVlc3QnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTYXZlIGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENhbmNlbCBidXR0b24sIGlmIGFueVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcuc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgXCJkaXNhYmxlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIEdlbmVyaWMgc3Bpbm5lciBmb3IgYnV0dG9ucy4gQWRkIC5idG4tZGlzcGxheS1pbmRpY2F0b3IgYXMgYSBidXR0b24gY2xhc3MuIEVuc3VyZVxuICAgIC8vIHlvdSd2ZSBnb3QgYSBzcGlubmVyIGFkZGVkIHRvIHRoZSBidXR0b24gaXRzZWxmIGUuZy5cbiAgICAvL1xuICAgIC8vIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5IGJ0bi1kaXNwbGF5LWluZGljYXRvclwiPlxuICAgIC8vICAgICA8ZGl2IGNsYXNzPVwiYnRuLXRleHRcIj5Db21wbGV0ZSBkZXNjcmlwdGlvbjwvZGl2PlxuICAgIC8vICAgICA8aSBjbGFzcz1cImlmIGlmLWFycm93LXJpZ2h0XCI+PC9pPlxuICAgIC8vICAgICA8ZGl2IGNsYXNzPVwic3Bpbm5lci1ib3JkZXJcIj5cbiAgICAvLyAgICAgICAgIDxzcGFuIGNsYXNzPVwic3Itb25seVwiPjwvc3Bhbj5cbiAgICAvLyAgICAgPC9kaXY+XG4gICAgLy8gPC9idXR0b24+XG4gICAgZnVuY3Rpb24gc2hvd0luZGljYXRvck9uQnV0dG9uKCkge1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYnRuLWRpc3BsYXktaW5kaWNhdG9yJykuZm9yRWFjaChmdW5jdGlvbihidXR0b24pIHtcbiAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3Bpbm5lciA9IGJ1dHRvbi5xdWVyeVNlbGVjdG9yKCcuc3Bpbm5lci1ib3JkZXInKTtcbiAgICAgICAgICAgICAgICBzcGlubmVyLnN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuICAgICAgICAgICAgICAgIHNwaW5uZXIuc3R5bGUub3BhY2l0eSA9IFwiMVwiO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBzaG93SW5kaWNhdG9yT25CdXR0b24oKTtcblxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./assets/js/ui/form_submit.js\n");

/***/ }),

/***/ "./assets/js/ui/header.js":
/*!********************************!*\
  !*** ./assets/js/ui/header.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/**\n * Collapsible header.\n *\n * Collapsible header is used for hiding / showing the summary of a\n * publication on the edit forms. The state of the header (hidden / shown)\n * is persisted across page reloads via the browsers local storage.\n */\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var Header = /*#__PURE__*/function () {\n    function Header(el) {\n      _classCallCheck(this, Header);\n\n      this.el = el;\n      this.collapsers = el.querySelectorAll('.c-header-collapse-trigger');\n      this.collapsed = false;\n      this.init();\n    }\n\n    _createClass(Header, [{\n      key: \"init\",\n      value: function init() {\n        var _this$collapsers,\n            _this = this;\n\n        try {\n          var savedState = JSON.parse(localStorage.getItem(HEADER_STATE_STORAGE_KEY));\n          headerState = Object.assign({}, headerState, savedState);\n        } catch (err) {\n          console.warn('There was an error parsing the saved state for the prototype navigation.');\n        } // Handle state on page load: open/close nav and close saved modules\n\n\n        if (headerState.isExpanded) {\n          this.show();\n        } else {\n          this.hide();\n        }\n\n        (_this$collapsers = this.collapsers) === null || _this$collapsers === void 0 ? void 0 : _this$collapsers.forEach(function (collapser) {\n          return collapser.addEventListener('click', _this);\n        });\n      }\n    }, {\n      key: \"handleEvent\",\n      value: function handleEvent(event) {\n        this.toggle(event);\n      }\n    }, {\n      key: \"toggle\",\n      value: function toggle(event) {\n        if (this.collapsed) this.show();else if (!this.collapsed) this.hide();\n      }\n    }, {\n      key: \"show\",\n      value: function show() {\n        this.el.dataset.collapsed = false;\n        this.collapsed = false;\n        headerState.isExpanded = true;\n        this.saveNavState();\n      }\n    }, {\n      key: \"saveNavState\",\n      value: function saveNavState() {\n        localStorage.setItem(HEADER_STATE_STORAGE_KEY, JSON.stringify(headerState));\n      }\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        this.el.dataset.collapsed = true;\n        this.collapsed = true;\n        headerState.isExpanded = false;\n        this.saveNavState();\n      }\n    }]);\n\n    return Header;\n  }();\n\n  var headerState = {\n    isExpanded: false\n  };\n  var collapsibleHeaders = document.querySelectorAll('.c-header-collapsible');\n  var HEADER_STATE_STORAGE_KEY = \"bedrockheaderState\";\n  if (collapsibleHeaders.length) _toConsumableArray(collapsibleHeaders).map(function (collapsibleHeader) {\n    return new Header(collapsibleHeader);\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvdWkvaGVhZGVyLmpzPzZmZmIiXSwibmFtZXMiOlsiSGVhZGVyIiwiZWwiLCJjb2xsYXBzZXJzIiwicXVlcnlTZWxlY3RvckFsbCIsImNvbGxhcHNlZCIsImluaXQiLCJzYXZlZFN0YXRlIiwiSlNPTiIsInBhcnNlIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsIkhFQURFUl9TVEFURV9TVE9SQUdFX0tFWSIsImhlYWRlclN0YXRlIiwiT2JqZWN0IiwiYXNzaWduIiwiZXJyIiwiY29uc29sZSIsIndhcm4iLCJpc0V4cGFuZGVkIiwic2hvdyIsImhpZGUiLCJmb3JFYWNoIiwiY29sbGFwc2VyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwidG9nZ2xlIiwiZGF0YXNldCIsInNhdmVOYXZTdGF0ZSIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJjb2xsYXBzaWJsZUhlYWRlcnMiLCJkb2N1bWVudCIsImxlbmd0aCIsIm1hcCIsImNvbGxhcHNpYmxlSGVhZGVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQyw2QkFBZSxzQ0FBVztBQUFBLE1BQ2pCQSxNQURpQjtBQUV0QixvQkFBWUMsRUFBWixFQUFnQjtBQUFBOztBQUNkLFdBQUtBLEVBQUwsR0FBVUEsRUFBVjtBQUNBLFdBQUtDLFVBQUwsR0FBa0JELEVBQUUsQ0FBQ0UsZ0JBQUgsQ0FBb0IsNEJBQXBCLENBQWxCO0FBQ0EsV0FBS0MsU0FBTCxHQUFpQixLQUFqQjtBQUNBLFdBQUtDLElBQUw7QUFDRDs7QUFQcUI7QUFBQTtBQUFBLGFBU3RCLGdCQUFPO0FBQUE7QUFBQTs7QUFDTCxZQUFJO0FBQ0YsY0FBTUMsVUFBVSxHQUFHQyxJQUFJLENBQUNDLEtBQUwsQ0FDakJDLFlBQVksQ0FBQ0MsT0FBYixDQUFxQkMsd0JBQXJCLENBRGlCLENBQW5CO0FBR0FDLHFCQUFXLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JGLFdBQWxCLEVBQStCTixVQUEvQixDQUFkO0FBQ0QsU0FMRCxDQUtFLE9BQU9TLEdBQVAsRUFBWTtBQUNaQyxpQkFBTyxDQUFDQyxJQUFSLENBQ0UsMEVBREY7QUFHRCxTQVZJLENBWU47OztBQUNBLFlBQUlMLFdBQVcsQ0FBQ00sVUFBaEIsRUFBNEI7QUFDMUIsZUFBS0MsSUFBTDtBQUNELFNBRkQsTUFFTztBQUNMLGVBQUtDLElBQUw7QUFDRDs7QUFFQSxpQ0FBS2xCLFVBQUwsc0VBQWlCbUIsT0FBakIsQ0FBeUIsVUFBQ0MsU0FBRDtBQUFBLGlCQUN4QkEsU0FBUyxDQUFDQyxnQkFBVixDQUEyQixPQUEzQixFQUFvQyxLQUFwQyxDQUR3QjtBQUFBLFNBQXpCO0FBR0Q7QUEvQnFCO0FBQUE7QUFBQSxhQWtDdEIscUJBQVlDLEtBQVosRUFBbUI7QUFDakIsYUFBS0MsTUFBTCxDQUFZRCxLQUFaO0FBQ0Q7QUFwQ3FCO0FBQUE7QUFBQSxhQXNDdEIsZ0JBQU9BLEtBQVAsRUFBYztBQUNaLFlBQUksS0FBS3BCLFNBQVQsRUFBb0IsS0FBS2UsSUFBTCxHQUFwQixLQUNLLElBQUksQ0FBQyxLQUFLZixTQUFWLEVBQXFCLEtBQUtnQixJQUFMO0FBQzNCO0FBekNxQjtBQUFBO0FBQUEsYUEyQ3RCLGdCQUFPO0FBQ0wsYUFBS25CLEVBQUwsQ0FBUXlCLE9BQVIsQ0FBZ0J0QixTQUFoQixHQUE0QixLQUE1QjtBQUNBLGFBQUtBLFNBQUwsR0FBaUIsS0FBakI7QUFDQVEsbUJBQVcsQ0FBQ00sVUFBWixHQUF5QixJQUF6QjtBQUVBLGFBQUtTLFlBQUw7QUFDRDtBQWpEcUI7QUFBQTtBQUFBLGFBbUR0Qix3QkFBZTtBQUNibEIsb0JBQVksQ0FBQ21CLE9BQWIsQ0FDQ2pCLHdCQURELEVBRUVKLElBQUksQ0FBQ3NCLFNBQUwsQ0FBZWpCLFdBQWYsQ0FGRjtBQUlEO0FBeERxQjtBQUFBO0FBQUEsYUEwRHRCLGdCQUFPO0FBQ0wsYUFBS1gsRUFBTCxDQUFReUIsT0FBUixDQUFnQnRCLFNBQWhCLEdBQTRCLElBQTVCO0FBQ0EsYUFBS0EsU0FBTCxHQUFpQixJQUFqQjtBQUNBUSxtQkFBVyxDQUFDTSxVQUFaLEdBQXlCLEtBQXpCO0FBQ0EsYUFBS1MsWUFBTDtBQUNEO0FBL0RxQjs7QUFBQTtBQUFBOztBQWtFdEIsTUFBSWYsV0FBVyxHQUFHO0FBQ2RNLGNBQVUsRUFBRTtBQURFLEdBQWxCO0FBSUEsTUFBTVksa0JBQWtCLEdBQUdDLFFBQVEsQ0FBQzVCLGdCQUFULENBQTBCLHVCQUExQixDQUEzQjtBQUNBLE1BQU1RLHdCQUF3Qix1QkFBOUI7QUFFQSxNQUFJbUIsa0JBQWtCLENBQUNFLE1BQXZCLEVBQStCLG1CQUFJRixrQkFBSixFQUF3QkcsR0FBeEIsQ0FBNEIsVUFBQ0MsaUJBQUQ7QUFBQSxXQUF1QixJQUFJbEMsTUFBSixDQUFXa0MsaUJBQVgsQ0FBdkI7QUFBQSxHQUE1QjtBQUNsQyIsImZpbGUiOiIuL2Fzc2V0cy9qcy91aS9oZWFkZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbGxhcHNpYmxlIGhlYWRlci5cbiAqXG4gKiBDb2xsYXBzaWJsZSBoZWFkZXIgaXMgdXNlZCBmb3IgaGlkaW5nIC8gc2hvd2luZyB0aGUgc3VtbWFyeSBvZiBhXG4gKiBwdWJsaWNhdGlvbiBvbiB0aGUgZWRpdCBmb3Jtcy4gVGhlIHN0YXRlIG9mIHRoZSBoZWFkZXIgKGhpZGRlbiAvIHNob3duKVxuICogaXMgcGVyc2lzdGVkIGFjcm9zcyBwYWdlIHJlbG9hZHMgdmlhIHRoZSBicm93c2VycyBsb2NhbCBzdG9yYWdlLlxuICovXG4gZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gICAgY2xhc3MgSGVhZGVyIHtcbiAgICAgY29uc3RydWN0b3IoZWwpIHtcbiAgICAgICB0aGlzLmVsID0gZWw7XG4gICAgICAgdGhpcy5jb2xsYXBzZXJzID0gZWwucXVlcnlTZWxlY3RvckFsbCgnLmMtaGVhZGVyLWNvbGxhcHNlLXRyaWdnZXInKTtcbiAgICAgICB0aGlzLmNvbGxhcHNlZCA9IGZhbHNlO1xuICAgICAgIHRoaXMuaW5pdCgpO1xuICAgICB9XG5cbiAgICAgaW5pdCgpIHtcbiAgICAgICB0cnkge1xuICAgICAgICAgY29uc3Qgc2F2ZWRTdGF0ZSA9IEpTT04ucGFyc2UoXG4gICAgICAgICAgIGxvY2FsU3RvcmFnZS5nZXRJdGVtKEhFQURFUl9TVEFURV9TVE9SQUdFX0tFWSlcbiAgICAgICAgICk7XG4gICAgICAgICBoZWFkZXJTdGF0ZSA9IE9iamVjdC5hc3NpZ24oe30sIGhlYWRlclN0YXRlLCBzYXZlZFN0YXRlKTtcbiAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgJ1RoZXJlIHdhcyBhbiBlcnJvciBwYXJzaW5nIHRoZSBzYXZlZCBzdGF0ZSBmb3IgdGhlIHByb3RvdHlwZSBuYXZpZ2F0aW9uLidcbiAgICAgICAgICk7XG4gICAgICAgfVxuXG4gICAgICAvLyBIYW5kbGUgc3RhdGUgb24gcGFnZSBsb2FkOiBvcGVuL2Nsb3NlIG5hdiBhbmQgY2xvc2Ugc2F2ZWQgbW9kdWxlc1xuICAgICAgaWYgKGhlYWRlclN0YXRlLmlzRXhwYW5kZWQpIHtcbiAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgIH1cblxuICAgICAgIHRoaXMuY29sbGFwc2Vycz8uZm9yRWFjaCgoY29sbGFwc2VyKSA9PlxuICAgICAgICBjb2xsYXBzZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzKVxuICAgICAgICk7XG4gICAgIH1cblxuXG4gICAgIGhhbmRsZUV2ZW50KGV2ZW50KSB7XG4gICAgICAgdGhpcy50b2dnbGUoZXZlbnQpO1xuICAgICB9XG5cbiAgICAgdG9nZ2xlKGV2ZW50KSB7XG4gICAgICAgaWYgKHRoaXMuY29sbGFwc2VkKSB0aGlzLnNob3coKTtcbiAgICAgICBlbHNlIGlmICghdGhpcy5jb2xsYXBzZWQpIHRoaXMuaGlkZSgpO1xuICAgICB9XG5cbiAgICAgc2hvdygpIHtcbiAgICAgICB0aGlzLmVsLmRhdGFzZXQuY29sbGFwc2VkID0gZmFsc2U7XG4gICAgICAgdGhpcy5jb2xsYXBzZWQgPSBmYWxzZTtcbiAgICAgICBoZWFkZXJTdGF0ZS5pc0V4cGFuZGVkID0gdHJ1ZTtcblxuICAgICAgIHRoaXMuc2F2ZU5hdlN0YXRlKCk7XG4gICAgIH1cblxuICAgICBzYXZlTmF2U3RhdGUoKSB7XG4gICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXG4gICAgICAgIEhFQURFUl9TVEFURV9TVE9SQUdFX0tFWSxcbiAgICAgICAgIEpTT04uc3RyaW5naWZ5KGhlYWRlclN0YXRlKVxuICAgICAgICk7XG4gICAgIH1cblxuICAgICBoaWRlKCkge1xuICAgICAgIHRoaXMuZWwuZGF0YXNldC5jb2xsYXBzZWQgPSB0cnVlO1xuICAgICAgIHRoaXMuY29sbGFwc2VkID0gdHJ1ZTtcbiAgICAgICBoZWFkZXJTdGF0ZS5pc0V4cGFuZGVkID0gZmFsc2U7XG4gICAgICAgdGhpcy5zYXZlTmF2U3RhdGUoKTtcbiAgICAgfVxuICAgfVxuXG4gICAgIGxldCBoZWFkZXJTdGF0ZSA9IHtcbiAgICAgICAgIGlzRXhwYW5kZWQ6IGZhbHNlLFxuICAgICB9O1xuXG4gICAgIGNvbnN0IGNvbGxhcHNpYmxlSGVhZGVycyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jLWhlYWRlci1jb2xsYXBzaWJsZScpO1xuICAgICBjb25zdCBIRUFERVJfU1RBVEVfU1RPUkFHRV9LRVkgPSBgYmVkcm9ja2hlYWRlclN0YXRlYDtcblxuICAgICBpZiAoY29sbGFwc2libGVIZWFkZXJzLmxlbmd0aCkgWy4uLmNvbGxhcHNpYmxlSGVhZGVyc10ubWFwKChjb2xsYXBzaWJsZUhlYWRlcikgPT4gbmV3IEhlYWRlcihjb2xsYXBzaWJsZUhlYWRlcikpO1xuIH0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./assets/js/ui/header.js\n");

/***/ }),

/***/ "./assets/js/ui/modal_close.js":
/*!*************************************!*\
  !*** ./assets/js/ui/modal_close.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! htmx.org */ \"./node_modules/htmx.org/dist/htmx.min.js\");\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(htmx_org__WEBPACK_IMPORTED_MODULE_0__);\n // Set an event handler on any buttons that have the 'modal-close' class.\n// This ensures that any and all modals can be closed via 'close', 'cancel', etc. buttons.\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var modalClose = function modalClose(evt) {\n    var modal = document.querySelectorAll(\".modal\").item(0);\n    var backdrop = document.querySelectorAll(\".modal-backdrop\").item(0);\n\n    if (modal) {\n      modal.classList.remove(\"show\");\n    }\n\n    if (backdrop) {\n      backdrop.classList.remove(\"show\");\n    } // Timeout gives us a fluid animation\n\n\n    setTimeout(function () {\n      if (backdrop) {\n        backdrop.remove();\n      }\n\n      if (modal) {\n        modal.remove();\n      }\n    }, 100);\n  };\n\n  var modalCloseSecondary = function modalCloseSecondary(evt) {\n    var modal = evt.target.closest(\".modal\");\n\n    if (modal) {\n      modal.classList.remove(\"show\");\n    } // Timeout gives us a fluid animation\n\n\n    setTimeout(function () {\n      if (modal) {\n        modal.remove();\n      }\n    }, 100);\n  }; // Close the modal after the item was deleted from the backend.\n  //\n  // If we tried to add the modal-close class directly to the \"confirm\" button\n  // on a confirmation button, the modal would be removed from the DOM before\n  // the itemDeleted event could be triggered. Without the modal nodes present\n  // in the DOM, the event won't be registered correctly by HTMX. As a result,\n  // other triggers listening for the event won't execute. Instead, we\n  // use the event itself as a trigger for the modal to close.\n\n\n  htmx_org__WEBPACK_IMPORTED_MODULE_0___default().on(\"PublicationCreateAbstract\", function (evt) {\n    modalClose();\n  });\n  htmx_org__WEBPACK_IMPORTED_MODULE_0___default().on(\"PublicationUpdateAbstract\", function (evt) {\n    modalClose();\n  });\n  htmx_org__WEBPACK_IMPORTED_MODULE_0___default().on(\"PublicationRemoveAbstract\", function (evt) {\n    modalClose();\n  });\n  htmx_org__WEBPACK_IMPORTED_MODULE_0___default().on(\"PublicationCreateLink\", function (evt) {\n    modalClose();\n  });\n  htmx_org__WEBPACK_IMPORTED_MODULE_0___default().on(\"PublicationUpdateLink\", function (evt) {\n    modalClose();\n  });\n  htmx_org__WEBPACK_IMPORTED_MODULE_0___default().on(\"PublicationRemoveLink\", function (evt) {\n    modalClose();\n  });\n  htmx_org__WEBPACK_IMPORTED_MODULE_0___default().on(\"DatasetCreateAbstract\", function (evt) {\n    modalClose();\n  });\n  htmx_org__WEBPACK_IMPORTED_MODULE_0___default().on(\"DatasetUpdateAbstract\", function (evt) {\n    modalClose();\n  });\n  htmx_org__WEBPACK_IMPORTED_MODULE_0___default().on(\"DatasetRemoveAbstract\", function (evt) {\n    modalClose();\n  });\n  htmx_org__WEBPACK_IMPORTED_MODULE_0___default().onLoad(function (el) {\n    el.querySelectorAll(\".modal-close\").forEach(function (btn) {\n      btn.addEventListener(\"click\", modalClose);\n    });\n    el.querySelectorAll(\".modal-close-secondary\").forEach(function (btn) {\n      btn.addEventListener(\"click\", modalCloseSecondary);\n    });\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvdWkvbW9kYWxfY2xvc2UuanM/ZmZkYyJdLCJuYW1lcyI6WyJtb2RhbENsb3NlIiwiZXZ0IiwibW9kYWwiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpdGVtIiwiYmFja2Ryb3AiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJzZXRUaW1lb3V0IiwibW9kYWxDbG9zZVNlY29uZGFyeSIsInRhcmdldCIsImNsb3Nlc3QiLCJodG14IiwiZWwiLCJmb3JFYWNoIiwiYnRuIiwiYWRkRXZlbnRMaXN0ZW5lciJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0NBRUE7QUFDQTs7QUFDQSw2QkFBZSxzQ0FBVztBQUN0QixNQUFJQSxVQUFVLEdBQUcsU0FBYkEsVUFBYSxDQUFTQyxHQUFULEVBQWM7QUFDM0IsUUFBSUMsS0FBSyxHQUFHQyxRQUFRLENBQUNDLGdCQUFULENBQTBCLFFBQTFCLEVBQW9DQyxJQUFwQyxDQUF5QyxDQUF6QyxDQUFaO0FBQ0EsUUFBSUMsUUFBUSxHQUFHSCxRQUFRLENBQUNDLGdCQUFULENBQTBCLGlCQUExQixFQUE2Q0MsSUFBN0MsQ0FBa0QsQ0FBbEQsQ0FBZjs7QUFFQSxRQUFJSCxLQUFKLEVBQVc7QUFDUEEsV0FBSyxDQUFDSyxTQUFOLENBQWdCQyxNQUFoQixDQUF1QixNQUF2QjtBQUNIOztBQUVELFFBQUlGLFFBQUosRUFBYztBQUNWQSxjQUFRLENBQUNDLFNBQVQsQ0FBbUJDLE1BQW5CLENBQTBCLE1BQTFCO0FBQ0gsS0FWMEIsQ0FZM0I7OztBQUNBQyxjQUFVLENBQUMsWUFBVztBQUNsQixVQUFJSCxRQUFKLEVBQWM7QUFDVkEsZ0JBQVEsQ0FBQ0UsTUFBVDtBQUNIOztBQUVELFVBQUlOLEtBQUosRUFBVztBQUNQQSxhQUFLLENBQUNNLE1BQU47QUFDSDtBQUNKLEtBUlMsRUFRUCxHQVJPLENBQVY7QUFTSCxHQXRCRDs7QUF3QkEsTUFBSUUsbUJBQW1CLEdBQUcsU0FBdEJBLG1CQUFzQixDQUFTVCxHQUFULEVBQWM7QUFDcEMsUUFBSUMsS0FBSyxHQUFHRCxHQUFHLENBQUNVLE1BQUosQ0FBV0MsT0FBWCxDQUFtQixRQUFuQixDQUFaOztBQUVBLFFBQUlWLEtBQUosRUFBVztBQUNQQSxXQUFLLENBQUNLLFNBQU4sQ0FBZ0JDLE1BQWhCLENBQXVCLE1BQXZCO0FBQ0gsS0FMbUMsQ0FPcEM7OztBQUNBQyxjQUFVLENBQUMsWUFBVztBQUNsQixVQUFJUCxLQUFKLEVBQVc7QUFDUEEsYUFBSyxDQUFDTSxNQUFOO0FBQ0g7QUFDSixLQUpTLEVBSVAsR0FKTyxDQUFWO0FBS0gsR0FiRCxDQXpCc0IsQ0F3Q3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBSyxvREFBQSxDQUFRLDJCQUFSLEVBQXFDLFVBQVNaLEdBQVQsRUFBYztBQUMvQ0QsY0FBVTtBQUNiLEdBRkQ7QUFJQWEsb0RBQUEsQ0FBUSwyQkFBUixFQUFxQyxVQUFTWixHQUFULEVBQWM7QUFDL0NELGNBQVU7QUFDYixHQUZEO0FBSUFhLG9EQUFBLENBQVEsMkJBQVIsRUFBcUMsVUFBU1osR0FBVCxFQUFjO0FBQy9DRCxjQUFVO0FBQ2IsR0FGRDtBQUlBYSxvREFBQSxDQUFRLHVCQUFSLEVBQWlDLFVBQVNaLEdBQVQsRUFBYztBQUMzQ0QsY0FBVTtBQUNiLEdBRkQ7QUFJQWEsb0RBQUEsQ0FBUSx1QkFBUixFQUFpQyxVQUFTWixHQUFULEVBQWM7QUFDM0NELGNBQVU7QUFDYixHQUZEO0FBSUFhLG9EQUFBLENBQVEsdUJBQVIsRUFBaUMsVUFBU1osR0FBVCxFQUFjO0FBQzNDRCxjQUFVO0FBQ2IsR0FGRDtBQUlBYSxvREFBQSxDQUFRLHVCQUFSLEVBQWlDLFVBQVNaLEdBQVQsRUFBYztBQUMzQ0QsY0FBVTtBQUNiLEdBRkQ7QUFJQWEsb0RBQUEsQ0FBUSx1QkFBUixFQUFpQyxVQUFTWixHQUFULEVBQWM7QUFDM0NELGNBQVU7QUFDYixHQUZEO0FBSUFhLG9EQUFBLENBQVEsdUJBQVIsRUFBaUMsVUFBU1osR0FBVCxFQUFjO0FBQzNDRCxjQUFVO0FBQ2IsR0FGRDtBQUlBYSx3REFBQSxDQUFZLFVBQVNDLEVBQVQsRUFBYTtBQUNyQkEsTUFBRSxDQUFDVixnQkFBSCxDQUFvQixjQUFwQixFQUFvQ1csT0FBcEMsQ0FBNkMsVUFBVUMsR0FBVixFQUFlO0FBQ3hEQSxTQUFHLENBQUNDLGdCQUFKLENBQXFCLE9BQXJCLEVBQThCakIsVUFBOUI7QUFDSCxLQUZEO0FBR0FjLE1BQUUsQ0FBQ1YsZ0JBQUgsQ0FBb0Isd0JBQXBCLEVBQThDVyxPQUE5QyxDQUF1RCxVQUFVQyxHQUFWLEVBQWU7QUFDbEVBLFNBQUcsQ0FBQ0MsZ0JBQUosQ0FBcUIsT0FBckIsRUFBOEJQLG1CQUE5QjtBQUNILEtBRkQ7QUFHSCxHQVBEO0FBUUgiLCJmaWxlIjoiLi9hc3NldHMvanMvdWkvbW9kYWxfY2xvc2UuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaHRteCBmcm9tICdodG14Lm9yZyc7XG5cbi8vIFNldCBhbiBldmVudCBoYW5kbGVyIG9uIGFueSBidXR0b25zIHRoYXQgaGF2ZSB0aGUgJ21vZGFsLWNsb3NlJyBjbGFzcy5cbi8vIFRoaXMgZW5zdXJlcyB0aGF0IGFueSBhbmQgYWxsIG1vZGFscyBjYW4gYmUgY2xvc2VkIHZpYSAnY2xvc2UnLCAnY2FuY2VsJywgZXRjLiBidXR0b25zLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gICAgbGV0IG1vZGFsQ2xvc2UgPSBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgbGV0IG1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5tb2RhbFwiKS5pdGVtKDApXG4gICAgICAgIGxldCBiYWNrZHJvcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIubW9kYWwtYmFja2Ryb3BcIikuaXRlbSgwKVxuXG4gICAgICAgIGlmIChtb2RhbCkge1xuICAgICAgICAgICAgbW9kYWwuY2xhc3NMaXN0LnJlbW92ZShcInNob3dcIilcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChiYWNrZHJvcCkge1xuICAgICAgICAgICAgYmFja2Ryb3AuY2xhc3NMaXN0LnJlbW92ZShcInNob3dcIilcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRpbWVvdXQgZ2l2ZXMgdXMgYSBmbHVpZCBhbmltYXRpb25cbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChiYWNrZHJvcCkge1xuICAgICAgICAgICAgICAgIGJhY2tkcm9wLnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobW9kYWwpIHtcbiAgICAgICAgICAgICAgICBtb2RhbC5yZW1vdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgMTAwKVxuICAgIH1cblxuICAgIGxldCBtb2RhbENsb3NlU2Vjb25kYXJ5ID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgIGxldCBtb2RhbCA9IGV2dC50YXJnZXQuY2xvc2VzdChcIi5tb2RhbFwiKVxuXG4gICAgICAgIGlmIChtb2RhbCkge1xuICAgICAgICAgICAgbW9kYWwuY2xhc3NMaXN0LnJlbW92ZShcInNob3dcIilcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRpbWVvdXQgZ2l2ZXMgdXMgYSBmbHVpZCBhbmltYXRpb25cbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChtb2RhbCkge1xuICAgICAgICAgICAgICAgIG1vZGFsLnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCAxMDApXG4gICAgfVxuXG4gICAgLy8gQ2xvc2UgdGhlIG1vZGFsIGFmdGVyIHRoZSBpdGVtIHdhcyBkZWxldGVkIGZyb20gdGhlIGJhY2tlbmQuXG4gICAgLy9cbiAgICAvLyBJZiB3ZSB0cmllZCB0byBhZGQgdGhlIG1vZGFsLWNsb3NlIGNsYXNzIGRpcmVjdGx5IHRvIHRoZSBcImNvbmZpcm1cIiBidXR0b25cbiAgICAvLyBvbiBhIGNvbmZpcm1hdGlvbiBidXR0b24sIHRoZSBtb2RhbCB3b3VsZCBiZSByZW1vdmVkIGZyb20gdGhlIERPTSBiZWZvcmVcbiAgICAvLyB0aGUgaXRlbURlbGV0ZWQgZXZlbnQgY291bGQgYmUgdHJpZ2dlcmVkLiBXaXRob3V0IHRoZSBtb2RhbCBub2RlcyBwcmVzZW50XG4gICAgLy8gaW4gdGhlIERPTSwgdGhlIGV2ZW50IHdvbid0IGJlIHJlZ2lzdGVyZWQgY29ycmVjdGx5IGJ5IEhUTVguIEFzIGEgcmVzdWx0LFxuICAgIC8vIG90aGVyIHRyaWdnZXJzIGxpc3RlbmluZyBmb3IgdGhlIGV2ZW50IHdvbid0IGV4ZWN1dGUuIEluc3RlYWQsIHdlXG4gICAgLy8gdXNlIHRoZSBldmVudCBpdHNlbGYgYXMgYSB0cmlnZ2VyIGZvciB0aGUgbW9kYWwgdG8gY2xvc2UuXG4gICAgaHRteC5vbihcIlB1YmxpY2F0aW9uQ3JlYXRlQWJzdHJhY3RcIiwgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgIG1vZGFsQ2xvc2UoKTtcbiAgICB9KTtcblxuICAgIGh0bXgub24oXCJQdWJsaWNhdGlvblVwZGF0ZUFic3RyYWN0XCIsIGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICBtb2RhbENsb3NlKCk7XG4gICAgfSk7XG5cbiAgICBodG14Lm9uKFwiUHVibGljYXRpb25SZW1vdmVBYnN0cmFjdFwiLCBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgbW9kYWxDbG9zZSgpO1xuICAgIH0pO1xuXG4gICAgaHRteC5vbihcIlB1YmxpY2F0aW9uQ3JlYXRlTGlua1wiLCBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgbW9kYWxDbG9zZSgpO1xuICAgIH0pO1xuXG4gICAgaHRteC5vbihcIlB1YmxpY2F0aW9uVXBkYXRlTGlua1wiLCBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgbW9kYWxDbG9zZSgpO1xuICAgIH0pO1xuXG4gICAgaHRteC5vbihcIlB1YmxpY2F0aW9uUmVtb3ZlTGlua1wiLCBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgbW9kYWxDbG9zZSgpO1xuICAgIH0pO1xuXG4gICAgaHRteC5vbihcIkRhdGFzZXRDcmVhdGVBYnN0cmFjdFwiLCBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgbW9kYWxDbG9zZSgpO1xuICAgIH0pO1xuXG4gICAgaHRteC5vbihcIkRhdGFzZXRVcGRhdGVBYnN0cmFjdFwiLCBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgbW9kYWxDbG9zZSgpO1xuICAgIH0pO1xuXG4gICAgaHRteC5vbihcIkRhdGFzZXRSZW1vdmVBYnN0cmFjdFwiLCBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgbW9kYWxDbG9zZSgpO1xuICAgIH0pO1xuXG4gICAgaHRteC5vbkxvYWQoZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgZWwucXVlcnlTZWxlY3RvckFsbChcIi5tb2RhbC1jbG9zZVwiKS5mb3JFYWNoKCBmdW5jdGlvbiAoYnRuKSB7XG4gICAgICAgICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIG1vZGFsQ2xvc2UpO1xuICAgICAgICB9KTtcbiAgICAgICAgZWwucXVlcnlTZWxlY3RvckFsbChcIi5tb2RhbC1jbG9zZS1zZWNvbmRhcnlcIikuZm9yRWFjaCggZnVuY3Rpb24gKGJ0bikge1xuICAgICAgICAgICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBtb2RhbENsb3NlU2Vjb25kYXJ5KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./assets/js/ui/modal_close.js\n");

/***/ }),

/***/ "./assets/js/ui/modal_popper.js":
/*!**************************************!*\
  !*** ./assets/js/ui/modal_popper.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var popper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! popper.js */ \"./node_modules/popper.js/dist/esm/popper.js\");\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! htmx.org */ \"./node_modules/htmx.org/dist/htmx.min.js\");\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(htmx_org__WEBPACK_IMPORTED_MODULE_0__);\n\n // Wire in popper.js support. This ensure popups stay within the viewport.\n//\n// Bootstrap Native doesn't incorporate Popper.js. We have to wire everything ourselves.\n// See: https://github.com/thednp/bootstrap.native/issues/211\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var popper = function popper() {\n    document.querySelectorAll(\"div.dropdown > button\").forEach(function (button) {\n      button.addEventListener(\"click\", function (evt) {\n        var menu = button.parentElement.children.item(1);\n\n        if (menu.classList.contains(\"show\")) {\n          menu.removeAttribute(\"x-placement\");\n          menu.removeAttribute(\"style\");\n\n          var _popper = new popper_js__WEBPACK_IMPORTED_MODULE_1__.default(button, menu, {\n            modifiers: {\n              preventOverflow: {\n                enabled: true\n              },\n              flip: {\n                enabled: true\n              },\n              hide: {\n                enabled: false\n              }\n            }\n          });\n        }\n      });\n    });\n  };\n\n  popper();\n  htmx_org__WEBPACK_IMPORTED_MODULE_0___default().on(\"htmx:afterSettle\", function (evt) {\n    popper();\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvdWkvbW9kYWxfcG9wcGVyLmpzP2U1ZWEiXSwibmFtZXMiOlsicG9wcGVyIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsImJ1dHRvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJldnQiLCJtZW51IiwicGFyZW50RWxlbWVudCIsImNoaWxkcmVuIiwiaXRlbSIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwicmVtb3ZlQXR0cmlidXRlIiwiUG9wcGVyIiwibW9kaWZpZXJzIiwicHJldmVudE92ZXJmbG93IiwiZW5hYmxlZCIsImZsaXAiLCJoaWRlIiwiaHRteCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0NBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsNkJBQWUsc0NBQVc7QUFDdEIsTUFBSUEsTUFBTSxHQUFHLFNBQVRBLE1BQVMsR0FBVztBQUNwQkMsWUFBUSxDQUFDQyxnQkFBVCxDQUEwQix1QkFBMUIsRUFBbURDLE9BQW5ELENBQTJELFVBQVNDLE1BQVQsRUFBaUI7QUFDeEVBLFlBQU0sQ0FBQ0MsZ0JBQVAsQ0FBd0IsT0FBeEIsRUFBaUMsVUFBU0MsR0FBVCxFQUFjO0FBQzNDLFlBQUlDLElBQUksR0FBR0gsTUFBTSxDQUFDSSxhQUFQLENBQXFCQyxRQUFyQixDQUE4QkMsSUFBOUIsQ0FBbUMsQ0FBbkMsQ0FBWDs7QUFFQSxZQUFJSCxJQUFJLENBQUNJLFNBQUwsQ0FBZUMsUUFBZixDQUF3QixNQUF4QixDQUFKLEVBQXFDO0FBQ2pDTCxjQUFJLENBQUNNLGVBQUwsQ0FBcUIsYUFBckI7QUFDQU4sY0FBSSxDQUFDTSxlQUFMLENBQXFCLE9BQXJCOztBQUVBLGNBQUliLE9BQU0sR0FBRyxJQUFJYyw4Q0FBSixDQUFXVixNQUFYLEVBQW1CRyxJQUFuQixFQUF5QjtBQUNsQ1EscUJBQVMsRUFBRTtBQUNQQyw2QkFBZSxFQUFFO0FBQUVDLHVCQUFPLEVBQUU7QUFBWCxlQURWO0FBRVBDLGtCQUFJLEVBQUU7QUFBRUQsdUJBQU8sRUFBRTtBQUFYLGVBRkM7QUFHUEUsa0JBQUksRUFBRTtBQUFFRix1QkFBTyxFQUFFO0FBQVg7QUFIQztBQUR1QixXQUF6QixDQUFiO0FBT0g7QUFDSixPQWZEO0FBZ0JILEtBakJEO0FBa0JILEdBbkJEOztBQXFCQWpCLFFBQU07QUFFTm9CLG9EQUFBLENBQVEsa0JBQVIsRUFBNEIsVUFBU2QsR0FBVCxFQUFjO0FBQ3RDTixVQUFNO0FBQ1QsR0FGRDtBQUlIIiwiZmlsZSI6Ii4vYXNzZXRzL2pzL3VpL21vZGFsX3BvcHBlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQb3BwZXIgZnJvbSAncG9wcGVyLmpzJ1xuaW1wb3J0IGh0bXggZnJvbSAnaHRteC5vcmcnO1xuXG4vLyBXaXJlIGluIHBvcHBlci5qcyBzdXBwb3J0LiBUaGlzIGVuc3VyZSBwb3B1cHMgc3RheSB3aXRoaW4gdGhlIHZpZXdwb3J0LlxuLy9cbi8vIEJvb3RzdHJhcCBOYXRpdmUgZG9lc24ndCBpbmNvcnBvcmF0ZSBQb3BwZXIuanMuIFdlIGhhdmUgdG8gd2lyZSBldmVyeXRoaW5nIG91cnNlbHZlcy5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3RoZWRucC9ib290c3RyYXAubmF0aXZlL2lzc3Vlcy8yMTFcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICAgIGxldCBwb3BwZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImRpdi5kcm9wZG93biA+IGJ1dHRvblwiKS5mb3JFYWNoKGZ1bmN0aW9uKGJ1dHRvbikge1xuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgICAgICAgICBsZXQgbWVudSA9IGJ1dHRvbi5wYXJlbnRFbGVtZW50LmNoaWxkcmVuLml0ZW0oMSk7XG5cbiAgICAgICAgICAgICAgICBpZiAobWVudS5jbGFzc0xpc3QuY29udGFpbnMoXCJzaG93XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lbnUucmVtb3ZlQXR0cmlidXRlKFwieC1wbGFjZW1lbnRcIik7XG4gICAgICAgICAgICAgICAgICAgIG1lbnUucmVtb3ZlQXR0cmlidXRlKFwic3R5bGVcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IHBvcHBlciA9IG5ldyBQb3BwZXIoYnV0dG9uLCBtZW51LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RpZmllcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2ZW50T3ZlcmZsb3c6IHsgZW5hYmxlZDogdHJ1ZSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsaXA6IHsgZW5hYmxlZDogdHJ1ZX0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlkZTogeyBlbmFibGVkOiBmYWxzZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcG9wcGVyKCk7XG5cbiAgICBodG14Lm9uKFwiaHRteDphZnRlclNldHRsZVwiLCBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgcG9wcGVyKCk7XG4gICAgfSk7XG5cbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./assets/js/ui/modal_popper.js\n");

/***/ }),

/***/ "./assets/js/ui/multiple.js":
/*!**********************************!*\
  !*** ./assets/js/ui/multiple.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! htmx.org */ \"./node_modules/htmx.org/dist/htmx.min.js\");\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(htmx_org__WEBPACK_IMPORTED_MODULE_0__);\n // Handles fields with multiple values\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var reTmpl = /^data-tmpl-(.+)/;\n\n  var setValueIndex = function setValueIndex(formValue, valueIndex) {\n    Array.from(formValue.getElementsByTagName('*')).forEach(function (el) {\n      if (el.hasAttributes()) {\n        var attrs = el.attributes;\n\n        for (var i = 0; i < attrs.length; i++) {\n          var m = attrs[i].name.match(reTmpl);\n\n          if (m) {\n            el.setAttribute(m[1], attrs[i].value.replace('{i}', valueIndex));\n          }\n        }\n      }\n    });\n  };\n\n  var addEvents = function addEvents(rootEl) {\n    // Delete a value from the field\n    var deleteFormValue = function deleteFormValue(e) {\n      var formField = e.target.closest(\"div.form-values\");\n      e.target.closest(\"div.form-value\").remove();\n      var length = Array.from(formField.children).length;\n\n      for (var valueIndex = 0; valueIndex < length; valueIndex++) {\n        setValueIndex(formField.children[valueIndex], valueIndex);\n      }\n    }; // Add a new value to the field\n\n\n    var addFormValue = function addFormValue(e) {\n      var formField = e.target.closest(\"div.form-values\");\n      var lastValue = formField.lastElementChild;\n      var valueIndex = Array.from(formField.children).length;\n      var newValue = lastValue.cloneNode(true);\n      newValue.querySelector(\".form-control\").value = \"\";\n      newValue.querySelectorAll(\".is-invalid\").forEach(function (item) {\n        item.classList.remove(\"is-invalid\");\n      }); // set html attrs from their templates\n\n      setValueIndex(newValue, valueIndex); // switch last value button to delete\n\n      var lastBtn = lastValue.querySelector(\"button.form-value-add\");\n      var classList = lastBtn.classList;\n      classList.remove(\"form-value-add\");\n      classList.remove(\"btn-outline-primary\");\n      classList.add(\"btn-link-muted\");\n      classList.add(\"form-value-delete\");\n      classList = lastValue.querySelector(\"i.if-add\").classList;\n      classList.remove(\"if-add\");\n      classList.add(\"if-delete\");\n      lastValue.querySelector(\"div.sr-only\").textContent = \"Delete\";\n      lastBtn.removeEventListener(\"click\", addFormValue);\n      lastBtn.addEventListener(\"click\", deleteFormValue); // insert new value\n\n      lastValue.after(newValue); // activate htmx on new element\n\n      htmx_org__WEBPACK_IMPORTED_MODULE_0___default().process(newValue); // activate add button\n\n      newValue.querySelector(\"button.form-value-add\").addEventListener(\"click\", addFormValue); // fire added event\n\n      newValue.dispatchEvent(new CustomEvent('form-value-add', {\n        bubbles: true\n      }));\n    };\n\n    rootEl.querySelectorAll(\"button.form-value-delete\").forEach(function (el) {\n      return el.addEventListener(\"click\", deleteFormValue);\n    });\n    rootEl.querySelectorAll(\"button.form-value-add\").forEach(function (el) {\n      return el.addEventListener(\"click\", addFormValue);\n    });\n  };\n\n  htmx_org__WEBPACK_IMPORTED_MODULE_0___default().onLoad(function (el) {\n    addEvents(el);\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./assets/js/ui/multiple.js\n");

/***/ }),

/***/ "./assets/js/ui/popover.js":
/*!*********************************!*\
  !*** ./assets/js/ui/popover.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! htmx.org */ \"./node_modules/htmx.org/dist/htmx.min.js\");\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(htmx_org__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var bootstrap_native_dist_bootstrap_native_v4__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bootstrap.native/dist/bootstrap-native-v4 */ \"./node_modules/bootstrap.native/dist/bootstrap-native-v4.js\");\n/* harmony import */ var bootstrap_native_dist_bootstrap_native_v4__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(bootstrap_native_dist_bootstrap_native_v4__WEBPACK_IMPORTED_MODULE_1__);\n\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var addEvents = function addEvents(rootEl) {\n    rootEl.querySelectorAll('[data-toggle=popover-custom]').forEach(function (el) {\n      var container = document.querySelector(el.dataset.popoverContent);\n      var content = container.querySelector('.popover-body');\n      var heading = container.querySelector('.popover-heading');\n      var title = \"\";\n\n      if (heading) {\n        title = heading.innerHTML;\n      }\n\n      new (bootstrap_native_dist_bootstrap_native_v4__WEBPACK_IMPORTED_MODULE_1___default().Popover)(el, {\n        content: content.innerHTML,\n        title: title,\n        delay: 1000\n      });\n    });\n  };\n\n  htmx_org__WEBPACK_IMPORTED_MODULE_0___default().onLoad(function (el) {\n    addEvents(el);\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvdWkvcG9wb3Zlci5qcz9iMmRjIl0sIm5hbWVzIjpbImFkZEV2ZW50cyIsInJvb3RFbCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JFYWNoIiwiZWwiLCJjb250YWluZXIiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJkYXRhc2V0IiwicG9wb3ZlckNvbnRlbnQiLCJjb250ZW50IiwiaGVhZGluZyIsInRpdGxlIiwiaW5uZXJIVE1MIiwiQlNOIiwiZGVsYXkiLCJodG14Il0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFFQSw2QkFBZSxzQ0FBWTtBQUN2QixNQUFJQSxTQUFTLEdBQUcsU0FBWkEsU0FBWSxDQUFTQyxNQUFULEVBQWlCO0FBQzdCQSxVQUFNLENBQUNDLGdCQUFQLENBQXdCLDhCQUF4QixFQUF3REMsT0FBeEQsQ0FBZ0UsVUFBU0MsRUFBVCxFQUFhO0FBQ3pFLFVBQUlDLFNBQVMsR0FBR0MsUUFBUSxDQUFDQyxhQUFULENBQXVCSCxFQUFFLENBQUNJLE9BQUgsQ0FBV0MsY0FBbEMsQ0FBaEI7QUFDQSxVQUFJQyxPQUFPLEdBQUdMLFNBQVMsQ0FBQ0UsYUFBVixDQUF3QixlQUF4QixDQUFkO0FBQ0EsVUFBSUksT0FBTyxHQUFHTixTQUFTLENBQUNFLGFBQVYsQ0FBd0Isa0JBQXhCLENBQWQ7QUFDQSxVQUFJSyxLQUFLLEdBQUcsRUFBWjs7QUFDQSxVQUFJRCxPQUFKLEVBQWE7QUFDVEMsYUFBSyxHQUFHRCxPQUFPLENBQUNFLFNBQWhCO0FBQ0g7O0FBQ0QsVUFBSUMsMEZBQUosQ0FBZ0JWLEVBQWhCLEVBQW9CO0FBQ2hCTSxlQUFPLEVBQUVBLE9BQU8sQ0FBQ0csU0FERDtBQUVoQkQsYUFBSyxFQUFFQSxLQUZTO0FBR2hCRyxhQUFLLEVBQUU7QUFIUyxPQUFwQjtBQUtILEtBYkQ7QUFjSCxHQWZEOztBQWlCQUMsd0RBQUEsQ0FBWSxVQUFTWixFQUFULEVBQWE7QUFDckJKLGFBQVMsQ0FBQ0ksRUFBRCxDQUFUO0FBQ0gsR0FGRDtBQUdIIiwiZmlsZSI6Ii4vYXNzZXRzL2pzL3VpL3BvcG92ZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaHRteCBmcm9tICdodG14Lm9yZyc7XG5pbXBvcnQgQlNOIGZyb20gXCJib290c3RyYXAubmF0aXZlL2Rpc3QvYm9vdHN0cmFwLW5hdGl2ZS12NFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGFkZEV2ZW50cyA9IGZ1bmN0aW9uKHJvb3RFbCkge1xuICAgICAgICByb290RWwucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtdG9nZ2xlPXBvcG92ZXItY3VzdG9tXScpLmZvckVhY2goZnVuY3Rpb24oZWwpIHtcbiAgICAgICAgICAgIGxldCBjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsLmRhdGFzZXQucG9wb3ZlckNvbnRlbnQpXG4gICAgICAgICAgICBsZXQgY29udGVudCA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcucG9wb3Zlci1ib2R5JylcbiAgICAgICAgICAgIGxldCBoZWFkaW5nID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5wb3BvdmVyLWhlYWRpbmcnKVxuICAgICAgICAgICAgbGV0IHRpdGxlID0gXCJcIlxuICAgICAgICAgICAgaWYgKGhlYWRpbmcpIHtcbiAgICAgICAgICAgICAgICB0aXRsZSA9IGhlYWRpbmcuaW5uZXJIVE1MXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXcgQlNOLlBvcG92ZXIoZWwsIHtcbiAgICAgICAgICAgICAgICBjb250ZW50OiBjb250ZW50LmlubmVySFRNTCxcbiAgICAgICAgICAgICAgICB0aXRsZTogdGl0bGUsXG4gICAgICAgICAgICAgICAgZGVsYXk6IDEwMDAsXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGh0bXgub25Mb2FkKGZ1bmN0aW9uKGVsKSB7XG4gICAgICAgIGFkZEV2ZW50cyhlbClcbiAgICB9KTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./assets/js/ui/popover.js\n");

/***/ }),

/***/ "./assets/js/ui/radio_card.js":
/*!************************************!*\
  !*** ./assets/js/ui/radio_card.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! htmx.org */ \"./node_modules/htmx.org/dist/htmx.min.js\");\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(htmx_org__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var toggleSelected = function toggleSelected(evt) {\n    var group = evt.currentTarget.closest('.radio-card-group');\n    var cards = group.querySelectorAll('.c-radio-card');\n    cards.forEach(function (card) {\n      card.setAttribute('aria-selected', 'false');\n      card.classList.remove('c-radio-card--selected');\n    });\n    evt.currentTarget.setAttribute('aria-selected', 'true');\n    evt.currentTarget.classList.add('c-radio-card--selected');\n  };\n\n  var goToURL = function goToURL(evt) {\n    window.location = this.dataset.url;\n  };\n\n  var addEvents = function addEvents() {\n    document.querySelectorAll('.radio-card-group .c-radio-card').forEach(function (card) {\n      return card.addEventListener('click', toggleSelected);\n    });\n    document.querySelectorAll('.c-radio-card[data-url]').forEach(function (card) {\n      return card.addEventListener('click', goToURL);\n    });\n  };\n\n  addEvents(); // TODO don't use afterSettle\n\n  htmx_org__WEBPACK_IMPORTED_MODULE_0___default().on(\"htmx:afterSettle\", function (evt) {\n    addEvents();\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvdWkvcmFkaW9fY2FyZC5qcz83MTc5Il0sIm5hbWVzIjpbInRvZ2dsZVNlbGVjdGVkIiwiZXZ0IiwiZ3JvdXAiLCJjdXJyZW50VGFyZ2V0IiwiY2xvc2VzdCIsImNhcmRzIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJjYXJkIiwic2V0QXR0cmlidXRlIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwiYWRkIiwiZ29Ub1VSTCIsIndpbmRvdyIsImxvY2F0aW9uIiwiZGF0YXNldCIsInVybCIsImFkZEV2ZW50cyIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImh0bXgiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBRUEsNkJBQWUsc0NBQVk7QUFDdkIsTUFBSUEsY0FBYyxHQUFHLFNBQWpCQSxjQUFpQixDQUFTQyxHQUFULEVBQWM7QUFDL0IsUUFBSUMsS0FBSyxHQUFHRCxHQUFHLENBQUNFLGFBQUosQ0FBa0JDLE9BQWxCLENBQTBCLG1CQUExQixDQUFaO0FBQ0EsUUFBSUMsS0FBSyxHQUFHSCxLQUFLLENBQUNJLGdCQUFOLENBQXVCLGVBQXZCLENBQVo7QUFDQUQsU0FBSyxDQUFDRSxPQUFOLENBQWMsVUFBU0MsSUFBVCxFQUFlO0FBQ3pCQSxVQUFJLENBQUNDLFlBQUwsQ0FBa0IsZUFBbEIsRUFBbUMsT0FBbkM7QUFDQUQsVUFBSSxDQUFDRSxTQUFMLENBQWVDLE1BQWYsQ0FBc0Isd0JBQXRCO0FBQ0gsS0FIRDtBQUlBVixPQUFHLENBQUNFLGFBQUosQ0FBa0JNLFlBQWxCLENBQStCLGVBQS9CLEVBQWdELE1BQWhEO0FBQ0FSLE9BQUcsQ0FBQ0UsYUFBSixDQUFrQk8sU0FBbEIsQ0FBNEJFLEdBQTVCLENBQWdDLHdCQUFoQztBQUNILEdBVEQ7O0FBV0EsTUFBSUMsT0FBTyxHQUFHLFNBQVZBLE9BQVUsQ0FBU1osR0FBVCxFQUFjO0FBQ3hCYSxVQUFNLENBQUNDLFFBQVAsR0FBa0IsS0FBS0MsT0FBTCxDQUFhQyxHQUEvQjtBQUNILEdBRkQ7O0FBSUEsTUFBSUMsU0FBUyxHQUFHLFNBQVpBLFNBQVksR0FBVztBQUN2QkMsWUFBUSxDQUFDYixnQkFBVCxDQUEwQixpQ0FBMUIsRUFBNkRDLE9BQTdELENBQXFFLFVBQUFDLElBQUk7QUFBQSxhQUNyRUEsSUFBSSxDQUFDWSxnQkFBTCxDQUFzQixPQUF0QixFQUErQnBCLGNBQS9CLENBRHFFO0FBQUEsS0FBekU7QUFHQW1CLFlBQVEsQ0FBQ2IsZ0JBQVQsQ0FBMEIseUJBQTFCLEVBQXFEQyxPQUFyRCxDQUE2RCxVQUFBQyxJQUFJO0FBQUEsYUFDN0RBLElBQUksQ0FBQ1ksZ0JBQUwsQ0FBc0IsT0FBdEIsRUFBK0JQLE9BQS9CLENBRDZEO0FBQUEsS0FBakU7QUFHSCxHQVBEOztBQVNBSyxXQUFTLEdBekJjLENBMkJ2Qjs7QUFDQUcsb0RBQUEsQ0FBUSxrQkFBUixFQUE0QixVQUFTcEIsR0FBVCxFQUFjO0FBQ3RDaUIsYUFBUztBQUNaLEdBRkQ7QUFHSCIsImZpbGUiOiIuL2Fzc2V0cy9qcy91aS9yYWRpb19jYXJkLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGh0bXggZnJvbSAnaHRteC5vcmcnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IHRvZ2dsZVNlbGVjdGVkID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgIGxldCBncm91cCA9IGV2dC5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy5yYWRpby1jYXJkLWdyb3VwJylcbiAgICAgICAgbGV0IGNhcmRzID0gZ3JvdXAucXVlcnlTZWxlY3RvckFsbCgnLmMtcmFkaW8tY2FyZCcpXG4gICAgICAgIGNhcmRzLmZvckVhY2goZnVuY3Rpb24oY2FyZCkge1xuICAgICAgICAgICAgY2FyZC5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCAnZmFsc2UnKTtcbiAgICAgICAgICAgIGNhcmQuY2xhc3NMaXN0LnJlbW92ZSgnYy1yYWRpby1jYXJkLS1zZWxlY3RlZCcpO1xuICAgICAgICB9KVxuICAgICAgICBldnQuY3VycmVudFRhcmdldC5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCAndHJ1ZScpO1xuICAgICAgICBldnQuY3VycmVudFRhcmdldC5jbGFzc0xpc3QuYWRkKCdjLXJhZGlvLWNhcmQtLXNlbGVjdGVkJyk7XG4gICAgfVxuXG4gICAgbGV0IGdvVG9VUkwgPSBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uID0gdGhpcy5kYXRhc2V0LnVybFxuICAgIH1cblxuICAgIGxldCBhZGRFdmVudHMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnJhZGlvLWNhcmQtZ3JvdXAgLmMtcmFkaW8tY2FyZCcpLmZvckVhY2goY2FyZCA9PlxuICAgICAgICAgICAgY2FyZC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRvZ2dsZVNlbGVjdGVkKVxuICAgICAgICApXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jLXJhZGlvLWNhcmRbZGF0YS11cmxdJykuZm9yRWFjaChjYXJkID0+XG4gICAgICAgICAgICBjYXJkLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZ29Ub1VSTClcbiAgICAgICAgKVxuICAgIH1cblxuICAgIGFkZEV2ZW50cygpXG5cbiAgICAvLyBUT0RPIGRvbid0IHVzZSBhZnRlclNldHRsZVxuICAgIGh0bXgub24oXCJodG14OmFmdGVyU2V0dGxlXCIsIGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICBhZGRFdmVudHMoKVxuICAgIH0pO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./assets/js/ui/radio_card.js\n");

/***/ }),

/***/ "./assets/js/ui/sortable.js":
/*!**********************************!*\
  !*** ./assets/js/ui/sortable.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! htmx.org */ \"./node_modules/htmx.org/dist/htmx.min.js\");\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(htmx_org__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var sortablejs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! sortablejs */ \"./node_modules/sortablejs/modular/sortable.esm.js\");\n\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var addEvents = function addEvents(content) {\n    var sortables = content.querySelectorAll(\".sortable\");\n\n    for (var i = 0; i < sortables.length; i++) {\n      var sortable = sortables[i];\n      new sortablejs__WEBPACK_IMPORTED_MODULE_1__.default(sortable, {\n        handle: \".sortable-handle\",\n        animation: 150,\n        revertOnSpill: true\n      });\n    }\n  };\n\n  htmx_org__WEBPACK_IMPORTED_MODULE_0___default().onLoad(function (content) {\n    addEvents(content);\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvdWkvc29ydGFibGUuanM/NjlmNyJdLCJuYW1lcyI6WyJhZGRFdmVudHMiLCJjb250ZW50Iiwic29ydGFibGVzIiwicXVlcnlTZWxlY3RvckFsbCIsImkiLCJsZW5ndGgiLCJzb3J0YWJsZSIsIlNvcnRhYmxlIiwiaGFuZGxlIiwiYW5pbWF0aW9uIiwicmV2ZXJ0T25TcGlsbCIsImh0bXgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBRUEsNkJBQWUsc0NBQVk7QUFDdkIsTUFBTUEsU0FBUyxHQUFHLFNBQVpBLFNBQVksQ0FBQ0MsT0FBRCxFQUFhO0FBQzNCLFFBQUlDLFNBQVMsR0FBR0QsT0FBTyxDQUFDRSxnQkFBUixDQUF5QixXQUF6QixDQUFoQjs7QUFDQSxTQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdGLFNBQVMsQ0FBQ0csTUFBOUIsRUFBc0NELENBQUMsRUFBdkMsRUFBMkM7QUFDdkMsVUFBSUUsUUFBUSxHQUFHSixTQUFTLENBQUNFLENBQUQsQ0FBeEI7QUFDQSxVQUFJRywrQ0FBSixDQUFhRCxRQUFiLEVBQXVCO0FBQ25CRSxjQUFNLEVBQUUsa0JBRFc7QUFFbkJDLGlCQUFTLEVBQUUsR0FGUTtBQUduQkMscUJBQWEsRUFBRTtBQUhJLE9BQXZCO0FBS0g7QUFDSixHQVZEOztBQVlBQyx3REFBQSxDQUFZLFVBQVNWLE9BQVQsRUFBa0I7QUFDMUJELGFBQVMsQ0FBQ0MsT0FBRCxDQUFUO0FBQ0gsR0FGRDtBQUdIIiwiZmlsZSI6Ii4vYXNzZXRzL2pzL3VpL3NvcnRhYmxlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGh0bXggZnJvbSAnaHRteC5vcmcnO1xuaW1wb3J0IFNvcnRhYmxlIGZyb20gJ3NvcnRhYmxlanMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgYWRkRXZlbnRzID0gKGNvbnRlbnQpID0+IHtcbiAgICAgICAgdmFyIHNvcnRhYmxlcyA9IGNvbnRlbnQucXVlcnlTZWxlY3RvckFsbChcIi5zb3J0YWJsZVwiKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzb3J0YWJsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBzb3J0YWJsZSA9IHNvcnRhYmxlc1tpXTtcbiAgICAgICAgICAgIG5ldyBTb3J0YWJsZShzb3J0YWJsZSwge1xuICAgICAgICAgICAgICAgIGhhbmRsZTogXCIuc29ydGFibGUtaGFuZGxlXCIsXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uOiAxNTAsXG4gICAgICAgICAgICAgICAgcmV2ZXJ0T25TcGlsbDogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBodG14Lm9uTG9hZChmdW5jdGlvbihjb250ZW50KSB7XG4gICAgICAgIGFkZEV2ZW50cyhjb250ZW50KVxuICAgIH0pXG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./assets/js/ui/sortable.js\n");

/***/ }),

/***/ "./assets/js/ui/tabs.js":
/*!******************************!*\
  !*** ./assets/js/ui/tabs.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var tabs = document.querySelectorAll(\".bc-toolbar ul a\"); // Set the anchor in the browser nav to the active tab.\n\n  Array.from(tabs).forEach(function (link) {\n    link.addEventListener('show.bs.tab', function (evt) {\n      window.location.hash = evt.target.hash;\n    });\n  }); // Read the hash from browser nav and show the active tab.\n\n  var hash = location.hash.replace(/^#/, \"\");\n\n  if (hash) {\n    var activeTab = document.querySelector('a[href=\"#' + hash + '\"]');\n    activeTab.Tab.show();\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvdWkvdGFicy5qcz8yZDRmIl0sIm5hbWVzIjpbInRhYnMiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJBcnJheSIsImZyb20iLCJmb3JFYWNoIiwibGluayIsImFkZEV2ZW50TGlzdGVuZXIiLCJldnQiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhhc2giLCJ0YXJnZXQiLCJyZXBsYWNlIiwiYWN0aXZlVGFiIiwicXVlcnlTZWxlY3RvciIsIlRhYiIsInNob3ciXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSw2QkFBZSxzQ0FBWTtBQUN2QixNQUFJQSxJQUFJLEdBQUdDLFFBQVEsQ0FBQ0MsZ0JBQVQsQ0FBMEIsa0JBQTFCLENBQVgsQ0FEdUIsQ0FHdkI7O0FBQ0FDLE9BQUssQ0FBQ0MsSUFBTixDQUFXSixJQUFYLEVBQWlCSyxPQUFqQixDQUF5QixVQUFVQyxJQUFWLEVBQWdCO0FBQ3JDQSxRQUFJLENBQUNDLGdCQUFMLENBQXNCLGFBQXRCLEVBQXFDLFVBQVVDLEdBQVYsRUFBZTtBQUNoREMsWUFBTSxDQUFDQyxRQUFQLENBQWdCQyxJQUFoQixHQUF1QkgsR0FBRyxDQUFDSSxNQUFKLENBQVdELElBQWxDO0FBQ0gsS0FGRDtBQUdILEdBSkQsRUFKdUIsQ0FVdkI7O0FBQ0EsTUFBSUEsSUFBSSxHQUFHRCxRQUFRLENBQUNDLElBQVQsQ0FBY0UsT0FBZCxDQUFzQixJQUF0QixFQUE0QixFQUE1QixDQUFYOztBQUNBLE1BQUlGLElBQUosRUFBVTtBQUNOLFFBQUlHLFNBQVMsR0FBSWIsUUFBUSxDQUFDYyxhQUFULENBQXVCLGNBQWNKLElBQWQsR0FBcUIsSUFBNUMsQ0FBakI7QUFDQUcsYUFBUyxDQUFDRSxHQUFWLENBQWNDLElBQWQ7QUFDSDtBQUNKIiwiZmlsZSI6Ii4vYXNzZXRzL2pzL3VpL3RhYnMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IHRhYnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmJjLXRvb2xiYXIgdWwgYVwiKVxuXG4gICAgLy8gU2V0IHRoZSBhbmNob3IgaW4gdGhlIGJyb3dzZXIgbmF2IHRvIHRoZSBhY3RpdmUgdGFiLlxuICAgIEFycmF5LmZyb20odGFicykuZm9yRWFjaChmdW5jdGlvbiAobGluaykge1xuICAgICAgICBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ3Nob3cuYnMudGFiJywgZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBldnQudGFyZ2V0Lmhhc2g7XG4gICAgICAgIH0pXG4gICAgfSlcblxuICAgIC8vIFJlYWQgdGhlIGhhc2ggZnJvbSBicm93c2VyIG5hdiBhbmQgc2hvdyB0aGUgYWN0aXZlIHRhYi5cbiAgICBsZXQgaGFzaCA9IGxvY2F0aW9uLmhhc2gucmVwbGFjZSgvXiMvLCBcIlwiKVxuICAgIGlmIChoYXNoKSB7XG4gICAgICAgIGxldCBhY3RpdmVUYWIgPSAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYVtocmVmPVwiIycgKyBoYXNoICsgJ1wiXScpO1xuICAgICAgICBhY3RpdmVUYWIuVGFiLnNob3coKTtcbiAgICB9XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./assets/js/ui/tabs.js\n");

/***/ }),

/***/ "./assets/js/ui/toast.js":
/*!*******************************!*\
  !*** ./assets/js/ui/toast.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! htmx.org */ \"./node_modules/htmx.org/dist/htmx.min.js\");\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(htmx_org__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var addEvents = function addEvents(rootEl) {\n    rootEl.querySelectorAll('.bc-toast .toast-dismiss').forEach(function (btn) {\n      btn.addEventListener('click', function () {\n        btn.closest('.bc-toast').remove();\n      });\n    });\n    rootEl.querySelectorAll('.bc-toast[data-dismiss-after]').forEach(function (toast) {\n      var t = parseInt(toast.dataset.dismissAfter, 10);\n      setTimeout(function () {\n        toast.remove();\n      }, t);\n    });\n  };\n\n  htmx_org__WEBPACK_IMPORTED_MODULE_0___default().onLoad(addEvents);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvdWkvdG9hc3QuanM/MDY0YiJdLCJuYW1lcyI6WyJhZGRFdmVudHMiLCJyb290RWwiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsImJ0biIsImFkZEV2ZW50TGlzdGVuZXIiLCJjbG9zZXN0IiwicmVtb3ZlIiwidG9hc3QiLCJ0IiwicGFyc2VJbnQiLCJkYXRhc2V0IiwiZGlzbWlzc0FmdGVyIiwic2V0VGltZW91dCIsImh0bXgiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBRUEsNkJBQWUsc0NBQVk7QUFDdkIsTUFBSUEsU0FBUyxHQUFHLFNBQVpBLFNBQVksQ0FBU0MsTUFBVCxFQUFpQjtBQUM3QkEsVUFBTSxDQUFDQyxnQkFBUCxDQUF3QiwwQkFBeEIsRUFBb0RDLE9BQXBELENBQTRELFVBQVNDLEdBQVQsRUFBYztBQUN0RUEsU0FBRyxDQUFDQyxnQkFBSixDQUFxQixPQUFyQixFQUE4QixZQUFNO0FBQUNELFdBQUcsQ0FBQ0UsT0FBSixDQUFZLFdBQVosRUFBeUJDLE1BQXpCO0FBQWtDLE9BQXZFO0FBQ0gsS0FGRDtBQUdBTixVQUFNLENBQUNDLGdCQUFQLENBQXdCLCtCQUF4QixFQUF5REMsT0FBekQsQ0FBaUUsVUFBU0ssS0FBVCxFQUFnQjtBQUM3RSxVQUFNQyxDQUFDLEdBQUdDLFFBQVEsQ0FBQ0YsS0FBSyxDQUFDRyxPQUFOLENBQWNDLFlBQWYsRUFBNkIsRUFBN0IsQ0FBbEI7QUFDQUMsZ0JBQVUsQ0FBQyxZQUFNO0FBQUNMLGFBQUssQ0FBQ0QsTUFBTjtBQUFlLE9BQXZCLEVBQXlCRSxDQUF6QixDQUFWO0FBQ0gsS0FIRDtBQUlILEdBUkQ7O0FBVUFLLHdEQUFBLENBQVlkLFNBQVo7QUFDSCIsImZpbGUiOiIuL2Fzc2V0cy9qcy91aS90b2FzdC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBodG14IGZyb20gJ2h0bXgub3JnJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCkge1xuICAgIGxldCBhZGRFdmVudHMgPSBmdW5jdGlvbihyb290RWwpIHtcbiAgICAgICAgcm9vdEVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5iYy10b2FzdCAudG9hc3QtZGlzbWlzcycpLmZvckVhY2goZnVuY3Rpb24oYnRuKSB7XG4gICAgICAgICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7YnRuLmNsb3Nlc3QoJy5iYy10b2FzdCcpLnJlbW92ZSgpfSlcbiAgICAgICAgfSlcbiAgICAgICAgcm9vdEVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5iYy10b2FzdFtkYXRhLWRpc21pc3MtYWZ0ZXJdJykuZm9yRWFjaChmdW5jdGlvbih0b2FzdCkge1xuICAgICAgICAgICAgY29uc3QgdCA9IHBhcnNlSW50KHRvYXN0LmRhdGFzZXQuZGlzbWlzc0FmdGVyLCAxMClcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge3RvYXN0LnJlbW92ZSgpfSwgdClcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBodG14Lm9uTG9hZChhZGRFdmVudHMpXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./assets/js/ui/toast.js\n");

/***/ }),

/***/ "./node_modules/bootstrap.native/dist/bootstrap-native-v4.js":
/*!*******************************************************************!*\
  !*** ./node_modules/bootstrap.native/dist/bootstrap-native-v4.js ***!
  \*******************************************************************/
/***/ (function(module) {

eval("/*!\n  * Native JavaScript for Bootstrap v4.0.6 (https://thednp.github.io/bootstrap.native/)\n  * Copyright 2015-2021 © dnp_theme\n  * Licensed under MIT (https://github.com/thednp/bootstrap.native/blob/master/LICENSE)\n  */\n(function (global, factory) {\n   true ? module.exports = factory() :\n  0;\n}(this, (function () { 'use strict';\n\n  var transitionEndEvent = 'webkitTransition' in document.head.style ? 'webkitTransitionEnd' : 'transitionend';\n\n  var supportTransition = 'webkitTransition' in document.head.style || 'transition' in document.head.style;\n\n  var transitionDuration = 'webkitTransition' in document.head.style ? 'webkitTransitionDuration' : 'transitionDuration';\n\n  var transitionProperty = 'webkitTransition' in document.head.style ? 'webkitTransitionProperty' : 'transitionProperty';\n\n  function getElementTransitionDuration(element) {\n    var computedStyle = getComputedStyle(element);\n    var propertyValue = computedStyle[transitionProperty];\n    var durationValue = computedStyle[transitionDuration];\n    var durationScale = durationValue.includes('ms') ? 1 : 1000;\n    var duration = supportTransition && propertyValue && propertyValue !== 'none'\n      ? parseFloat(durationValue) * durationScale : 0;\n\n    return !Number.isNaN(duration) ? duration : 0;\n  }\n\n  function emulateTransitionEnd(element, handler) {\n    var called = 0;\n    var endEvent = new Event(transitionEndEvent);\n    var duration = getElementTransitionDuration(element);\n\n    if (duration) {\n      element.addEventListener(transitionEndEvent, function transitionEndWrapper(e) {\n        if (e.target === element) {\n          handler.apply(element, [e]);\n          element.removeEventListener(transitionEndEvent, transitionEndWrapper);\n          called = 1;\n        }\n      });\n      setTimeout(function () {\n        if (!called) { element.dispatchEvent(endEvent); }\n      }, duration + 17);\n    } else {\n      handler.apply(element, [endEvent]);\n    }\n  }\n\n  function queryElement(selector, parent) {\n    var lookUp = parent && parent instanceof Element ? parent : document;\n    return selector instanceof Element ? selector : lookUp.querySelector(selector);\n  }\n\n  function bootstrapCustomEvent(eventType, componentName, eventProperties) {\n    var OriginalCustomEvent = new CustomEvent((eventType + \".bs.\" + componentName), { cancelable: true });\n\n    if (typeof eventProperties !== 'undefined') {\n      Object.keys(eventProperties).forEach(function (key) {\n        Object.defineProperty(OriginalCustomEvent, key, {\n          value: eventProperties[key],\n        });\n      });\n    }\n    return OriginalCustomEvent;\n  }\n\n  function dispatchCustomEvent(customEvent) {\n    if (this) { this.dispatchEvent(customEvent); }\n  }\n\n  /* Native JavaScript for Bootstrap 4 | Alert\n  -------------------------------------------- */\n\n  // ALERT DEFINITION\n  // ================\n\n  function Alert(elem) {\n    var element;\n\n    // bind\n    var self = this;\n\n    // the target alert\n    var alert;\n\n    // custom events\n    var closeCustomEvent = bootstrapCustomEvent('close', 'alert');\n    var closedCustomEvent = bootstrapCustomEvent('closed', 'alert');\n\n    // private methods\n    function triggerHandler() {\n      if (alert.classList.contains('fade')) { emulateTransitionEnd(alert, transitionEndHandler); }\n      else { transitionEndHandler(); }\n    }\n    function toggleEvents(add) {\n      var action = add ? 'addEventListener' : 'removeEventListener';\n      element[action]('click', clickHandler, false);\n    }\n\n    // event handlers\n    function clickHandler(e) {\n      alert = e && e.target.closest('.alert');\n      element = queryElement('[data-dismiss=\"alert\"]', alert);\n      if (element && alert && (element === e.target || element.contains(e.target))) { self.close(); }\n    }\n    function transitionEndHandler() {\n      toggleEvents();\n      alert.parentNode.removeChild(alert);\n      dispatchCustomEvent.call(alert, closedCustomEvent);\n    }\n\n    // PUBLIC METHODS\n    self.close = function () {\n      if (alert && element && alert.classList.contains('show')) {\n        dispatchCustomEvent.call(alert, closeCustomEvent);\n        if (closeCustomEvent.defaultPrevented) { return; }\n        self.dispose();\n        alert.classList.remove('show');\n        triggerHandler();\n      }\n    };\n\n    self.dispose = function () {\n      toggleEvents();\n      delete element.Alert;\n    };\n\n    // INIT\n    // initialization element\n    element = queryElement(elem);\n\n    // find the target alert\n    alert = element.closest('.alert');\n\n    // reset on re-init\n    if (element.Alert) { element.Alert.dispose(); }\n\n    // prevent adding event handlers twice\n    if (!element.Alert) { toggleEvents(1); }\n\n    // store init object within target element\n    self.element = element;\n    element.Alert = self;\n  }\n\n  /* Native JavaScript for Bootstrap 4 | Button\n  ---------------------------------------------*/\n\n  // BUTTON DEFINITION\n  // =================\n\n  function Button(elem) {\n    var element;\n\n    // bind and labels\n    var self = this;\n    var labels;\n\n    // changeEvent\n    var changeCustomEvent = bootstrapCustomEvent('change', 'button');\n\n    // private methods\n    function toggle(e) {\n      var eTarget = e.target;\n      var parentLabel = eTarget.closest('LABEL'); // the .btn label\n      var label = null;\n\n      if (eTarget.tagName === 'LABEL') {\n        label = eTarget;\n      } else if (parentLabel) {\n        label = parentLabel;\n      }\n\n      // current input\n      var input = label && label.getElementsByTagName('INPUT')[0];\n\n      // invalidate if no input\n      if (!input) { return; }\n\n      dispatchCustomEvent.call(input, changeCustomEvent); // trigger the change for the input\n      dispatchCustomEvent.call(element, changeCustomEvent); // trigger the change for the btn-group\n\n      // manage the dom manipulation\n      if (input.type === 'checkbox') { // checkboxes\n        if (changeCustomEvent.defaultPrevented) { return; } // discontinue when defaultPrevented is true\n\n        if (!input.checked) {\n          label.classList.add('active');\n          input.getAttribute('checked');\n          input.setAttribute('checked', 'checked');\n          input.checked = true;\n        } else {\n          label.classList.remove('active');\n          input.getAttribute('checked');\n          input.removeAttribute('checked');\n          input.checked = false;\n        }\n\n        if (!element.toggled) { // prevent triggering the event twice\n          element.toggled = true;\n        }\n      }\n\n      if (input.type === 'radio' && !element.toggled) { // radio buttons\n        if (changeCustomEvent.defaultPrevented) { return; }\n        // don't trigger if already active\n        // (the OR condition is a hack to check if the buttons were selected\n        // with key press and NOT mouse click)\n        if (!input.checked || (e.screenX === 0 && e.screenY === 0)) {\n          label.classList.add('active');\n          label.classList.add('focus');\n          input.setAttribute('checked', 'checked');\n          input.checked = true;\n\n          element.toggled = true;\n          Array.from(labels).forEach(function (otherLabel) {\n            var otherInput = otherLabel.getElementsByTagName('INPUT')[0];\n            if (otherLabel !== label && otherLabel.classList.contains('active')) {\n              dispatchCustomEvent.call(otherInput, changeCustomEvent); // trigger the change\n              otherLabel.classList.remove('active');\n              otherInput.removeAttribute('checked');\n              otherInput.checked = false;\n            }\n          });\n        }\n      }\n      setTimeout(function () { element.toggled = false; }, 50);\n    }\n\n    // handlers\n    function keyHandler(e) {\n      var key = e.which || e.keyCode;\n      if (key === 32 && e.target === document.activeElement) { toggle(e); }\n    }\n    function preventScroll(e) {\n      var key = e.which || e.keyCode;\n      if (key === 32) { e.preventDefault(); }\n    }\n    function focusToggle(e) {\n      if (e.target.tagName === 'INPUT') {\n        var action = e.type === 'focusin' ? 'add' : 'remove';\n        e.target.closest('.btn').classList[action]('focus');\n      }\n    }\n    function toggleEvents(add) {\n      var action = add ? 'addEventListener' : 'removeEventListener';\n      element[action]('click', toggle, false);\n      element[action]('keyup', keyHandler, false);\n      element[action]('keydown', preventScroll, false);\n      element[action]('focusin', focusToggle, false);\n      element[action]('focusout', focusToggle, false);\n    }\n\n    // public method\n    self.dispose = function () {\n      toggleEvents();\n      delete element.Button;\n    };\n\n    // init\n    // initialization element\n    element = queryElement(elem);\n\n    // reset on re-init\n    if (element.Button) { element.Button.dispose(); }\n\n    labels = element.getElementsByClassName('btn');\n\n    // invalidate\n    if (!labels.length) { return; }\n\n    // prevent adding event handlers twice\n    if (!element.Button) { toggleEvents(1); }\n\n    // set initial toggled state\n    // toggled makes sure to prevent triggering twice the change.bs.button events\n    element.toggled = false;\n\n    // associate target with init object\n    element.Button = self;\n\n    // activate items on load\n    Array.from(labels).forEach(function (btn) {\n      var hasChecked = queryElement('input:checked', btn);\n      if (!btn.classList.contains('active') && hasChecked) {\n        btn.classList.add('active');\n      }\n      if (btn.classList.contains('active') && !hasChecked) {\n        btn.classList.remove('active');\n      }\n    });\n  }\n\n  var mouseHoverEvents = ('onmouseleave' in document) ? ['mouseenter', 'mouseleave'] : ['mouseover', 'mouseout'];\n\n  var addEventListener = 'addEventListener';\n\n  var removeEventListener = 'removeEventListener';\n\n  var supportPassive = (function () {\n    var result = false;\n    try {\n      var opts = Object.defineProperty({}, 'passive', {\n        get: function get() {\n          result = true;\n          return result;\n        },\n      });\n      document[addEventListener]('DOMContentLoaded', function wrap() {\n        document[removeEventListener]('DOMContentLoaded', wrap, opts);\n      }, opts);\n    } catch (e) {\n      throw Error('Passive events are not supported');\n    }\n\n    return result;\n  })();\n\n  // general event options\n\n  var passiveHandler = supportPassive ? { passive: true } : false;\n\n  function isElementInScrollRange(element) {\n    var bcr = element.getBoundingClientRect();\n    var viewportHeight = window.innerHeight || document.documentElement.clientHeight;\n    return bcr.top <= viewportHeight && bcr.bottom >= 0; // bottom && top\n  }\n\n  function reflow(element) {\n    return element.offsetHeight;\n  }\n\n  /* Native JavaScript for Bootstrap 4 | Carousel\n  ----------------------------------------------- */\n\n  // CAROUSEL DEFINITION\n  // ===================\n\n  function Carousel(elem, opsInput) {\n    var assign, assign$1, assign$2;\n\n    var element;\n\n    // set options\n    var options = opsInput || {};\n\n    // bind\n    var self = this;\n\n    // internal variables\n    var vars;\n    var ops;\n\n    // custom events\n    var slideCustomEvent;\n    var slidCustomEvent;\n\n    // carousel elements\n    var slides;\n    var leftArrow;\n    var rightArrow;\n    var indicator;\n    var indicators;\n\n    // handlers\n    function pauseHandler() {\n      if (ops.interval !== false && !element.classList.contains('paused')) {\n        element.classList.add('paused');\n        if (!vars.isSliding) {\n          clearInterval(vars.timer);\n          vars.timer = null;\n        }\n      }\n    }\n    function resumeHandler() {\n      if (ops.interval !== false && element.classList.contains('paused')) {\n        element.classList.remove('paused');\n        if (!vars.isSliding) {\n          clearInterval(vars.timer);\n          vars.timer = null;\n          self.cycle();\n        }\n      }\n    }\n    function indicatorHandler(e) {\n      e.preventDefault();\n      if (vars.isSliding) { return; }\n\n      var eventTarget = e.target; // event target | the current active item\n\n      if (eventTarget && !eventTarget.classList.contains('active') && eventTarget.getAttribute('data-slide-to')) {\n        vars.index = +(eventTarget.getAttribute('data-slide-to'));\n      } else { return; }\n\n      self.slideTo(vars.index); // Do the slide\n    }\n    function controlsHandler(e) {\n      e.preventDefault();\n      if (vars.isSliding) { return; }\n\n      var eventTarget = e.currentTarget || e.srcElement;\n\n      if (eventTarget === rightArrow) {\n        vars.index += 1;\n      } else if (eventTarget === leftArrow) {\n        vars.index -= 1;\n      }\n\n      self.slideTo(vars.index); // Do the slide\n    }\n    function keyHandler(ref) {\n      var which = ref.which;\n\n      if (vars.isSliding) { return; }\n      switch (which) {\n        case 39:\n          vars.index += 1;\n          break;\n        case 37:\n          vars.index -= 1;\n          break;\n        default: return;\n      }\n      self.slideTo(vars.index); // Do the slide\n    }\n    function toggleEvents(add) {\n      var action = add ? 'addEventListener' : 'removeEventListener';\n      if (ops.pause && ops.interval) {\n        element[action](mouseHoverEvents[0], pauseHandler, false);\n        element[action](mouseHoverEvents[1], resumeHandler, false);\n        element[action]('touchstart', pauseHandler, passiveHandler);\n        element[action]('touchend', resumeHandler, passiveHandler);\n      }\n\n      if (ops.touch && slides.length > 1) { element[action]('touchstart', touchDownHandler, passiveHandler); }\n\n      if (rightArrow) { rightArrow[action]('click', controlsHandler, false); }\n      if (leftArrow) { leftArrow[action]('click', controlsHandler, false); }\n\n      if (indicator) { indicator[action]('click', indicatorHandler, false); }\n      if (ops.keyboard) { window[action]('keydown', keyHandler, false); }\n    }\n    // touch events\n    function toggleTouchEvents(add) {\n      var action = add ? 'addEventListener' : 'removeEventListener';\n      element[action]('touchmove', touchMoveHandler, passiveHandler);\n      element[action]('touchend', touchEndHandler, passiveHandler);\n    }\n    function touchDownHandler(e) {\n      if (vars.isTouch) { return; }\n\n      vars.touchPosition.startX = e.changedTouches[0].pageX;\n\n      if (element.contains(e.target)) {\n        vars.isTouch = true;\n        toggleTouchEvents(1);\n      }\n    }\n    function touchMoveHandler(e) {\n      if (!vars.isTouch) { e.preventDefault(); return; }\n\n      vars.touchPosition.currentX = e.changedTouches[0].pageX;\n\n      // cancel touch if more than one changedTouches detected\n      if (e.type === 'touchmove' && e.changedTouches.length > 1) {\n        e.preventDefault();\n      }\n    }\n    function touchEndHandler(e) {\n      if (!vars.isTouch || vars.isSliding) { return; }\n\n      vars.touchPosition.endX = vars.touchPosition.currentX || e.changedTouches[0].pageX;\n\n      if (vars.isTouch) {\n        if ((!element.contains(e.target) || !element.contains(e.relatedTarget))\n            && Math.abs(vars.touchPosition.startX - vars.touchPosition.endX) < 75) {\n          return;\n        }\n        if (vars.touchPosition.currentX < vars.touchPosition.startX) {\n          vars.index += 1;\n        } else if (vars.touchPosition.currentX > vars.touchPosition.startX) {\n          vars.index -= 1;\n        }\n        vars.isTouch = false;\n        self.slideTo(vars.index);\n\n        toggleTouchEvents(); // remove\n      }\n    }\n    // private methods\n    function setActivePage(pageIndex) { // indicators\n      Array.from(indicators).forEach(function (x) { return x.classList.remove('active'); });\n      if (indicators[pageIndex]) { indicators[pageIndex].classList.add('active'); }\n    }\n    function transitionEndHandler(e) {\n      if (vars.touchPosition) {\n        var next = vars.index;\n        var timeout = e && e.target !== slides[next] ? e.elapsedTime * 1000 + 100 : 20;\n        var activeItem = self.getActiveIndex();\n        var orientation = vars.direction === 'left' ? 'next' : 'prev';\n\n        if (vars.isSliding) {\n          setTimeout(function () {\n            if (vars.touchPosition) {\n              vars.isSliding = false;\n\n              slides[next].classList.add('active');\n              slides[activeItem].classList.remove('active');\n\n              slides[next].classList.remove((\"carousel-item-\" + orientation));\n              slides[next].classList.remove((\"carousel-item-\" + (vars.direction)));\n              slides[activeItem].classList.remove((\"carousel-item-\" + (vars.direction)));\n\n              dispatchCustomEvent.call(element, slidCustomEvent);\n              // check for element, might have been disposed\n              if (!document.hidden && ops.interval && !element.classList.contains('paused')) {\n                self.cycle();\n              }\n            }\n          }, timeout);\n        }\n      }\n    }\n\n    // public methods\n    self.cycle = function () {\n      if (vars.timer) {\n        clearInterval(vars.timer);\n        vars.timer = null;\n      }\n\n      vars.timer = setInterval(function () {\n        var idx = vars.index || self.getActiveIndex();\n        if (isElementInScrollRange(element)) {\n          idx += 1;\n          self.slideTo(idx);\n        }\n      }, ops.interval);\n    };\n    self.slideTo = function (idx) {\n      if (vars.isSliding) { return; } // when controled via methods, make sure to check again\n\n      // the current active, orientation, event eventProperties\n      var activeItem = self.getActiveIndex();\n      var next = idx;\n\n      // first return if we're on the same item #227\n      if (activeItem === next) {\n        return;\n      // or determine slide direction\n      } if ((activeItem < next) || (activeItem === 0 && next === slides.length - 1)) {\n        vars.direction = 'left'; // next\n      } else if ((activeItem > next) || (activeItem === slides.length - 1 && next === 0)) {\n        vars.direction = 'right'; // prev\n      }\n\n      // find the right next index\n      if (next < 0) { next = slides.length - 1; }\n      else if (next >= slides.length) { next = 0; }\n\n      var orientation = vars.direction === 'left' ? 'next' : 'prev'; // determine type\n\n      var eventProperties = {\n        relatedTarget: slides[next], direction: vars.direction, from: activeItem, to: next,\n      };\n      slideCustomEvent = bootstrapCustomEvent('slide', 'carousel', eventProperties);\n      slidCustomEvent = bootstrapCustomEvent('slid', 'carousel', eventProperties);\n      dispatchCustomEvent.call(element, slideCustomEvent); // here we go with the slide\n      if (slideCustomEvent.defaultPrevented) { return; } // discontinue when prevented\n\n      // update index\n      vars.index = next;\n\n      vars.isSliding = true;\n      clearInterval(vars.timer);\n      vars.timer = null;\n      setActivePage(next);\n\n      if (getElementTransitionDuration(slides[next]) && element.classList.contains('slide')) {\n        slides[next].classList.add((\"carousel-item-\" + orientation));\n        reflow(slides[next]);\n        slides[next].classList.add((\"carousel-item-\" + (vars.direction)));\n        slides[activeItem].classList.add((\"carousel-item-\" + (vars.direction)));\n\n        emulateTransitionEnd(slides[next], transitionEndHandler);\n      } else {\n        slides[next].classList.add('active');\n        reflow(slides[next]);\n        slides[activeItem].classList.remove('active');\n        setTimeout(function () {\n          vars.isSliding = false;\n          // check for element, might have been disposed\n          if (ops.interval && element && !element.classList.contains('paused')) {\n            self.cycle();\n          }\n          dispatchCustomEvent.call(element, slidCustomEvent);\n        }, 100);\n      }\n    };\n\n    self.getActiveIndex = function () { return Array.from(slides).indexOf(element.getElementsByClassName('carousel-item active')[0]) || 0; };\n\n    self.dispose = function () {\n      var itemClasses = ['left', 'right', 'prev', 'next'];\n\n      Array.from(slides).forEach(function (slide, idx) {\n        if (slide.classList.contains('active')) { setActivePage(idx); }\n        itemClasses.forEach(function (cls) { return slide.classList.remove((\"carousel-item-\" + cls)); });\n      });\n      clearInterval(vars.timer);\n\n      toggleEvents();\n      vars = {};\n      ops = {};\n      delete element.Carousel;\n    };\n\n    // init\n\n    // initialization element\n    element = queryElement(elem);\n\n    // reset on re-init\n    if (element.Carousel) { element.Carousel.dispose(); }\n\n    // carousel elements\n    slides = element.getElementsByClassName('carousel-item');\n    (assign = element.getElementsByClassName('carousel-control-prev'), leftArrow = assign[0]);\n    (assign$1 = element.getElementsByClassName('carousel-control-next'), rightArrow = assign$1[0]);\n    (assign$2 = element.getElementsByClassName('carousel-indicators'), indicator = assign$2[0]);\n    indicators = (indicator && indicator.getElementsByTagName('LI')) || [];\n\n    // invalidate when not enough items\n    if (slides.length < 2) { return; }\n\n    // check options\n    // DATA API\n    var intervalAttribute = element.getAttribute('data-interval');\n    var intervalData = intervalAttribute === 'false' ? 0 : +(intervalAttribute);\n    var touchData = element.getAttribute('data-touch') === 'false' ? 0 : 1;\n    var pauseData = element.getAttribute('data-pause') === 'hover' || false;\n    var keyboardData = element.getAttribute('data-keyboard') === 'true' || false;\n\n    // JS options\n    var intervalOption = options.interval;\n    var touchOption = options.touch;\n\n    // set instance options\n    ops = {};\n    ops.keyboard = options.keyboard === true || keyboardData;\n    ops.pause = (options.pause === 'hover' || pauseData) ? 'hover' : false; // false / hover\n    ops.touch = touchOption || touchData;\n\n    ops.interval = 5000; // bootstrap carousel default interval\n\n    if (typeof intervalOption === 'number') { ops.interval = intervalOption; }\n    else if (intervalOption === false || intervalData === 0 || intervalData === false) {\n      ops.interval = 0;\n    } else if (!Number.isNaN(intervalData)) { ops.interval = intervalData; }\n\n    // set first slide active if none\n    if (self.getActiveIndex() < 0) {\n      if (slides.length) { slides[0].classList.add('active'); }\n      if (indicators.length) { setActivePage(0); }\n    }\n\n    // set initial state\n    vars = {};\n    vars.direction = 'left';\n    vars.index = 0;\n    vars.timer = null;\n    vars.isSliding = false;\n    vars.isTouch = false;\n    vars.touchPosition = {\n      startX: 0,\n      currentX: 0,\n      endX: 0,\n    };\n\n    // attach event handlers\n    toggleEvents(1);\n\n    // start to cycle if interval is set\n    if (ops.interval) { self.cycle(); }\n\n    // associate init object to target\n    element.Carousel = self;\n  }\n\n  /* Native JavaScript for Bootstrap 4 | Collapse\n  ----------------------------------------------- */\n\n  // COLLAPSE DEFINITION\n  // ===================\n\n  function Collapse(elem, opsInput) {\n    var element;\n    // set options\n    var options = opsInput || {};\n\n    // bind\n    var self = this;\n\n    // target practice\n    var accordion = null;\n    var collapse = null;\n    var activeCollapse;\n    var activeElement;\n    // custom events\n    var showCustomEvent;\n    var shownCustomEvent;\n    var hideCustomEvent;\n    var hiddenCustomEvent;\n\n    // private methods\n    function openAction(collapseElement, toggle) {\n      dispatchCustomEvent.call(collapseElement, showCustomEvent);\n      if (showCustomEvent.defaultPrevented) { return; }\n      collapseElement.isAnimating = true;\n      collapseElement.classList.add('collapsing');\n      collapseElement.classList.remove('collapse');\n      collapseElement.style.height = (collapseElement.scrollHeight) + \"px\";\n\n      emulateTransitionEnd(collapseElement, function () {\n        collapseElement.isAnimating = false;\n        collapseElement.setAttribute('aria-expanded', 'true');\n        toggle.setAttribute('aria-expanded', 'true');\n        collapseElement.classList.remove('collapsing');\n        collapseElement.classList.add('collapse');\n        collapseElement.classList.add('show');\n        collapseElement.style.height = '';\n        dispatchCustomEvent.call(collapseElement, shownCustomEvent);\n      });\n    }\n    function closeAction(collapseElement, toggle) {\n      dispatchCustomEvent.call(collapseElement, hideCustomEvent);\n      if (hideCustomEvent.defaultPrevented) { return; }\n      collapseElement.isAnimating = true;\n      collapseElement.style.height = (collapseElement.scrollHeight) + \"px\"; // set height first\n      collapseElement.classList.remove('collapse');\n      collapseElement.classList.remove('show');\n      collapseElement.classList.add('collapsing');\n      reflow(collapseElement); // force reflow to enable transition\n      collapseElement.style.height = '0px';\n\n      emulateTransitionEnd(collapseElement, function () {\n        collapseElement.isAnimating = false;\n        collapseElement.setAttribute('aria-expanded', 'false');\n        toggle.setAttribute('aria-expanded', 'false');\n        collapseElement.classList.remove('collapsing');\n        collapseElement.classList.add('collapse');\n        collapseElement.style.height = '';\n        dispatchCustomEvent.call(collapseElement, hiddenCustomEvent);\n      });\n    }\n\n    // public methods\n    self.toggle = function (e) {\n      if ((e && e.target.tagName === 'A') || element.tagName === 'A') { e.preventDefault(); }\n      if (element.contains(e.target) || e.target === element) {\n        if (!collapse.classList.contains('show')) { self.show(); }\n        else { self.hide(); }\n      }\n    };\n    self.hide = function () {\n      if (collapse.isAnimating) { return; }\n      closeAction(collapse, element);\n      element.classList.add('collapsed');\n    };\n    self.show = function () {\n      var assign;\n\n      if (accordion) {\n        (assign = accordion.getElementsByClassName('collapse show'), activeCollapse = assign[0]);\n        activeElement = activeCollapse && (queryElement((\"[data-target=\\\"#\" + (activeCollapse.id) + \"\\\"]\"), accordion)\n                      || queryElement((\"[href=\\\"#\" + (activeCollapse.id) + \"\\\"]\"), accordion));\n      }\n\n      if (!collapse.isAnimating) {\n        if (activeElement && activeCollapse !== collapse) {\n          closeAction(activeCollapse, activeElement);\n          activeElement.classList.add('collapsed');\n        }\n        openAction(collapse, element);\n        element.classList.remove('collapsed');\n      }\n    };\n    self.dispose = function () {\n      element.removeEventListener('click', self.toggle, false);\n      delete element.Collapse;\n    };\n\n    // init\n\n    // initialization element\n    element = queryElement(elem);\n\n    // reset on re-init\n    if (element.Collapse) { element.Collapse.dispose(); }\n\n    // DATA API\n    var accordionData = element.getAttribute('data-parent');\n\n    // custom events\n    showCustomEvent = bootstrapCustomEvent('show', 'collapse');\n    shownCustomEvent = bootstrapCustomEvent('shown', 'collapse');\n    hideCustomEvent = bootstrapCustomEvent('hide', 'collapse');\n    hiddenCustomEvent = bootstrapCustomEvent('hidden', 'collapse');\n\n    // determine targets\n    collapse = queryElement(options.target || element.getAttribute('data-target') || element.getAttribute('href'));\n\n    if (collapse !== null) { collapse.isAnimating = false; }\n    var accordionSelector = options.parent || accordionData;\n    if (accordionSelector) {\n      accordion = element.closest(accordionSelector);\n    } else {\n      accordion = null;\n    }\n\n    // prevent adding event handlers twice\n    if (!element.Collapse) {\n      element.addEventListener('click', self.toggle, false);\n    }\n\n    // associate target to init object\n    element.Collapse = self;\n  }\n\n  function setFocus(element) {\n    element.focus();\n  }\n\n  /* Native JavaScript for Bootstrap 4 | Dropdown\n  ----------------------------------------------- */\n\n  // DROPDOWN DEFINITION\n  // ===================\n\n  function Dropdown(elem, option) {\n    var element;\n\n    // bind\n    var self = this;\n\n    // custom events\n    var showCustomEvent;\n    var shownCustomEvent;\n    var hideCustomEvent;\n    var hiddenCustomEvent;\n    // targets\n    var relatedTarget = null;\n    var parent; var menu; var menuItems = [];\n    // option\n    var persist;\n\n    // preventDefault on empty anchor links\n    function preventEmptyAnchor(anchor) {\n      if ((anchor.href && anchor.href.slice(-1) === '#') || (anchor.parentNode && anchor.parentNode.href\n        && anchor.parentNode.href.slice(-1) === '#')) { this.preventDefault(); }\n    }\n    // toggle dismissible events\n    function toggleDismiss() {\n      var action = element.open ? 'addEventListener' : 'removeEventListener';\n      document[action]('click', dismissHandler, false);\n      document[action]('keydown', preventScroll, false);\n      document[action]('keyup', keyHandler, false);\n      document[action]('focus', dismissHandler, false);\n    }\n    // handlers\n    function dismissHandler(e) {\n      var eventTarget = e.target;\n      if (!eventTarget.getAttribute) { return; } // some weird FF bug #409\n      var hasData = ((eventTarget && (eventTarget.getAttribute('data-toggle')))\n                                  || (eventTarget.parentNode && eventTarget.parentNode.getAttribute\n                                  && eventTarget.parentNode.getAttribute('data-toggle')));\n      if (e.type === 'focus' && (eventTarget === element || eventTarget === menu || menu.contains(eventTarget))) {\n        return;\n      }\n      if ((eventTarget === menu || menu.contains(eventTarget)) && (persist || hasData)) { return; }\n\n      relatedTarget = eventTarget === element || element.contains(eventTarget) ? element : null;\n      self.hide();\n\n      preventEmptyAnchor.call(e, eventTarget);\n    }\n    function clickHandler(e) {\n      relatedTarget = element;\n      self.show();\n      preventEmptyAnchor.call(e, e.target);\n    }\n    function preventScroll(e) {\n      var key = e.which || e.keyCode;\n      if (key === 38 || key === 40) { e.preventDefault(); }\n    }\n    function keyHandler(e) {\n      var key = e.which || e.keyCode;\n      var activeItem = document.activeElement;\n      var isSameElement = activeItem === element;\n      var isInsideMenu = menu.contains(activeItem);\n      var isMenuItem = activeItem.parentNode === menu || activeItem.parentNode.parentNode === menu;\n      var idx = menuItems.indexOf(activeItem);\n\n      if (isMenuItem) { // navigate up | down\n        if (isSameElement) {\n          idx = 0;\n        } else if (key === 38) {\n          idx = idx > 1 ? idx - 1 : 0;\n        } else if (key === 40) {\n          idx = idx < menuItems.length - 1 ? idx + 1 : idx;\n        }\n\n        if (menuItems[idx]) { setFocus(menuItems[idx]); }\n      }\n      if (((menuItems.length && isMenuItem) // menu has items\n            || (!menuItems.length && (isInsideMenu || isSameElement)) // menu might be a form\n            || !isInsideMenu) // or the focused element is not in the menu at all\n            && element.open && key === 27 // menu must be open\n      ) {\n        self.toggle();\n        relatedTarget = null;\n      }\n    }\n\n    // public methods\n    self.show = function () {\n      showCustomEvent = bootstrapCustomEvent('show', 'dropdown', { relatedTarget: relatedTarget });\n      dispatchCustomEvent.call(parent, showCustomEvent);\n      if (showCustomEvent.defaultPrevented) { return; }\n\n      menu.classList.add('show');\n      parent.classList.add('show');\n      element.setAttribute('aria-expanded', true);\n      element.open = true;\n      element.removeEventListener('click', clickHandler, false);\n      setTimeout(function () {\n        setFocus(menu.getElementsByTagName('INPUT')[0] || element); // focus the first input item | element\n        toggleDismiss();\n        shownCustomEvent = bootstrapCustomEvent('shown', 'dropdown', { relatedTarget: relatedTarget });\n        dispatchCustomEvent.call(parent, shownCustomEvent);\n      }, 1);\n    };\n    self.hide = function () {\n      hideCustomEvent = bootstrapCustomEvent('hide', 'dropdown', { relatedTarget: relatedTarget });\n      dispatchCustomEvent.call(parent, hideCustomEvent);\n      if (hideCustomEvent.defaultPrevented) { return; }\n\n      menu.classList.remove('show');\n      parent.classList.remove('show');\n      element.setAttribute('aria-expanded', false);\n      element.open = false;\n      toggleDismiss();\n      setFocus(element);\n      setTimeout(function () {\n        // only re-attach handler if the init is not disposed\n        if (element.Dropdown) { element.addEventListener('click', clickHandler, false); }\n      }, 1);\n\n      hiddenCustomEvent = bootstrapCustomEvent('hidden', 'dropdown', { relatedTarget: relatedTarget });\n      dispatchCustomEvent.call(parent, hiddenCustomEvent);\n    };\n    self.toggle = function () {\n      if (parent.classList.contains('show') && element.open) { self.hide(); } else { self.show(); }\n    };\n    self.dispose = function () {\n      if (parent.classList.contains('show') && element.open) { self.hide(); }\n      element.removeEventListener('click', clickHandler, false);\n      delete element.Dropdown;\n    };\n\n    // init\n\n    // initialization element\n    element = queryElement(elem);\n\n    // reset on re-init\n    if (element.Dropdown) { element.Dropdown.dispose(); }\n\n    // set  targets\n    parent = element.parentNode;\n    menu = queryElement('.dropdown-menu', parent);\n\n    Array.from(menu.children).forEach(function (child) {\n      if (child.children.length && child.children[0].tagName === 'A') {\n        menuItems.push(child.children[0]);\n      }\n      if (child.tagName === 'A') { menuItems.push(child); }\n    });\n\n    // prevent adding event handlers twice\n    if (!element.Dropdown) {\n      if (!('tabindex' in menu)) { menu.setAttribute('tabindex', '0'); } // Fix onblur on Chrome | Safari\n      element.addEventListener('click', clickHandler, false);\n    }\n\n    // set option\n    persist = option === true || element.getAttribute('data-persist') === 'true' || false;\n\n    // set initial state to closed\n    element.open = false;\n\n    // associate element with init object\n    element.Dropdown = self;\n  }\n\n  /* Native JavaScript for Bootstrap 4 | Modal\n  -------------------------------------------- */\n\n  // MODAL DEFINITION\n  // ================\n\n  function Modal(elem, opsInput) { // element can be the modal/triggering button\n    var element;\n\n    // set options\n    var options = opsInput || {};\n\n    // bind, modal\n    var self = this;\n    var modal;\n\n    // custom events\n    var showCustomEvent;\n    var shownCustomEvent;\n    var hideCustomEvent;\n    var hiddenCustomEvent;\n    // event targets and other\n    var relatedTarget = null;\n    var scrollBarWidth;\n    var overlay;\n    var overlayDelay;\n\n    // also find fixed-top / fixed-bottom items\n    var fixedItems;\n    var ops = {};\n\n    // private methods\n    function setScrollbar() {\n      var bodyClassList = document.body.classList;\n      var openModal = bodyClassList.contains('modal-open');\n      var bodyPad = parseInt(getComputedStyle(document.body).paddingRight, 10);\n      var docClientHeight = document.documentElement.clientHeight;\n      var docScrollHeight = document.documentElement.scrollHeight;\n      var bodyClientHeight = document.body.clientHeight;\n      var bodyScrollHeight = document.body.scrollHeight;\n      var bodyOverflow = docClientHeight !== docScrollHeight\n                      || bodyClientHeight !== bodyScrollHeight;\n      var modalOverflow = modal.clientHeight !== modal.scrollHeight;\n\n      scrollBarWidth = measureScrollbar();\n\n      modal.style.paddingRight = !modalOverflow && scrollBarWidth ? (scrollBarWidth + \"px\") : '';\n      document.body.style.paddingRight = modalOverflow || bodyOverflow\n        ? ((bodyPad + (openModal ? 0 : scrollBarWidth)) + \"px\") : '';\n\n      if (fixedItems.length) {\n        fixedItems.forEach(function (fixed) {\n          var itemPad = getComputedStyle(fixed).paddingRight;\n          fixed.style.paddingRight = modalOverflow || bodyOverflow\n            ? ((parseInt(itemPad, 10) + (openModal ? 0 : scrollBarWidth)) + \"px\")\n            : ((parseInt(itemPad, 10)) + \"px\");\n        });\n      }\n    }\n    function resetScrollbar() {\n      document.body.style.paddingRight = '';\n      modal.style.paddingRight = '';\n      if (fixedItems.length) {\n        fixedItems.forEach(function (fixed) {\n          fixed.style.paddingRight = '';\n        });\n      }\n    }\n    function measureScrollbar() {\n      var scrollDiv = document.createElement('div');\n      scrollDiv.className = 'modal-scrollbar-measure'; // this is here to stay\n      document.body.appendChild(scrollDiv);\n      var widthValue = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n      document.body.removeChild(scrollDiv);\n      return widthValue;\n    }\n    function createOverlay() {\n      var newOverlay = document.createElement('div');\n      overlay = queryElement('.modal-backdrop');\n\n      if (overlay === null) {\n        newOverlay.setAttribute('class', (\"modal-backdrop\" + (ops.animation ? ' fade' : '')));\n        overlay = newOverlay;\n        document.body.appendChild(overlay);\n      }\n      return overlay;\n    }\n    function removeOverlay() {\n      overlay = queryElement('.modal-backdrop');\n      if (overlay && !document.getElementsByClassName('modal show')[0]) {\n        document.body.removeChild(overlay); overlay = null;\n      }\n      if (overlay === null) {\n        document.body.classList.remove('modal-open');\n        resetScrollbar();\n      }\n    }\n    function toggleEvents(add) {\n      var action = add ? 'addEventListener' : 'removeEventListener';\n      window[action]('resize', self.update, passiveHandler);\n      modal[action]('click', dismissHandler, false);\n      document[action]('keydown', keyHandler, false);\n    }\n    // triggers\n    function beforeShow() {\n      modal.style.display = 'block';\n\n      setScrollbar();\n      if (!document.getElementsByClassName('modal show')[0]) { document.body.classList.add('modal-open'); }\n\n      modal.classList.add('show');\n      modal.setAttribute('aria-hidden', false);\n\n      if (modal.classList.contains('fade')) { emulateTransitionEnd(modal, triggerShow); }\n      else { triggerShow(); }\n    }\n    function triggerShow() {\n      setFocus(modal);\n      modal.isAnimating = false;\n\n      toggleEvents(1);\n\n      shownCustomEvent = bootstrapCustomEvent('shown', 'modal', { relatedTarget: relatedTarget });\n      dispatchCustomEvent.call(modal, shownCustomEvent);\n    }\n    function triggerHide(force) {\n      modal.style.display = '';\n      if (element) { setFocus(element); }\n\n      overlay = queryElement('.modal-backdrop');\n\n      // force can also be the transitionEvent object, we wanna make sure it's not\n      if (force !== 1 && overlay && overlay.classList.contains('show') && !document.getElementsByClassName('modal show')[0]) {\n        overlay.classList.remove('show');\n        emulateTransitionEnd(overlay, removeOverlay);\n      } else {\n        removeOverlay();\n      }\n\n      toggleEvents();\n\n      modal.isAnimating = false;\n\n      hiddenCustomEvent = bootstrapCustomEvent('hidden', 'modal');\n      dispatchCustomEvent.call(modal, hiddenCustomEvent);\n    }\n    // handlers\n    function clickHandler(e) {\n      if (modal.isAnimating) { return; }\n      var clickTarget = e.target;\n      var modalID = \"#\" + (modal.getAttribute('id'));\n      var targetAttrValue = clickTarget.getAttribute('data-target') || clickTarget.getAttribute('href');\n      var elemAttrValue = element.getAttribute('data-target') || element.getAttribute('href');\n\n      if (!modal.classList.contains('show')\n          && ((clickTarget === element && targetAttrValue === modalID)\n          || (element.contains(clickTarget) && elemAttrValue === modalID))) {\n        modal.modalTrigger = element;\n        relatedTarget = element;\n        self.show();\n        e.preventDefault();\n      }\n    }\n    function keyHandler(ref) {\n      var which = ref.which;\n\n      if (!modal.isAnimating && ops.keyboard && which === 27 && modal.classList.contains('show')) {\n        self.hide();\n      }\n    }\n    function dismissHandler(e) {\n      if (modal.isAnimating) { return; }\n      var clickTarget = e.target;\n      var hasData = clickTarget.getAttribute('data-dismiss') === 'modal';\n      var parentWithData = clickTarget.closest('[data-dismiss=\"modal\"]');\n\n      if (modal.classList.contains('show') && (parentWithData || hasData\n          || (clickTarget === modal && ops.backdrop !== 'static'))) {\n        self.hide(); relatedTarget = null;\n        e.preventDefault();\n      }\n    }\n\n    // public methods\n    self.toggle = function () {\n      if (modal.classList.contains('show')) { self.hide(); } else { self.show(); }\n    };\n    self.show = function () {\n      if (modal.classList.contains('show') && !!modal.isAnimating) { return; }\n\n      showCustomEvent = bootstrapCustomEvent('show', 'modal', { relatedTarget: relatedTarget });\n      dispatchCustomEvent.call(modal, showCustomEvent);\n\n      if (showCustomEvent.defaultPrevented) { return; }\n\n      modal.isAnimating = true;\n\n      // we elegantly hide any opened modal\n      var currentOpen = document.getElementsByClassName('modal show')[0];\n      if (currentOpen && currentOpen !== modal) {\n        if (currentOpen.modalTrigger) { currentOpen.modalTrigger.Modal.hide(); }\n        if (currentOpen.Modal) { currentOpen.Modal.hide(); }\n      }\n\n      if (ops.backdrop) { overlay = createOverlay(); }\n\n      if (overlay && !currentOpen && !overlay.classList.contains('show')) {\n        reflow(overlay);\n        overlayDelay = getElementTransitionDuration(overlay);\n        overlay.classList.add('show');\n      }\n\n      if (!currentOpen) { setTimeout(beforeShow, overlay && overlayDelay ? overlayDelay : 0); }\n      else { beforeShow(); }\n    };\n    self.hide = function (force) {\n      if (!modal.classList.contains('show')) { return; }\n\n      hideCustomEvent = bootstrapCustomEvent('hide', 'modal');\n      dispatchCustomEvent.call(modal, hideCustomEvent);\n      if (hideCustomEvent.defaultPrevented) { return; }\n\n      modal.isAnimating = true;\n\n      modal.classList.remove('show');\n      modal.setAttribute('aria-hidden', true);\n\n      if (modal.classList.contains('fade') && force !== 1) { emulateTransitionEnd(modal, triggerHide); }\n      else { triggerHide(); }\n    };\n    self.setContent = function (content) {\n      queryElement('.modal-content', modal).innerHTML = content;\n    };\n    self.update = function () {\n      if (modal.classList.contains('show')) {\n        setScrollbar();\n      }\n    };\n    self.dispose = function () {\n      self.hide(1);\n      if (element) { element.removeEventListener('click', clickHandler, false); delete element.Modal; } else { delete modal.Modal; }\n    };\n\n    // init\n\n    // the modal (both JavaScript / DATA API init) / triggering button element (DATA API)\n    element = queryElement(elem);\n\n    // determine modal, triggering element\n    var checkModal = queryElement(element.getAttribute('data-target') || element.getAttribute('href'));\n    modal = element.classList.contains('modal') ? element : checkModal;\n\n    // set fixed items\n    fixedItems = Array.from(document.getElementsByClassName('fixed-top'))\n      .concat(Array.from(document.getElementsByClassName('fixed-bottom')));\n\n    if (element.classList.contains('modal')) { element = null; } // modal is now independent of it's triggering element\n\n    // reset on re-init\n    if (element && element.Modal) { element.Modal.dispose(); }\n    if (modal && modal.Modal) { modal.Modal.dispose(); }\n\n    // set options\n    ops.keyboard = !(options.keyboard === false || modal.getAttribute('data-keyboard') === 'false');\n    ops.backdrop = options.backdrop === 'static' || modal.getAttribute('data-backdrop') === 'static' ? 'static' : true;\n    ops.backdrop = options.backdrop === false || modal.getAttribute('data-backdrop') === 'false' ? false : ops.backdrop;\n    ops.animation = !!modal.classList.contains('fade');\n    ops.content = options.content; // JavaScript only\n\n    // set an initial state of the modal\n    modal.isAnimating = false;\n\n    // prevent adding event handlers over and over\n    // modal is independent of a triggering element\n    if (element && !element.Modal) {\n      element.addEventListener('click', clickHandler, false);\n    }\n\n    if (ops.content) {\n      self.setContent(ops.content.trim());\n    }\n\n    // set associations\n    if (element) {\n      modal.modalTrigger = element;\n      element.Modal = self;\n    } else {\n      modal.Modal = self;\n    }\n  }\n\n  var mouseClickEvents = { down: 'mousedown', up: 'mouseup' };\n\n  // Popover, Tooltip & ScrollSpy\n  function getScroll() {\n    return {\n      y: window.pageYOffset || document.documentElement.scrollTop,\n      x: window.pageXOffset || document.documentElement.scrollLeft,\n    };\n  }\n\n  // both popovers and tooltips (target,tooltip,placement,elementToAppendTo)\n  function styleTip(link, element, originalPosition, parent) {\n    var tipPositions = /\\b(top|bottom|left|right)+/;\n    var elementDimensions = { w: element.offsetWidth, h: element.offsetHeight };\n    var windowWidth = (document.documentElement.clientWidth || document.body.clientWidth);\n    var windowHeight = (document.documentElement.clientHeight || document.body.clientHeight);\n    var rect = link.getBoundingClientRect();\n    var scroll = parent === document.body\n      ? getScroll()\n      : { x: parent.offsetLeft + parent.scrollLeft, y: parent.offsetTop + parent.scrollTop };\n    var linkDimensions = { w: rect.right - rect.left, h: rect.bottom - rect.top };\n    var isPopover = element.classList.contains('popover');\n    var arrow = element.getElementsByClassName('arrow')[0];\n    var halfTopExceed = rect.top + linkDimensions.h / 2 - elementDimensions.h / 2 < 0;\n    var halfLeftExceed = rect.left + linkDimensions.w / 2 - elementDimensions.w / 2 < 0;\n    var halfRightExceed = rect.left + elementDimensions.w / 2\n      + linkDimensions.w / 2 >= windowWidth;\n    var halfBottomExceed = rect.top + elementDimensions.h / 2\n      + linkDimensions.h / 2 >= windowHeight;\n    var topExceed = rect.top - elementDimensions.h < 0;\n    var leftExceed = rect.left - elementDimensions.w < 0;\n    var bottomExceed = rect.top + elementDimensions.h + linkDimensions.h >= windowHeight;\n    var rightExceed = rect.left + elementDimensions.w + linkDimensions.w >= windowWidth;\n    var position = originalPosition;\n\n    // recompute position\n    // first, when both left and right limits are exceeded, we fall back to top|bottom\n    position = (position === 'left' || position === 'right') && leftExceed && rightExceed ? 'top' : position;\n    position = position === 'top' && topExceed ? 'bottom' : position;\n    position = position === 'bottom' && bottomExceed ? 'top' : position;\n    position = position === 'left' && leftExceed ? 'right' : position;\n    position = position === 'right' && rightExceed ? 'left' : position;\n\n    var topPosition;\n    var leftPosition;\n    var arrowTop;\n    var arrowLeft;\n\n    // update tooltip/popover class\n    if (element.className.indexOf(position) === -1) {\n      element.className = element.className.replace(tipPositions, position);\n    }\n\n    // we check the computed width & height and update here\n    var arrowWidth = arrow.offsetWidth;\n    var arrowHeight = arrow.offsetHeight;\n\n    // apply styling to tooltip or popover\n    // secondary|side positions\n    if (position === 'left' || position === 'right') {\n      if (position === 'left') { // LEFT\n        leftPosition = rect.left + scroll.x - elementDimensions.w - (isPopover ? arrowWidth : 0);\n      } else { // RIGHT\n        leftPosition = rect.left + scroll.x + linkDimensions.w;\n      }\n\n      // adjust top and arrow\n      if (halfTopExceed) {\n        topPosition = rect.top + scroll.y;\n        arrowTop = linkDimensions.h / 2 - arrowWidth;\n      } else if (halfBottomExceed) {\n        topPosition = rect.top + scroll.y - elementDimensions.h + linkDimensions.h;\n        arrowTop = elementDimensions.h - linkDimensions.h / 2 - arrowWidth;\n      } else {\n        topPosition = rect.top + scroll.y - elementDimensions.h / 2 + linkDimensions.h / 2;\n        arrowTop = elementDimensions.h / 2 - (isPopover ? arrowHeight * 0.9 : arrowHeight / 2);\n      }\n    // primary|vertical positions\n    } else if (position === 'top' || position === 'bottom') {\n      if (position === 'top') { // TOP\n        topPosition = rect.top + scroll.y - elementDimensions.h - (isPopover ? arrowHeight : 0);\n      } else { // BOTTOM\n        topPosition = rect.top + scroll.y + linkDimensions.h;\n      }\n      // adjust left | right and also the arrow\n      if (halfLeftExceed) {\n        leftPosition = 0;\n        arrowLeft = rect.left + linkDimensions.w / 2 - arrowWidth;\n      } else if (halfRightExceed) {\n        leftPosition = windowWidth - elementDimensions.w * 1.01;\n        arrowLeft = elementDimensions.w - (windowWidth - rect.left)\n          + linkDimensions.w / 2 - arrowWidth / 2;\n      } else {\n        leftPosition = rect.left + scroll.x - elementDimensions.w / 2 + linkDimensions.w / 2;\n        arrowLeft = elementDimensions.w / 2 - (isPopover ? arrowWidth : arrowWidth / 2);\n      }\n    }\n\n    // apply style to tooltip/popover and its arrow\n    element.style.top = topPosition + \"px\";\n    element.style.left = leftPosition + \"px\";\n\n    if (arrowTop) { arrow.style.top = arrowTop + \"px\"; }\n    if (arrowLeft) { arrow.style.left = arrowLeft + \"px\"; }\n  }\n\n  /* Native JavaScript for Bootstrap 4 | Popover\n  ---------------------------------------------- */\n\n  // POPOVER DEFINITION\n  // ==================\n\n  function Popover(elem, opsInput) {\n    var element;\n    // set instance options\n    var options = opsInput || {};\n\n    // bind\n    var self = this;\n\n    // popover and timer\n    var popover = null;\n    var timer = 0;\n    var isIphone = /(iPhone|iPod|iPad)/.test(navigator.userAgent);\n    // title and content\n    var titleString;\n    var contentString;\n    var placementClass;\n\n    // options\n    var ops = {};\n\n    // close btn for dissmissible popover\n    var closeBtn;\n\n    // custom events\n    var showCustomEvent;\n    var shownCustomEvent;\n    var hideCustomEvent;\n    var hiddenCustomEvent;\n\n    // handlers\n    function dismissibleHandler(e) {\n      if (popover !== null && e.target === queryElement('.close', popover)) {\n        self.hide();\n      }\n    }\n    // private methods\n    function getAttr(att) {\n      return options[att] || element.dataset[att] || null;\n    }\n    function getTitle() {\n      return getAttr('title');\n    }\n    function getContent() {\n      return getAttr('content');\n    }\n    function removePopover() {\n      ops.container.removeChild(popover);\n      timer = null; popover = null;\n    }\n\n    function createPopover() {\n      titleString = getTitle();\n      contentString = getContent();\n      // fixing https://github.com/thednp/bootstrap.native/issues/233\n      contentString = contentString ? contentString.trim() : null;\n\n      popover = document.createElement('div');\n\n      // popover arrow\n      var popoverArrow = document.createElement('div');\n      popoverArrow.classList.add('arrow');\n      popover.appendChild(popoverArrow);\n\n      // create the popover from data attributes\n      if (contentString !== null && ops.template === null) {\n        popover.setAttribute('role', 'tooltip');\n\n        if (titleString !== null) {\n          var popoverTitle = document.createElement('h3');\n          popoverTitle.classList.add('popover-header');\n          popoverTitle.innerHTML = ops.dismissible ? titleString + closeBtn : titleString;\n          popover.appendChild(popoverTitle);\n        }\n\n        // set popover content\n        var popoverBodyMarkup = document.createElement('div');\n        popoverBodyMarkup.classList.add('popover-body');\n        popoverBodyMarkup.innerHTML = ops.dismissible && titleString === null\n          ? contentString + closeBtn\n          : contentString;\n        popover.appendChild(popoverBodyMarkup);\n      } else { // or create the popover from template\n        var popoverTemplate = document.createElement('div');\n        popoverTemplate.innerHTML = ops.template.trim();\n        popover.className = popoverTemplate.firstChild.className;\n        popover.innerHTML = popoverTemplate.firstChild.innerHTML;\n\n        var popoverHeader = queryElement('.popover-header', popover);\n        var popoverBody = queryElement('.popover-body', popover);\n\n        // fill the template with content from data attributes\n        if (titleString && popoverHeader) { popoverHeader.innerHTML = titleString.trim(); }\n        if (contentString && popoverBody) { popoverBody.innerHTML = contentString.trim(); }\n      }\n\n      // append to the container\n      ops.container.appendChild(popover);\n      popover.style.display = 'block';\n      if (!popover.classList.contains('popover')) { popover.classList.add('popover'); }\n      if (!popover.classList.contains(ops.animation)) { popover.classList.add(ops.animation); }\n      if (!popover.classList.contains(placementClass)) { popover.classList.add(placementClass); }\n    }\n    function showPopover() {\n      if (!popover.classList.contains('show')) { popover.classList.add('show'); }\n    }\n    function updatePopover() {\n      styleTip(element, popover, ops.placement, ops.container);\n    }\n    function forceFocus() {\n      if (popover === null) { element.focus(); }\n    }\n    function toggleEvents(add) {\n      var action = add ? 'addEventListener' : 'removeEventListener';\n      if (ops.trigger === 'hover') {\n        element[action](mouseClickEvents.down, self.show);\n        element[action](mouseHoverEvents[0], self.show);\n        // mouseHover = ('onmouseleave' in document)\n        //   ? [ 'mouseenter', 'mouseleave']\n        //   : [ 'mouseover', 'mouseout' ]\n        if (!ops.dismissible) { element[action](mouseHoverEvents[1], self.hide); }\n      } else if (ops.trigger === 'click') {\n        element[action](ops.trigger, self.toggle);\n      } else if (ops.trigger === 'focus') {\n        if (isIphone) { element[action]('click', forceFocus, false); }\n        element[action](ops.trigger, self.toggle);\n      }\n    }\n    function touchHandler(e) {\n      if ((popover && popover.contains(e.target))\n        || e.target === element || element.contains(e.target)) ; else {\n        self.hide();\n      }\n    }\n    // event toggle\n    function dismissHandlerToggle(add) {\n      var action = add ? 'addEventListener' : 'removeEventListener';\n      if (ops.dismissible) {\n        document[action]('click', dismissibleHandler, false);\n      } else {\n        if (ops.trigger === 'focus') { element[action]('blur', self.hide); }\n        if (ops.trigger === 'hover') { document[action]('touchstart', touchHandler, passiveHandler); }\n      }\n      window[action]('resize', self.hide, passiveHandler);\n    }\n    // triggers\n    function showTrigger() {\n      dismissHandlerToggle(1);\n      dispatchCustomEvent.call(element, shownCustomEvent);\n    }\n    function hideTrigger() {\n      dismissHandlerToggle();\n      removePopover();\n      dispatchCustomEvent.call(element, hiddenCustomEvent);\n    }\n\n    // public methods / handlers\n    self.toggle = function () {\n      if (popover === null) { self.show(); }\n      else { self.hide(); }\n    };\n    self.show = function () {\n      clearTimeout(timer);\n      timer = setTimeout(function () {\n        if (popover === null) {\n          dispatchCustomEvent.call(element, showCustomEvent);\n          if (showCustomEvent.defaultPrevented) { return; }\n\n          createPopover();\n          updatePopover();\n          showPopover();\n          if (ops.animation) { emulateTransitionEnd(popover, showTrigger); }\n          else { showTrigger(); }\n        }\n      }, 20);\n    };\n    self.hide = function () {\n      clearTimeout(timer);\n      timer = setTimeout(function () {\n        if (popover && popover !== null && popover.classList.contains('show')) {\n          dispatchCustomEvent.call(element, hideCustomEvent);\n          if (hideCustomEvent.defaultPrevented) { return; }\n          popover.classList.remove('show');\n          if (ops.animation) { emulateTransitionEnd(popover, hideTrigger); }\n          else { hideTrigger(); }\n        }\n      }, ops.delay);\n    };\n    self.dispose = function () {\n      self.hide();\n      toggleEvents();\n      delete element.Popover;\n    };\n\n    // INIT\n    // initialization element\n    element = queryElement(elem);\n\n    // reset on re-init\n    if (element.Popover) { element.Popover.dispose(); }\n\n    // DATA API\n    var triggerData = element.getAttribute('data-trigger'); // click / hover / focus\n    var animationData = element.getAttribute('data-animation'); // true / false\n\n    var placementData = element.getAttribute('data-placement');\n    var dismissibleData = element.getAttribute('data-dismissible');\n    var delayData = element.getAttribute('data-delay');\n    var containerData = element.getAttribute('data-container');\n\n    // close btn for dissmissible popover\n    closeBtn = '<button type=\"button\" class=\"close\">×</button>';\n\n    // custom events\n    showCustomEvent = bootstrapCustomEvent('show', 'popover');\n    shownCustomEvent = bootstrapCustomEvent('shown', 'popover');\n    hideCustomEvent = bootstrapCustomEvent('hide', 'popover');\n    hiddenCustomEvent = bootstrapCustomEvent('hidden', 'popover');\n\n    // check container\n    var containerElement = queryElement(options.container);\n    var containerDataElement = queryElement(containerData);\n\n    // maybe the element is inside a modal\n    var modal = element.closest('.modal');\n\n    // maybe the element is inside a fixed navbar\n    var navbarFixedTop = element.closest('.fixed-top');\n    var navbarFixedBottom = element.closest('.fixed-bottom');\n\n    // set instance options\n    ops.template = options.template ? options.template : null; // JavaScript only\n    ops.trigger = options.trigger ? options.trigger : triggerData || 'hover';\n    ops.animation = options.animation && options.animation !== 'fade' ? options.animation : animationData || 'fade';\n    ops.placement = options.placement ? options.placement : placementData || 'top';\n    ops.delay = parseInt((options.delay || delayData), 10) || 200;\n    ops.dismissible = !!(options.dismissible || dismissibleData === 'true');\n    ops.container = containerElement\n      || (containerDataElement\n        || (navbarFixedTop || (navbarFixedBottom || (modal || document.body))));\n\n    placementClass = \"bs-popover-\" + (ops.placement);\n\n    // invalidate\n    titleString = getTitle();\n    contentString = getContent();\n\n    if (!contentString && !ops.template) { return; }\n\n    // init\n    if (!element.Popover) { // prevent adding event handlers twice\n      toggleEvents(1);\n    }\n\n    // associate target to init object\n    element.Popover = self;\n  }\n\n  /* Native JavaScript for Bootstrap 5 | ScrollSpy\n  ------------------------------------------------ */\n\n  // SCROLLSPY DEFINITION\n  // ====================\n\n  function ScrollSpy(elem, opsInput) {\n    var element;\n\n    // set options\n    var options = opsInput || {};\n\n    // bind\n    var self = this;\n\n    // GC internals\n    var vars;\n    var links;\n\n    // targets\n    var spyTarget;\n    // determine which is the real scrollTarget\n    var scrollTarget;\n    // options\n    var ops = {};\n\n    // private methods\n    // populate items and targets\n    function updateTargets() {\n      links = spyTarget.getElementsByTagName('A');\n\n      vars.scrollTop = vars.isWindow ? getScroll().y : element.scrollTop;\n\n      // only update vars once or with each mutation\n      if (vars.length !== links.length || getScrollHeight() !== vars.scrollHeight) {\n        var href;\n        var targetItem;\n        var rect;\n\n        // reset arrays & update\n        vars.items = [];\n        vars.offsets = [];\n        vars.scrollHeight = getScrollHeight();\n        vars.maxScroll = vars.scrollHeight - getOffsetHeight();\n\n        Array.from(links).forEach(function (link) {\n          href = link.getAttribute('href');\n          targetItem = href && href.charAt(0) === '#' && href.slice(-1) !== '#' && queryElement(href);\n\n          if (targetItem) {\n            vars.items.push(link);\n            rect = targetItem.getBoundingClientRect();\n            vars.offsets.push((vars.isWindow\n              ? rect.top + vars.scrollTop\n              : targetItem.offsetTop) - ops.offset);\n          }\n        });\n        vars.length = vars.items.length;\n      }\n    }\n    // item update\n    function toggleEvents(add) {\n      var action = add ? 'addEventListener' : 'removeEventListener';\n      scrollTarget[action]('scroll', self.refresh, passiveHandler);\n      window[action]('resize', self.refresh, passiveHandler);\n    }\n    function getScrollHeight() {\n      return scrollTarget.scrollHeight || Math.max(\n        document.body.scrollHeight,\n        document.documentElement.scrollHeight\n      );\n    }\n    function getOffsetHeight() {\n      return !vars.isWindow ? element.getBoundingClientRect().height : window.innerHeight;\n    }\n    function clear() {\n      Array.from(links).map(function (item) { return item.classList.contains('active') && item.classList.remove('active'); });\n    }\n    function activate(input) {\n      var item = input;\n      var itemClassList;\n      clear();\n      vars.activeItem = item;\n      item.classList.add('active');\n\n      // activate all parents\n      var parents = [];\n      while (item.parentNode !== document.body) {\n        item = item.parentNode;\n        itemClassList = item.classList;\n\n        if (itemClassList.contains('dropdown-menu') || itemClassList.contains('nav')) { parents.push(item); }\n      }\n\n      parents.forEach(function (menuItem) {\n        var parentLink = menuItem.previousElementSibling;\n\n        if (parentLink && !parentLink.classList.contains('active')) {\n          parentLink.classList.add('active');\n        }\n      });\n\n      dispatchCustomEvent.call(element, bootstrapCustomEvent('activate', 'scrollspy', { relatedTarget: vars.activeItem }));\n    }\n\n    // public method\n    self.refresh = function () {\n      updateTargets();\n\n      if (vars.scrollTop >= vars.maxScroll) {\n        var newActiveItem = vars.items[vars.length - 1];\n\n        if (vars.activeItem !== newActiveItem) {\n          activate(newActiveItem);\n        }\n\n        return;\n      }\n\n      if (vars.activeItem && vars.scrollTop < vars.offsets[0] && vars.offsets[0] > 0) {\n        vars.activeItem = null;\n        clear();\n        return;\n      }\n\n      var i = vars.length;\n      while (i > -1) {\n        if (vars.activeItem !== vars.items[i] && vars.scrollTop >= vars.offsets[i]\n          && (typeof vars.offsets[i + 1] === 'undefined' || vars.scrollTop < vars.offsets[i + 1])) {\n          activate(vars.items[i]);\n        }\n        i -= 1;\n      }\n    };\n    self.dispose = function () {\n      toggleEvents();\n      delete element.ScrollSpy;\n    };\n\n    // init\n    // initialization element, the element we spy on\n    element = queryElement(elem);\n\n    // reset on re-init\n    if (element.ScrollSpy) { element.ScrollSpy.dispose(); }\n\n    // event targets, constants\n    // DATA API\n    var targetData = element.getAttribute('data-target');\n    var offsetData = element.getAttribute('data-offset');\n\n    // targets\n    spyTarget = queryElement(options.target || targetData);\n\n    // determine which is the real scrollTarget\n    scrollTarget = element.clientHeight < element.scrollHeight ? element : window;\n\n    if (!spyTarget) { return; }\n\n    // set instance option\n    ops.offset = +(options.offset || offsetData) || 10;\n\n    // set instance priority variables\n    vars = {};\n    vars.length = 0;\n    vars.items = [];\n    vars.offsets = [];\n    vars.isWindow = scrollTarget === window;\n    vars.activeItem = null;\n    vars.scrollHeight = 0;\n    vars.maxScroll = 0;\n\n    // prevent adding event handlers twice\n    if (!element.ScrollSpy) { toggleEvents(1); }\n\n    self.refresh();\n\n    // associate target with init object\n    element.ScrollSpy = self;\n  }\n\n  /* Native JavaScript for Bootstrap 4 | Tab\n  ------------------------------------------ */\n\n  // TAB DEFINITION\n  // ==============\n\n  function Tab(elem, opsInput) {\n    var element;\n    // set options\n    var options = opsInput || {};\n\n    // bind\n    var self = this;\n\n    // event targets\n    var tabs;\n    var dropdown;\n\n    // custom events\n    var showCustomEvent;\n    var shownCustomEvent;\n    var hideCustomEvent;\n    var hiddenCustomEvent;\n\n    // more GC material\n    var next;\n    var tabsContentContainer = false;\n    var activeTab;\n    var activeContent;\n    var nextContent;\n    var containerHeight;\n    var equalContents;\n    var nextHeight;\n\n    // triggers\n    function triggerEnd() {\n      tabsContentContainer.style.height = '';\n      tabsContentContainer.classList.remove('collapsing');\n      tabs.isAnimating = false;\n    }\n    function triggerShow() {\n      if (tabsContentContainer) { // height animation\n        if (equalContents) {\n          triggerEnd();\n        } else {\n          setTimeout(function () { // enables height animation\n            tabsContentContainer.style.height = nextHeight + \"px\"; // height animation\n            reflow(tabsContentContainer);\n            emulateTransitionEnd(tabsContentContainer, triggerEnd);\n          }, 50);\n        }\n      } else {\n        tabs.isAnimating = false;\n      }\n      shownCustomEvent = bootstrapCustomEvent('shown', 'tab', { relatedTarget: activeTab });\n      dispatchCustomEvent.call(next, shownCustomEvent);\n    }\n    function triggerHide() {\n      if (tabsContentContainer) {\n        activeContent.style.float = 'left';\n        nextContent.style.float = 'left';\n        containerHeight = activeContent.scrollHeight;\n      }\n\n      showCustomEvent = bootstrapCustomEvent('show', 'tab', { relatedTarget: activeTab });\n      hiddenCustomEvent = bootstrapCustomEvent('hidden', 'tab', { relatedTarget: next });\n\n      dispatchCustomEvent.call(next, showCustomEvent);\n      if (showCustomEvent.defaultPrevented) { return; }\n\n      nextContent.classList.add('active');\n\n      activeContent.classList.remove('active');\n\n      if (tabsContentContainer) {\n        nextHeight = nextContent.scrollHeight;\n        equalContents = nextHeight === containerHeight;\n        tabsContentContainer.classList.add('collapsing');\n        tabsContentContainer.style.height = containerHeight + \"px\"; // height animation\n        reflow(tabsContentContainer);\n        activeContent.style.float = '';\n        nextContent.style.float = '';\n      }\n\n      if (nextContent.classList.contains('fade')) {\n        setTimeout(function () {\n          nextContent.classList.add('show');\n          emulateTransitionEnd(nextContent, triggerShow);\n        }, 20);\n      } else { triggerShow(); }\n\n      dispatchCustomEvent.call(activeTab, hiddenCustomEvent);\n    }\n    // private methods\n    function getActiveTab() {\n      var assign;\n\n      var activeTabs = tabs.getElementsByClassName('active');\n\n      if (activeTabs.length === 1 && !activeTabs[0].parentNode.classList.contains('dropdown')) {\n        (assign = activeTabs, activeTab = assign[0]);\n      } else if (activeTabs.length > 1) {\n        activeTab = activeTabs[activeTabs.length - 1];\n      }\n      return activeTab;\n    }\n    function getActiveContent() { return queryElement(getActiveTab().getAttribute('href')); }\n    // handler\n    function clickHandler(e) {\n      e.preventDefault();\n      next = e.currentTarget;\n      if (!tabs.isAnimating) { self.show(); }\n    }\n\n    // public method\n    self.show = function () { // the tab we clicked is now the next tab\n      next = next || element;\n\n      if (!next.classList.contains('active')) {\n        nextContent = queryElement(next.getAttribute('href')); // this is the actual object, the next tab content to activate\n        activeTab = getActiveTab();\n        activeContent = getActiveContent();\n\n        hideCustomEvent = bootstrapCustomEvent('hide', 'tab', { relatedTarget: next });\n        dispatchCustomEvent.call(activeTab, hideCustomEvent);\n        if (hideCustomEvent.defaultPrevented) { return; }\n\n        tabs.isAnimating = true;\n        activeTab.classList.remove('active');\n        activeTab.setAttribute('aria-selected', 'false');\n        next.classList.add('active');\n        next.setAttribute('aria-selected', 'true');\n\n        if (dropdown) {\n          if (!element.parentNode.classList.contains('dropdown-menu')) {\n            if (dropdown.classList.contains('active')) { dropdown.classList.remove('active'); }\n          } else if (!dropdown.classList.contains('active')) { dropdown.classList.add('active'); }\n        }\n\n        if (activeContent.classList.contains('fade')) {\n          activeContent.classList.remove('show');\n          emulateTransitionEnd(activeContent, triggerHide);\n        } else { triggerHide(); }\n      }\n    };\n    self.dispose = function () {\n      element.removeEventListener('click', clickHandler, false);\n      delete element.Tab;\n    };\n\n    // INIT\n    // initialization element\n    element = queryElement(elem);\n\n    // reset on re-init\n    if (element.Tab) { element.Tab.dispose(); }\n\n    // DATA API\n    var heightData = element.getAttribute('data-height');\n    // event targets\n    tabs = element.closest('.nav');\n    dropdown = tabs && queryElement('.dropdown-toggle', tabs);\n\n    // instance options\n    var animateHeight = !(!supportTransition || (options.height === false || heightData === 'false'));\n\n    // set default animation state\n    tabs.isAnimating = false;\n\n    // init\n    if (!element.Tab) { // prevent adding event handlers twice\n      element.addEventListener('click', clickHandler, false);\n    }\n\n    if (animateHeight) { tabsContentContainer = getActiveContent().parentNode; }\n\n    // associate target with init object\n    element.Tab = self;\n  }\n\n  /* Native JavaScript for Bootstrap 4 | Toast\n  -------------------------------------------- */\n\n  // TOAST DEFINITION\n  // ==================\n\n  function Toast(elem, opsInput) {\n    var element;\n\n    // set options\n    var options = opsInput || {};\n\n    // bind\n    var self = this;\n\n    // toast, timer\n    var toast;\n    var timer = 0;\n\n    // custom events\n    var showCustomEvent;\n    var hideCustomEvent;\n    var shownCustomEvent;\n    var hiddenCustomEvent;\n    var ops = {};\n\n    // private methods\n    function showComplete() {\n      toast.classList.remove('showing');\n      toast.classList.add('show');\n      dispatchCustomEvent.call(toast, shownCustomEvent);\n      if (ops.autohide) { self.hide(); }\n    }\n    function hideComplete() {\n      toast.classList.add('hide');\n      dispatchCustomEvent.call(toast, hiddenCustomEvent);\n    }\n    function close() {\n      toast.classList.remove('show');\n      if (ops.animation) { emulateTransitionEnd(toast, hideComplete); }\n      else { hideComplete(); }\n    }\n    function disposeComplete() {\n      clearTimeout(timer);\n      element.removeEventListener('click', self.hide, false);\n\n      delete element.Toast;\n    }\n\n    // public methods\n    self.show = function () {\n      if (toast && !toast.classList.contains('show')) {\n        dispatchCustomEvent.call(toast, showCustomEvent);\n        if (showCustomEvent.defaultPrevented) { return; }\n        if (ops.animation) { toast.classList.add('fade'); }\n        toast.classList.remove('hide');\n        reflow(toast); // force reflow\n        toast.classList.add('showing');\n\n        if (ops.animation) { emulateTransitionEnd(toast, showComplete); }\n        else { showComplete(); }\n      }\n    };\n    self.hide = function (noTimer) {\n      if (toast && toast.classList.contains('show')) {\n        dispatchCustomEvent.call(toast, hideCustomEvent);\n        if (hideCustomEvent.defaultPrevented) { return; }\n\n        if (noTimer) { close(); }\n        else { timer = setTimeout(close, ops.delay); }\n      }\n    };\n    self.dispose = function () {\n      if (ops.animation) { emulateTransitionEnd(toast, disposeComplete); }\n      else { disposeComplete(); }\n    };\n\n    // init\n\n    // initialization element\n    element = queryElement(elem);\n\n    // reset on re-init\n    if (element.Toast) { element.Toast.dispose(); }\n\n    // toast, timer\n    toast = element.closest('.toast');\n\n    // DATA API\n    var animationData = element.getAttribute('data-animation');\n    var autohideData = element.getAttribute('data-autohide');\n    var delayData = element.getAttribute('data-delay');\n\n    // custom events\n    showCustomEvent = bootstrapCustomEvent('show', 'toast');\n    hideCustomEvent = bootstrapCustomEvent('hide', 'toast');\n    shownCustomEvent = bootstrapCustomEvent('shown', 'toast');\n    hiddenCustomEvent = bootstrapCustomEvent('hidden', 'toast');\n\n    // set instance options\n    ops.animation = options.animation === false || animationData === 'false' ? 0 : 1; // true by default\n    ops.autohide = options.autohide === false || autohideData === 'false' ? 0 : 1; // true by default\n    ops.delay = parseInt((options.delay || delayData), 10) || 500; // 500ms default\n\n    if (!element.Toast) { // prevent adding event handlers twice\n      element.addEventListener('click', self.hide, false);\n    }\n\n    // associate targets to init object\n    element.Toast = self;\n  }\n\n  /* Native JavaScript for Bootstrap 4 | Tooltip\n  ---------------------------------------------- */\n\n  // TOOLTIP DEFINITION\n  // ==================\n\n  function Tooltip(elem, opsInput) {\n    var element;\n    // set options\n    var options = opsInput || {};\n\n    // bind\n    var self = this;\n\n    // tooltip, timer, and title\n    var tooltip = null;\n    var timer = 0;\n    var titleString;\n    var placementClass;\n\n    // custom events\n    var showCustomEvent;\n    var shownCustomEvent;\n    var hideCustomEvent;\n    var hiddenCustomEvent;\n\n    var ops = {};\n\n    // private methods\n    function getTitle() {\n      return element.getAttribute('title')\n          || element.getAttribute('data-title')\n          || element.getAttribute('data-original-title');\n    }\n    function removeToolTip() {\n      ops.container.removeChild(tooltip);\n      tooltip = null; timer = null;\n    }\n    function createToolTip() {\n      titleString = getTitle(); // read the title again\n      if (titleString) { // invalidate, maybe markup changed\n        // create tooltip\n        tooltip = document.createElement('div');\n\n        // set markup\n        if (ops.template) {\n          var tooltipMarkup = document.createElement('div');\n          tooltipMarkup.innerHTML = ops.template.trim();\n\n          tooltip.className = tooltipMarkup.firstChild.className;\n          tooltip.innerHTML = tooltipMarkup.firstChild.innerHTML;\n\n          queryElement('.tooltip-inner', tooltip).innerHTML = titleString.trim();\n        } else {\n          // tooltip arrow\n          var tooltipArrow = document.createElement('div');\n          tooltipArrow.classList.add('arrow');\n          tooltip.appendChild(tooltipArrow);\n          // tooltip inner\n          var tooltipInner = document.createElement('div');\n          tooltipInner.classList.add('tooltip-inner');\n          tooltip.appendChild(tooltipInner);\n          tooltipInner.innerHTML = titleString;\n        }\n        // reset position\n        tooltip.style.left = '0';\n        tooltip.style.top = '0';\n        // set class and role attribute\n        tooltip.setAttribute('role', 'tooltip');\n        if (!tooltip.classList.contains('tooltip')) { tooltip.classList.add('tooltip'); }\n        if (!tooltip.classList.contains(ops.animation)) { tooltip.classList.add(ops.animation); }\n        if (!tooltip.classList.contains(placementClass)) { tooltip.classList.add(placementClass); }\n        // append to container\n        ops.container.appendChild(tooltip);\n      }\n    }\n    function updateTooltip() {\n      styleTip(element, tooltip, ops.placement, ops.container);\n    }\n    function showTooltip() {\n      if (!tooltip.classList.contains('show')) { tooltip.classList.add('show'); }\n    }\n    function touchHandler(e) {\n      if ((tooltip && tooltip.contains(e.target))\n        || e.target === element || element.contains(e.target)) ; else {\n        self.hide();\n      }\n    }\n    // triggers\n    function toggleAction(add) {\n      var action = add ? 'addEventListener' : 'removeEventListener';\n      document[action]('touchstart', touchHandler, passiveHandler);\n      window[action]('resize', self.hide, passiveHandler);\n    }\n    function showAction() {\n      toggleAction(1);\n      dispatchCustomEvent.call(element, shownCustomEvent);\n    }\n    function hideAction() {\n      toggleAction();\n      removeToolTip();\n      dispatchCustomEvent.call(element, hiddenCustomEvent);\n    }\n    function toggleEvents(add) {\n      var action = add ? 'addEventListener' : 'removeEventListener';\n      element[action](mouseClickEvents.down, self.show, false);\n      element[action](mouseHoverEvents[0], self.show, false);\n      element[action](mouseHoverEvents[1], self.hide, false);\n    }\n\n    // public methods\n    self.show = function () {\n      clearTimeout(timer);\n      timer = setTimeout(function () {\n        if (tooltip === null) {\n          dispatchCustomEvent.call(element, showCustomEvent);\n          if (showCustomEvent.defaultPrevented) { return; }\n          // if(createToolTip() == false) return;\n          if (createToolTip() !== false) {\n            updateTooltip();\n            showTooltip();\n            if (ops.animation) { emulateTransitionEnd(tooltip, showAction); }\n            else { showAction(); }\n          }\n        }\n      }, 20);\n    };\n    self.hide = function () {\n      clearTimeout(timer);\n      timer = setTimeout(function () {\n        if (tooltip && tooltip.classList.contains('show')) {\n          dispatchCustomEvent.call(element, hideCustomEvent);\n          if (hideCustomEvent.defaultPrevented) { return; }\n          tooltip.classList.remove('show');\n          if (ops.animation) { emulateTransitionEnd(tooltip, hideAction); }\n          else { hideAction(); }\n        }\n      }, ops.delay);\n    };\n    self.toggle = function () {\n      if (!tooltip) { self.show(); }\n      else { self.hide(); }\n    };\n    self.dispose = function () {\n      toggleEvents();\n      self.hide();\n      element.setAttribute('title', element.getAttribute('data-original-title'));\n      element.removeAttribute('data-original-title');\n      delete element.Tooltip;\n    };\n\n    // init\n    // initialization element\n    element = queryElement(elem);\n\n    // reset on re-init\n    if (element.Tooltip) { element.Tooltip.dispose(); }\n\n    // DATA API\n    var animationData = element.getAttribute('data-animation');\n    var placementData = element.getAttribute('data-placement');\n    var delayData = element.getAttribute('data-delay');\n    var containerData = element.getAttribute('data-container');\n\n    // check container\n    var containerElement = queryElement(options.container);\n    var containerDataElement = queryElement(containerData);\n\n    // maybe the element is inside a modal\n    var modal = element.closest('.modal');\n\n    // custom events\n    showCustomEvent = bootstrapCustomEvent('show', 'tooltip');\n    shownCustomEvent = bootstrapCustomEvent('shown', 'tooltip');\n    hideCustomEvent = bootstrapCustomEvent('hide', 'tooltip');\n    hiddenCustomEvent = bootstrapCustomEvent('hidden', 'tooltip');\n\n    // maybe the element is inside a fixed navbar\n    var navbarFixedTop = element.closest('.fixed-top');\n    var navbarFixedBottom = element.closest('.fixed-bottom');\n\n    // set instance options\n    ops.animation = options.animation && options.animation !== 'fade' ? options.animation : animationData || 'fade';\n    ops.placement = options.placement ? options.placement : placementData || 'top';\n    ops.template = options.template ? options.template : null; // JavaScript only\n    ops.delay = parseInt((options.delay || delayData), 10) || 200;\n    ops.container = containerElement\n      || (containerDataElement\n        || (navbarFixedTop || (navbarFixedBottom || (modal || document.body))));\n\n    // set placement class\n    placementClass = \"bs-tooltip-\" + (ops.placement);\n\n    // set tooltip content\n    titleString = getTitle();\n\n    // invalidate\n    if (!titleString) { return; }\n\n    // prevent adding event handlers twice\n    if (!element.Tooltip) {\n      element.setAttribute('data-original-title', titleString);\n      element.removeAttribute('title');\n      toggleEvents(1);\n    }\n\n    // associate target to init object\n    element.Tooltip = self;\n  }\n\n  var componentsInit = {};\n\n  /* Native JavaScript for Bootstrap | Initialize Data API\n  -------------------------------------------------------- */\n  function initializeDataAPI(Constructor, collection) {\n    Array.from(collection).map(function (x) { return new Constructor(x); });\n  }\n  function initCallback(context) {\n    var lookUp = context instanceof Element ? context : document;\n    Object.keys(componentsInit).forEach(function (component) {\n      initializeDataAPI(componentsInit[component][0],\n        lookUp.querySelectorAll(componentsInit[component][1]));\n    });\n  }\n\n  componentsInit.Alert = [Alert, '[data-dismiss=\"alert\"]'];\n  componentsInit.Button = [Button, '[data-toggle=\"buttons\"]'];\n  componentsInit.Carousel = [Carousel, '[data-ride=\"carousel\"]'];\n  componentsInit.Collapse = [Collapse, '[data-toggle=\"collapse\"]'];\n  componentsInit.Dropdown = [Dropdown, '[data-toggle=\"dropdown\"]'];\n  componentsInit.Modal = [Modal, '[data-toggle=\"modal\"]'];\n  componentsInit.Popover = [Popover, '[data-toggle=\"popover\"],[data-tip=\"popover\"]'];\n  componentsInit.ScrollSpy = [ScrollSpy, '[data-spy=\"scroll\"]'];\n  componentsInit.Tab = [Tab, '[data-toggle=\"tab\"]'];\n  componentsInit.Toast = [Toast, '[data-dismiss=\"toast\"]'];\n  componentsInit.Tooltip = [Tooltip, '[data-toggle=\"tooltip\"],[data-tip=\"tooltip\"]'];\n\n  // bulk initialize all components\n  if (document.body) { initCallback(); }\n  else {\n    document.addEventListener('DOMContentLoaded', function initWrapper() {\n      initCallback();\n      document.removeEventListener('DOMContentLoaded', initWrapper, false);\n    }, false);\n  }\n\n  /* Native JavaScript for Bootstrap | Remove Data API\n  ---------------------------------------------------- */\n  function removeElementDataAPI(ConstructorName, collection) {\n    Array.from(collection).map(function (x) { return x[ConstructorName].dispose(); });\n  }\n  function removeDataAPI(context) {\n    var lookUp = context instanceof Element ? context : document;\n    Object.keys(componentsInit).forEach(function (component) {\n      removeElementDataAPI(component, lookUp.querySelectorAll(componentsInit[component][1]));\n    });\n  }\n\n  var version = \"4.0.6\";\n\n  var indexV4 = {\n    Alert: Alert,\n    Button: Button,\n    Carousel: Carousel,\n    Collapse: Collapse,\n    Dropdown: Dropdown,\n    Modal: Modal,\n    Popover: Popover,\n    ScrollSpy: ScrollSpy,\n    Tab: Tab,\n    Toast: Toast,\n    Tooltip: Tooltip,\n\n    initCallback: initCallback,\n    removeDataAPI: removeDataAPI,\n    componentsInit: componentsInit,\n    Version: version,\n  };\n\n  return indexV4;\n\n})));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/bootstrap.native/dist/bootstrap-native-v4.js\n");

/***/ }),

/***/ "./node_modules/htmx.org/dist/htmx.min.js":
/*!************************************************!*\
  !*** ./node_modules/htmx.org/dist/htmx.min.js ***!
  \************************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(e,t){if(true){!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (t),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))}else{}})(typeof self!==\"undefined\"?self:this,function(){return function(){\"use strict\";var U={onLoad:t,process:ct,on:M,off:D,trigger:$,ajax:er,find:C,findAll:R,closest:H,values:function(e,t){var r=Mt(e,t||\"post\");return r.values},remove:O,addClass:L,removeClass:q,toggleClass:A,takeClass:T,defineExtension:or,removeExtension:ar,logAll:E,logger:null,config:{historyEnabled:true,historyCacheSize:10,refreshOnHistoryMiss:false,defaultSwapStyle:\"innerHTML\",defaultSwapDelay:0,defaultSettleDelay:20,includeIndicatorStyles:true,indicatorClass:\"htmx-indicator\",requestClass:\"htmx-request\",addedClass:\"htmx-added\",settlingClass:\"htmx-settling\",swappingClass:\"htmx-swapping\",allowEval:true,inlineScriptNonce:\"\",attributesToSettle:[\"class\",\"style\",\"width\",\"height\"],withCredentials:false,timeout:0,wsReconnectDelay:\"full-jitter\",disableSelector:\"[hx-disable], [data-hx-disable]\",useTemplateFragments:false,scrollBehavior:\"smooth\",defaultFocusScroll:false},parseInterval:v,_:e,createEventSource:function(e){return new EventSource(e,{withCredentials:true})},createWebSocket:function(e){return new WebSocket(e,[])},version:\"1.7.0\"};var r={bodyContains:Y,filterValues:jt,hasAttribute:s,getAttributeValue:V,getClosestMatch:h,getExpressionVars:Gt,getHeaders:Xt,getInputValues:Mt,getInternalData:_,getSwapSpecification:Ut,getTriggerSpecs:ke,getTarget:ne,makeFragment:g,mergeObjects:Q,makeSettleInfo:zt,oobSwap:B,selectAndSwap:we,settleImmediately:Ct,shouldCancel:Pe,triggerEvent:$,triggerErrorEvent:J,withExtensions:gt};var n=[\"get\",\"post\",\"put\",\"delete\",\"patch\"];var i=n.map(function(e){return\"[hx-\"+e+\"], [data-hx-\"+e+\"]\"}).join(\", \");function v(e){if(e==undefined){return undefined}if(e.slice(-2)==\"ms\"){return parseFloat(e.slice(0,-2))||undefined}if(e.slice(-1)==\"s\"){return parseFloat(e.slice(0,-1))*1e3||undefined}return parseFloat(e)||undefined}function f(e,t){return e.getAttribute&&e.getAttribute(t)}function s(e,t){return e.hasAttribute&&(e.hasAttribute(t)||e.hasAttribute(\"data-\"+t))}function V(e,t){return f(e,t)||f(e,\"data-\"+t)}function u(e){return e.parentElement}function z(){return document}function h(e,t){if(t(e)){return e}else if(u(e)){return h(u(e),t)}else{return null}}function o(e,t,r){var n=V(t,r);var i=V(t,\"hx-disinherit\");if(e!==t&&i&&(i===\"*\"||i.split(\" \").indexOf(r)>=0)){return\"unset\"}else{return n}}function G(t,r){var n=null;h(t,function(e){return n=o(t,e,r)});if(n!==\"unset\"){return n}}function d(e,t){var r=e.matches||e.matchesSelector||e.msMatchesSelector||e.mozMatchesSelector||e.webkitMatchesSelector||e.oMatchesSelector;return r&&r.call(e,t)}function a(e){var t=/<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i;var r=t.exec(e);if(r){return r[1].toLowerCase()}else{return\"\"}}function l(e,t){var r=new DOMParser;var n=r.parseFromString(e,\"text/html\");var i=n.body;while(t>0){t--;i=i.firstChild}if(i==null){i=z().createDocumentFragment()}return i}function g(e){if(U.config.useTemplateFragments){var t=l(\"<body><template>\"+e+\"</template></body>\",0);return t.querySelector(\"template\").content}else{var r=a(e);switch(r){case\"thead\":case\"tbody\":case\"tfoot\":case\"colgroup\":case\"caption\":return l(\"<table>\"+e+\"</table>\",1);case\"col\":return l(\"<table><colgroup>\"+e+\"</colgroup></table>\",2);case\"tr\":return l(\"<table><tbody>\"+e+\"</tbody></table>\",2);case\"td\":case\"th\":return l(\"<table><tbody><tr>\"+e+\"</tr></tbody></table>\",3);case\"script\":return l(\"<div>\"+e+\"</div>\",1);default:return l(e,0)}}}function K(e){if(e){e()}}function p(e,t){return Object.prototype.toString.call(e)===\"[object \"+t+\"]\"}function m(e){return p(e,\"Function\")}function x(e){return p(e,\"Object\")}function _(e){var t=\"htmx-internal-data\";var r=e[t];if(!r){r=e[t]={}}return r}function y(e){var t=[];if(e){for(var r=0;r<e.length;r++){t.push(e[r])}}return t}function W(e,t){if(e){for(var r=0;r<e.length;r++){t(e[r])}}}function b(e){var t=e.getBoundingClientRect();var r=t.top;var n=t.bottom;return r<window.innerHeight&&n>=0}function Y(e){if(e.getRootNode()instanceof ShadowRoot){return z().body.contains(e.getRootNode().host)}else{return z().body.contains(e)}}function w(e){return e.trim().split(/\\s+/)}function Q(e,t){for(var r in t){if(t.hasOwnProperty(r)){e[r]=t[r]}}return e}function S(e){try{return JSON.parse(e)}catch(e){pt(e);return null}}function e(e){return Jt(z().body,function(){return eval(e)})}function t(t){var e=U.on(\"htmx:load\",function(e){t(e.detail.elt)});return e}function E(){U.logger=function(e,t,r){if(console){console.log(t,e,r)}}}function C(e,t){if(t){return e.querySelector(t)}else{return C(z(),e)}}function R(e,t){if(t){return e.querySelectorAll(t)}else{return R(z(),e)}}function O(e,t){e=k(e);if(t){setTimeout(function(){O(e)},t)}else{e.parentElement.removeChild(e)}}function L(e,t,r){e=k(e);if(r){setTimeout(function(){L(e,t)},r)}else{e.classList&&e.classList.add(t)}}function q(e,t,r){e=k(e);if(r){setTimeout(function(){q(e,t)},r)}else{if(e.classList){e.classList.remove(t);if(e.classList.length===0){e.removeAttribute(\"class\")}}}}function A(e,t){e=k(e);e.classList.toggle(t)}function T(e,t){e=k(e);W(e.parentElement.children,function(e){q(e,t)});L(e,t)}function H(e,t){e=k(e);if(e.closest){return e.closest(t)}else{do{if(e==null||d(e,t)){return e}}while(e=e&&u(e))}}function N(e,t){if(t.indexOf(\"closest \")===0){return[H(e,t.substr(8))]}else if(t.indexOf(\"find \")===0){return[C(e,t.substr(5))]}else if(t===\"document\"){return[document]}else if(t===\"window\"){return[window]}else{return z().querySelectorAll(t)}}function ee(e,t){if(t){return N(e,t)[0]}else{return N(z().body,e)[0]}}function k(e){if(p(e,\"String\")){return C(e)}else{return e}}function I(e,t,r){if(m(t)){return{target:z().body,event:e,listener:t}}else{return{target:k(e),event:t,listener:r}}}function M(t,r,n){lr(function(){var e=I(t,r,n);e.target.addEventListener(e.event,e.listener)});var e=m(r);return e?r:n}function D(t,r,n){lr(function(){var e=I(t,r,n);e.target.removeEventListener(e.event,e.listener)});return m(r)?r:n}var te=z().createElement(\"output\");function F(e,t){var r=G(e,t);if(r){if(r===\"this\"){return[re(e,t)]}else{var n=N(e,r);if(n.length===0){pt('The selector \"'+r+'\" on '+t+\" returned no matches!\");return[te]}else{return n}}}}function re(e,t){return h(e,function(e){return V(e,t)!=null})}function ne(e){var t=G(e,\"hx-target\");if(t){if(t===\"this\"){return re(e,\"hx-target\")}else{return ee(e,t)}}else{var r=_(e);if(r.boosted){return z().body}else{return e}}}function P(e){var t=U.config.attributesToSettle;for(var r=0;r<t.length;r++){if(e===t[r]){return true}}return false}function X(t,r){W(t.attributes,function(e){if(!r.hasAttribute(e.name)&&P(e.name)){t.removeAttribute(e.name)}});W(r.attributes,function(e){if(P(e.name)){t.setAttribute(e.name,e.value)}})}function j(e,t){var r=sr(t);for(var n=0;n<r.length;n++){var i=r[n];try{if(i.isInlineSwap(e)){return true}}catch(e){pt(e)}}return e===\"outerHTML\"}function B(e,i,o){var t=\"#\"+i.id;var a=\"outerHTML\";if(e===\"true\"){}else if(e.indexOf(\":\")>0){a=e.substr(0,e.indexOf(\":\"));t=e.substr(e.indexOf(\":\")+1,e.length)}else{a=e}var r=z().querySelectorAll(t);if(r){W(r,function(e){var t;var r=i.cloneNode(true);t=z().createDocumentFragment();t.appendChild(r);if(!j(a,e)){t=r}var n={shouldSwap:true,target:e,fragment:t};if(!$(e,\"htmx:oobBeforeSwap\",n))return;e=n.target;if(n[\"shouldSwap\"]){ye(a,e,e,t,o)}W(o.elts,function(e){$(e,\"htmx:oobAfterSwap\",n)})});i.parentNode.removeChild(i)}else{i.parentNode.removeChild(i);J(z().body,\"htmx:oobErrorNoTarget\",{content:i})}return e}function ie(e,r){W(R(e,\"[hx-swap-oob], [data-hx-swap-oob]\"),function(e){var t=V(e,\"hx-swap-oob\");if(t!=null){B(t,e,r)}})}function oe(e){W(R(e,\"[hx-preserve], [data-hx-preserve]\"),function(e){var t=V(e,\"id\");var r=z().getElementById(t);if(r!=null){e.parentNode.replaceChild(r,e)}})}function ae(n,e,i){W(e.querySelectorAll(\"[id]\"),function(e){if(e.id&&e.id.length>0){var t=n.querySelector(e.tagName+\"[id='\"+e.id+\"']\");if(t&&t!==n){var r=e.cloneNode();X(e,t);i.tasks.push(function(){X(e,r)})}}})}function se(e){return function(){q(e,U.config.addedClass);ct(e);at(e);le(e);$(e,\"htmx:load\")}}function le(e){var t=\"[autofocus]\";var r=d(e,t)?e:e.querySelector(t);if(r!=null){r.focus()}}function ue(e,t,r,n){ae(e,r,n);while(r.childNodes.length>0){var i=r.firstChild;L(i,U.config.addedClass);e.insertBefore(i,t);if(i.nodeType!==Node.TEXT_NODE&&i.nodeType!==Node.COMMENT_NODE){n.tasks.push(se(i))}}}function fe(t){var e=_(t);if(e.webSocket){e.webSocket.close()}if(e.sseEventSource){e.sseEventSource.close()}$(t,\"htmx:beforeCleanupElement\");if(e.listenerInfos){W(e.listenerInfos,function(e){if(t!==e.on){e.on.removeEventListener(e.trigger,e.listener)}})}if(t.children){W(t.children,function(e){fe(e)})}}function ce(e,t,r){if(e.tagName===\"BODY\"){return me(e,t,r)}else{var n;var i=e.previousSibling;ue(u(e),e,t,r);if(i==null){n=u(e).firstChild}else{n=i.nextSibling}_(e).replacedWith=n;r.elts=[];while(n&&n!==e){if(n.nodeType===Node.ELEMENT_NODE){r.elts.push(n)}n=n.nextElementSibling}fe(e);u(e).removeChild(e)}}function he(e,t,r){return ue(e,e.firstChild,t,r)}function de(e,t,r){return ue(u(e),e,t,r)}function ve(e,t,r){return ue(e,null,t,r)}function ge(e,t,r){return ue(u(e),e.nextSibling,t,r)}function pe(e,t,r){fe(e);return u(e).removeChild(e)}function me(e,t,r){var n=e.firstChild;ue(e,n,t,r);if(n){while(n.nextSibling){fe(n.nextSibling);e.removeChild(n.nextSibling)}fe(n);e.removeChild(n)}}function xe(e,t){var r=G(e,\"hx-select\");if(r){var n=z().createDocumentFragment();W(t.querySelectorAll(r),function(e){n.appendChild(e)});t=n}return t}function ye(e,t,r,n,i){switch(e){case\"none\":return;case\"outerHTML\":ce(r,n,i);return;case\"afterbegin\":he(r,n,i);return;case\"beforebegin\":de(r,n,i);return;case\"beforeend\":ve(r,n,i);return;case\"afterend\":ge(r,n,i);return;case\"delete\":pe(r,n,i);return;default:var o=sr(t);for(var a=0;a<o.length;a++){var f=o[a];try{var s=f.handleSwap(e,r,n,i);if(s){if(typeof s.length!==\"undefined\"){for(var l=0;l<s.length;l++){var u=s[l];if(u.nodeType!==Node.TEXT_NODE&&u.nodeType!==Node.COMMENT_NODE){i.tasks.push(se(u))}}}return}}catch(e){pt(e)}}if(e===\"innerHTML\"){me(r,n,i)}else{ye(U.config.defaultSwapStyle,t,r,n,i)}}}function be(e){if(e.indexOf(\"<title\")>-1){var t=e.replace(/<svg(\\s[^>]*>|>)([\\s\\S]*?)<\\/svg>/gim,\"\");var r=t.match(/<title(\\s[^>]*>|>)([\\s\\S]*?)<\\/title>/im);if(r){return r[2]}}}function we(e,t,r,n,i){i.title=be(n);var o=g(n);if(o){ie(o,i);o=xe(r,o);oe(o);return ye(e,r,t,o,i)}}function Se(e,t,r){var n=e.getResponseHeader(t);if(n.indexOf(\"{\")===0){var i=S(n);for(var o in i){if(i.hasOwnProperty(o)){var a=i[o];if(!x(a)){a={value:a}}$(r,o,a)}}}else{$(r,n,[])}}var Ee=/\\s/;var Ce=/[\\s,]/;var Re=/[_$a-zA-Z]/;var Oe=/[_$a-zA-Z0-9]/;var Le=['\"',\"'\",\"/\"];var qe=/[^\\s]/;function Ae(e){var t=[];var r=0;while(r<e.length){if(Re.exec(e.charAt(r))){var n=r;while(Oe.exec(e.charAt(r+1))){r++}t.push(e.substr(n,r-n+1))}else if(Le.indexOf(e.charAt(r))!==-1){var i=e.charAt(r);var n=r;r++;while(r<e.length&&e.charAt(r)!==i){if(e.charAt(r)===\"\\\\\"){r++}r++}t.push(e.substr(n,r-n+1))}else{var o=e.charAt(r);t.push(o)}r++}return t}function Te(e,t,r){return Re.exec(e.charAt(0))&&e!==\"true\"&&e!==\"false\"&&e!==\"this\"&&e!==r&&t!==\".\"}function He(e,t,r){if(t[0]===\"[\"){t.shift();var n=1;var i=\" return (function(\"+r+\"){ return (\";var o=null;while(t.length>0){var a=t[0];if(a===\"]\"){n--;if(n===0){if(o===null){i=i+\"true\"}t.shift();i+=\")})\";try{var s=Jt(e,function(){return Function(i)()},function(){return true});s.source=i;return s}catch(e){J(z().body,\"htmx:syntax:error\",{error:e,source:i});return null}}}else if(a===\"[\"){n++}if(Te(a,o,r)){i+=\"((\"+r+\".\"+a+\") ? (\"+r+\".\"+a+\") : (window.\"+a+\"))\"}else{i=i+a}o=t.shift()}}}function c(e,t){var r=\"\";while(e.length>0&&!e[0].match(t)){r+=e.shift()}return r}var Ne=\"input, textarea, select\";function ke(e){var t=V(e,\"hx-trigger\");var r=[];if(t){var n=Ae(t);do{c(n,qe);var f=n.length;var i=c(n,/[,\\[\\s]/);if(i!==\"\"){if(i===\"every\"){var o={trigger:\"every\"};c(n,qe);o.pollInterval=v(c(n,/[,\\[\\s]/));c(n,qe);var a=He(e,n,\"event\");if(a){o.eventFilter=a}r.push(o)}else if(i.indexOf(\"sse:\")===0){r.push({trigger:\"sse\",sseEvent:i.substr(4)})}else{var s={trigger:i};var a=He(e,n,\"event\");if(a){s.eventFilter=a}while(n.length>0&&n[0]!==\",\"){c(n,qe);var l=n.shift();if(l===\"changed\"){s.changed=true}else if(l===\"once\"){s.once=true}else if(l===\"consume\"){s.consume=true}else if(l===\"delay\"&&n[0]===\":\"){n.shift();s.delay=v(c(n,Ce))}else if(l===\"from\"&&n[0]===\":\"){n.shift();var u=c(n,Ce);if(u===\"closest\"||u===\"find\"){n.shift();u+=\" \"+c(n,Ce)}s.from=u}else if(l===\"target\"&&n[0]===\":\"){n.shift();s.target=c(n,Ce)}else if(l===\"throttle\"&&n[0]===\":\"){n.shift();s.throttle=v(c(n,Ce))}else if(l===\"queue\"&&n[0]===\":\"){n.shift();s.queue=c(n,Ce)}else if((l===\"root\"||l===\"threshold\")&&n[0]===\":\"){n.shift();s[l]=c(n,Ce)}else{J(e,\"htmx:syntax:error\",{token:n.shift()})}}r.push(s)}}if(n.length===f){J(e,\"htmx:syntax:error\",{token:n.shift()})}c(n,qe)}while(n[0]===\",\"&&n.shift())}if(r.length>0){return r}else if(d(e,\"form\")){return[{trigger:\"submit\"}]}else if(d(e,Ne)){return[{trigger:\"change\"}]}else{return[{trigger:\"click\"}]}}function Ie(e){_(e).cancelled=true}function Me(e,t,r,n){var i=_(e);i.timeout=setTimeout(function(){if(Y(e)&&i.cancelled!==true){if(!je(n,dt(\"hx:poll:trigger\",{triggerSpec:n,target:e}))){Z(t,r,e)}Me(e,t,V(e,\"hx-\"+t),n)}},n.pollInterval)}function De(e){return location.hostname===e.hostname&&f(e,\"href\")&&f(e,\"href\").indexOf(\"#\")!==0}function Fe(t,r,e){if(t.tagName===\"A\"&&De(t)&&t.target===\"\"||t.tagName===\"FORM\"){r.boosted=true;var n,i;if(t.tagName===\"A\"){n=\"get\";i=f(t,\"href\");r.pushURL=true}else{var o=f(t,\"method\");n=o?o.toLowerCase():\"get\";if(n===\"get\"){r.pushURL=true}i=f(t,\"action\")}e.forEach(function(e){Be(t,n,i,r,e,true)})}}function Pe(e,t){if(e.type===\"submit\"||e.type===\"click\"){if(t.tagName===\"FORM\"){return true}if(d(t,'input[type=\"submit\"], button')&&H(t,\"form\")!==null){return true}if(t.tagName===\"A\"&&t.href&&(t.getAttribute(\"href\")===\"#\"||t.getAttribute(\"href\").indexOf(\"#\")!==0)){return true}}return false}function Xe(e,t){return _(e).boosted&&e.tagName===\"A\"&&t.type===\"click\"&&(t.ctrlKey||t.metaKey)}function je(e,t){var r=e.eventFilter;if(r){try{return r(t)!==true}catch(e){J(z().body,\"htmx:eventFilter:error\",{error:e,source:r.source});return true}}return false}function Be(o,a,s,e,l,u){var t;if(l.from){t=N(o,l.from)}else{t=[o]}W(t,function(n){var i=function(e){if(!Y(o)){n.removeEventListener(l.trigger,i);return}if(Xe(o,e)){return}if(u||Pe(e,o)){e.preventDefault()}if(je(l,e)){return}var t=_(e);t.triggerSpec=l;if(t.handledFor==null){t.handledFor=[]}var r=_(o);if(t.handledFor.indexOf(o)<0){t.handledFor.push(o);if(l.consume){e.stopPropagation()}if(l.target&&e.target){if(!d(e.target,l.target)){return}}if(l.once){if(r.triggeredOnce){return}else{r.triggeredOnce=true}}if(l.changed){if(r.lastValue===o.value){return}else{r.lastValue=o.value}}if(r.delayed){clearTimeout(r.delayed)}if(r.throttle){return}if(l.throttle){if(!r.throttle){Z(a,s,o,e);r.throttle=setTimeout(function(){r.throttle=null},l.throttle)}}else if(l.delay){r.delayed=setTimeout(function(){Z(a,s,o,e)},l.delay)}else{Z(a,s,o,e)}}};if(e.listenerInfos==null){e.listenerInfos=[]}e.listenerInfos.push({trigger:l.trigger,listener:i,on:n});n.addEventListener(l.trigger,i)})}var Ue=false;var Ve=null;function ze(){if(!Ve){Ve=function(){Ue=true};window.addEventListener(\"scroll\",Ve);setInterval(function(){if(Ue){Ue=false;W(z().querySelectorAll(\"[hx-trigger='revealed'],[data-hx-trigger='revealed']\"),function(e){_e(e)})}},200)}}function _e(e){if(!s(e,\"data-hx-revealed\")&&b(e)){e.setAttribute(\"data-hx-revealed\",\"true\");var t=_(e);if(t.initialized){Z(t.verb,t.path,e)}else{e.addEventListener(\"htmx:afterProcessNode\",function(){Z(t.verb,t.path,e)},{once:true})}}}function We(e,t,r){var n=w(r);for(var i=0;i<n.length;i++){var o=n[i].split(/:(.+)/);if(o[0]===\"connect\"){Je(e,o[1],0)}if(o[0]===\"send\"){Ze(e)}}}function Je(s,r,n){if(!Y(s)){return}if(r.indexOf(\"/\")==0){var e=location.hostname+(location.port?\":\"+location.port:\"\");if(location.protocol==\"https:\"){r=\"wss://\"+e+r}else if(location.protocol==\"http:\"){r=\"ws://\"+e+r}}var t=U.createWebSocket(r);t.onerror=function(e){J(s,\"htmx:wsError\",{error:e,socket:t});$e(s)};t.onclose=function(e){if([1006,1012,1013].indexOf(e.code)>=0){var t=Ge(n);setTimeout(function(){Je(s,r,n+1)},t)}};t.onopen=function(e){n=0};_(s).webSocket=t;t.addEventListener(\"message\",function(e){if($e(s)){return}var t=e.data;gt(s,function(e){t=e.transformResponse(t,null,s)});var r=zt(s);var n=g(t);var i=y(n.children);for(var o=0;o<i.length;o++){var a=i[o];B(V(a,\"hx-swap-oob\")||\"true\",a,r)}Ct(r.tasks)})}function $e(e){if(!Y(e)){_(e).webSocket.close();return true}}function Ze(u){var f=h(u,function(e){return _(e).webSocket!=null});if(f){u.addEventListener(ke(u)[0].trigger,function(e){var t=_(f).webSocket;var r=Xt(u,f);var n=Mt(u,\"post\");var i=n.errors;var o=n.values;var a=Gt(u);var s=Q(o,a);var l=jt(s,u);l[\"HEADERS\"]=r;if(i&&i.length>0){$(u,\"htmx:validation:halted\",i);return}t.send(JSON.stringify(l));if(Pe(e,u)){e.preventDefault()}})}else{J(u,\"htmx:noWebSocketSourceError\")}}function Ge(e){var t=U.config.wsReconnectDelay;if(typeof t===\"function\"){return t(e)}if(t===\"full-jitter\"){var r=Math.min(e,6);var n=1e3*Math.pow(2,r);return n*Math.random()}pt('htmx.config.wsReconnectDelay must either be a function or the string \"full-jitter\"')}function Ke(e,t,r){var n=w(r);for(var i=0;i<n.length;i++){var o=n[i].split(/:(.+)/);if(o[0]===\"connect\"){Ye(e,o[1])}if(o[0]===\"swap\"){Qe(e,o[1])}}}function Ye(t,e){var r=U.createEventSource(e);r.onerror=function(e){J(t,\"htmx:sseError\",{error:e,source:r});tt(t)};_(t).sseEventSource=r}function Qe(o,a){var s=h(o,rt);if(s){var l=_(s).sseEventSource;var u=function(e){if(tt(s)){l.removeEventListener(a,u);return}var t=e.data;gt(o,function(e){t=e.transformResponse(t,null,o)});var r=Ut(o);var n=ne(o);var i=zt(o);we(r.swapStyle,o,n,t,i);Ct(i.tasks);$(o,\"htmx:sseMessage\",e)};_(o).sseListener=u;l.addEventListener(a,u)}else{J(o,\"htmx:noSSESourceError\")}}function et(e,t,r,n){var i=h(e,rt);if(i){var o=_(i).sseEventSource;var a=function(){if(!tt(i)){if(Y(e)){Z(t,r,e)}else{o.removeEventListener(n,a)}}};_(e).sseListener=a;o.addEventListener(n,a)}else{J(e,\"htmx:noSSESourceError\")}}function tt(e){if(!Y(e)){_(e).sseEventSource.close();return true}}function rt(e){return _(e).sseEventSource!=null}function nt(e,t,r,n,i){var o=function(){if(!n.loaded){n.loaded=true;Z(t,r,e)}};if(i){setTimeout(o,i)}else{o()}}function it(o,a,e){var t=false;W(n,function(n){if(s(o,\"hx-\"+n)){var i=V(o,\"hx-\"+n);t=true;a.path=i;a.verb=n;e.forEach(function(e){if(e.sseEvent){et(o,n,i,e.sseEvent)}else if(e.trigger===\"revealed\"){ze();_e(o)}else if(e.trigger===\"intersect\"){var t={};if(e.root){t.root=ee(o,e.root)}if(e.threshold){t.threshold=parseFloat(e.threshold)}var r=new IntersectionObserver(function(e){for(var t=0;t<e.length;t++){var r=e[t];if(r.isIntersecting){$(o,\"intersect\");break}}},t);r.observe(o);Be(o,n,i,a,e)}else if(e.trigger===\"load\"){nt(o,n,i,a,e.delay)}else if(e.pollInterval){a.polling=true;Me(o,n,i,e)}else{Be(o,n,i,a,e)}})}});return t}function ot(e){if(e.type===\"text/javascript\"||e.type===\"module\"||e.type===\"\"){var t=z().createElement(\"script\");W(e.attributes,function(e){t.setAttribute(e.name,e.value)});t.textContent=e.textContent;t.async=false;if(U.config.inlineScriptNonce){t.nonce=U.config.inlineScriptNonce}var r=e.parentElement;try{r.insertBefore(t,e)}catch(e){pt(e)}finally{r.removeChild(e)}}}function at(e){if(d(e,\"script\")){ot(e)}W(R(e,\"script\"),function(e){ot(e)})}function st(){return document.querySelector(\"[hx-boost], [data-hx-boost]\")}function lt(e){if(e.querySelectorAll){var t=st()?\", a, form\":\"\";var r=e.querySelectorAll(i+t+\", [hx-sse], [data-hx-sse], [hx-ws],\"+\" [data-hx-ws], [hx-ext], [hx-data-ext]\");return r}else{return[]}}function ut(r){var e=function(e){if(d(e.target,\"button, input[type='submit']\")){var t=_(r);t.lastButtonClicked=e.target}};r.addEventListener(\"click\",e);r.addEventListener(\"focusin\",e);r.addEventListener(\"focusout\",function(e){var t=_(r);t.lastButtonClicked=null})}function ft(e){if(e.closest&&e.closest(U.config.disableSelector)){return}var t=_(e);if(!t.initialized){t.initialized=true;$(e,\"htmx:beforeProcessNode\");if(e.value){t.lastValue=e.value}var r=ke(e);var n=it(e,t,r);if(!n&&G(e,\"hx-boost\")===\"true\"){Fe(e,t,r)}if(e.tagName===\"FORM\"){ut(e)}var i=V(e,\"hx-sse\");if(i){Ke(e,t,i)}var o=V(e,\"hx-ws\");if(o){We(e,t,o)}$(e,\"htmx:afterProcessNode\")}}function ct(e){e=k(e);ft(e);W(lt(e),function(e){ft(e)})}function ht(e){return e.replace(/([a-z0-9])([A-Z])/g,\"$1-$2\").toLowerCase()}function dt(e,t){var r;if(window.CustomEvent&&typeof window.CustomEvent===\"function\"){r=new CustomEvent(e,{bubbles:true,cancelable:true,detail:t})}else{r=z().createEvent(\"CustomEvent\");r.initCustomEvent(e,true,true,t)}return r}function J(e,t,r){$(e,t,Q({error:t},r))}function vt(e){return e===\"htmx:afterProcessNode\"}function gt(e,t){W(sr(e),function(e){try{t(e)}catch(e){pt(e)}})}function pt(e){if(console.error){console.error(e)}else if(console.log){console.log(\"ERROR: \",e)}}function $(e,t,r){e=k(e);if(r==null){r={}}r[\"elt\"]=e;var n=dt(t,r);if(U.logger&&!vt(t)){U.logger(e,t,r)}if(r.error){pt(r.error);$(e,\"htmx:error\",{errorInfo:r})}var i=e.dispatchEvent(n);var o=ht(t);if(i&&o!==t){var a=dt(o,n.detail);i=i&&e.dispatchEvent(a)}gt(e,function(e){i=i&&e.onEvent(t,n)!==false});return i}var mt=location.pathname+location.search;function xt(){var e=z().querySelector(\"[hx-history-elt],[data-hx-history-elt]\");return e||z().body}function yt(e,t,r,n){var i=S(localStorage.getItem(\"htmx-history-cache\"))||[];for(var o=0;o<i.length;o++){if(i[o].url===e){i.splice(o,1);break}}i.push({url:e,content:t,title:r,scroll:n});while(i.length>U.config.historyCacheSize){i.shift()}while(i.length>0){try{localStorage.setItem(\"htmx-history-cache\",JSON.stringify(i));break}catch(e){J(z().body,\"htmx:historyCacheError\",{cause:e,cache:i});i.shift()}}}function bt(e){var t=S(localStorage.getItem(\"htmx-history-cache\"))||[];for(var r=0;r<t.length;r++){if(t[r].url===e){return t[r]}}return null}function wt(e){var t=U.config.requestClass;var r=e.cloneNode(true);W(R(r,\".\"+t),function(e){q(e,t)});return r.innerHTML}function St(){var e=xt();var t=mt||location.pathname+location.search;$(z().body,\"htmx:beforeHistorySave\",{path:t,historyElt:e});if(U.config.historyEnabled)history.replaceState({htmx:true},z().title,window.location.href);yt(t,wt(e),z().title,window.scrollY)}function Et(e){if(U.config.historyEnabled)history.pushState({htmx:true},\"\",e);mt=e}function Ct(e){W(e,function(e){e.call()})}function Rt(n){var e=new XMLHttpRequest;var i={path:n,xhr:e};$(z().body,\"htmx:historyCacheMiss\",i);e.open(\"GET\",n,true);e.setRequestHeader(\"HX-History-Restore-Request\",\"true\");e.onload=function(){if(this.status>=200&&this.status<400){$(z().body,\"htmx:historyCacheMissLoad\",i);var e=g(this.response);e=e.querySelector(\"[hx-history-elt],[data-hx-history-elt]\")||e;var t=xt();var r=zt(t);me(t,e,r);Ct(r.tasks);mt=n;$(z().body,\"htmx:historyRestore\",{path:n})}else{J(z().body,\"htmx:historyCacheMissLoadError\",i)}};e.send()}function Ot(e){St();e=e||location.pathname+location.search;var t=bt(e);if(t){var r=g(t.content);var n=xt();var i=zt(n);me(n,r,i);Ct(i.tasks);document.title=t.title;window.scrollTo(0,t.scroll);mt=e;$(z().body,\"htmx:historyRestore\",{path:e})}else{if(U.config.refreshOnHistoryMiss){window.location.reload(true)}else{Rt(e)}}}function Lt(e){var t=G(e,\"hx-push-url\");return t&&t!==\"false\"||_(e).boosted&&_(e).pushURL}function qt(e){var t=G(e,\"hx-push-url\");return t===\"true\"||t===\"false\"?null:t}function At(e){var t=F(e,\"hx-indicator\");if(t==null){t=[e]}W(t,function(e){e.classList[\"add\"].call(e.classList,U.config.requestClass)});return t}function Tt(e){W(e,function(e){e.classList[\"remove\"].call(e.classList,U.config.requestClass)})}function Ht(e,t){for(var r=0;r<e.length;r++){var n=e[r];if(n.isSameNode(t)){return true}}return false}function Nt(e){if(e.name===\"\"||e.name==null||e.disabled){return false}if(e.type===\"button\"||e.type===\"submit\"||e.tagName===\"image\"||e.tagName===\"reset\"||e.tagName===\"file\"){return false}if(e.type===\"checkbox\"||e.type===\"radio\"){return e.checked}return true}function kt(t,r,n,e,i){if(e==null||Ht(t,e)){return}else{t.push(e)}if(Nt(e)){var o=f(e,\"name\");var a=e.value;if(e.multiple){a=y(e.querySelectorAll(\"option:checked\")).map(function(e){return e.value})}if(e.files){a=y(e.files)}if(o!=null&&a!=null){var s=r[o];if(s){if(Array.isArray(s)){if(Array.isArray(a)){r[o]=s.concat(a)}else{s.push(a)}}else{if(Array.isArray(a)){r[o]=[s].concat(a)}else{r[o]=[s,a]}}}else{r[o]=a}}if(i){It(e,n)}}if(d(e,\"form\")){var l=e.elements;W(l,function(e){kt(t,r,n,e,i)})}}function It(e,t){if(e.willValidate){$(e,\"htmx:validation:validate\");if(!e.checkValidity()){t.push({elt:e,message:e.validationMessage,validity:e.validity});$(e,\"htmx:validation:failed\",{message:e.validationMessage,validity:e.validity})}}}function Mt(e,t){var r=[];var n={};var i={};var o=[];var a=_(e);var s=d(e,\"form\")&&e.noValidate!==true;if(a.lastButtonClicked){s=s&&a.lastButtonClicked.formNoValidate!==true}if(t!==\"get\"){kt(r,i,o,H(e,\"form\"),s)}kt(r,n,o,e,s);if(a.lastButtonClicked){var l=f(a.lastButtonClicked,\"name\");if(l){n[l]=a.lastButtonClicked.value}}var u=F(e,\"hx-include\");W(u,function(e){kt(r,n,o,e,s);if(!d(e,\"form\")){W(e.querySelectorAll(Ne),function(e){kt(r,n,o,e,s)})}});n=Q(n,i);return{errors:o,values:n}}function Dt(e,t,r){if(e!==\"\"){e+=\"&\"}if(String(r)===\"[object Object]\"){r=JSON.stringify(r)}var n=encodeURIComponent(r);e+=encodeURIComponent(t)+\"=\"+n;return e}function Ft(e){var t=\"\";for(var r in e){if(e.hasOwnProperty(r)){var n=e[r];if(Array.isArray(n)){W(n,function(e){t=Dt(t,r,e)})}else{t=Dt(t,r,n)}}}return t}function Pt(e){var t=new FormData;for(var r in e){if(e.hasOwnProperty(r)){var n=e[r];if(Array.isArray(n)){W(n,function(e){t.append(r,e)})}else{t.append(r,n)}}}return t}function Xt(e,t,r){var n={\"HX-Request\":\"true\",\"HX-Trigger\":f(e,\"id\"),\"HX-Trigger-Name\":f(e,\"name\"),\"HX-Target\":V(t,\"id\"),\"HX-Current-URL\":z().location.href};Wt(e,\"hx-headers\",false,n);if(r!==undefined){n[\"HX-Prompt\"]=r}if(_(e).boosted){n[\"HX-Boosted\"]=\"true\"}return n}function jt(t,e){var r=G(e,\"hx-params\");if(r){if(r===\"none\"){return{}}else if(r===\"*\"){return t}else if(r.indexOf(\"not \")===0){W(r.substr(4).split(\",\"),function(e){e=e.trim();delete t[e]});return t}else{var n={};W(r.split(\",\"),function(e){e=e.trim();n[e]=t[e]});return n}}else{return t}}function Bt(e){return f(e,\"href\")&&f(e,\"href\").indexOf(\"#\")>=0}function Ut(e,t){var r=t?t:G(e,\"hx-swap\");var n={swapStyle:_(e).boosted?\"innerHTML\":U.config.defaultSwapStyle,swapDelay:U.config.defaultSwapDelay,settleDelay:U.config.defaultSettleDelay};if(_(e).boosted&&!Bt(e)){n[\"show\"]=\"top\"}if(r){var i=w(r);if(i.length>0){n[\"swapStyle\"]=i[0];for(var o=1;o<i.length;o++){var a=i[o];if(a.indexOf(\"swap:\")===0){n[\"swapDelay\"]=v(a.substr(5))}if(a.indexOf(\"settle:\")===0){n[\"settleDelay\"]=v(a.substr(7))}if(a.indexOf(\"scroll:\")===0){var s=a.substr(7);var l=s.split(\":\");var f=l.pop();var u=l.length>0?l.join(\":\"):null;n[\"scroll\"]=f;n[\"scrollTarget\"]=u}if(a.indexOf(\"show:\")===0){var c=a.substr(5);var l=c.split(\":\");var h=l.pop();var u=l.length>0?l.join(\":\"):null;n[\"show\"]=h;n[\"showTarget\"]=u}if(a.indexOf(\"focus-scroll:\")===0){var d=a.substr(\"focus-scroll:\".length);n[\"focusScroll\"]=d==\"true\"}}}}return n}function Vt(t,r,n){var i=null;gt(r,function(e){if(i==null){i=e.encodeParameters(t,n,r)}});if(i!=null){return i}else{if(G(r,\"hx-encoding\")===\"multipart/form-data\"||d(r,\"form\")&&f(r,\"enctype\")===\"multipart/form-data\"){return Pt(n)}else{return Ft(n)}}}function zt(e){return{tasks:[],elts:[e]}}function _t(e,t){var r=e[0];var n=e[e.length-1];if(t.scroll){var i=null;if(t.scrollTarget){i=ee(r,t.scrollTarget)}if(t.scroll===\"top\"&&(r||i)){i=i||r;i.scrollTop=0}if(t.scroll===\"bottom\"&&(n||i)){i=i||n;i.scrollTop=i.scrollHeight}}if(t.show){var i=null;if(t.showTarget){var o=t.showTarget;if(t.showTarget===\"window\"){o=\"body\"}i=ee(r,o)}if(t.show===\"top\"&&(r||i)){i=i||r;i.scrollIntoView({block:\"start\",behavior:U.config.scrollBehavior})}if(t.show===\"bottom\"&&(n||i)){i=i||n;i.scrollIntoView({block:\"end\",behavior:U.config.scrollBehavior})}}}function Wt(e,t,r,n){if(n==null){n={}}if(e==null){return n}var i=V(e,t);if(i){var o=i.trim();var a=r;if(o.indexOf(\"javascript:\")===0){o=o.substr(11);a=true}else if(o.indexOf(\"js:\")===0){o=o.substr(3);a=true}if(o.indexOf(\"{\")!==0){o=\"{\"+o+\"}\"}var s;if(a){s=Jt(e,function(){return Function(\"return (\"+o+\")\")()},{})}else{s=S(o)}for(var l in s){if(s.hasOwnProperty(l)){if(n[l]==null){n[l]=s[l]}}}}return Wt(u(e),t,r,n)}function Jt(e,t,r){if(U.config.allowEval){return t()}else{J(e,\"htmx:evalDisallowedError\");return r}}function $t(e,t){return Wt(e,\"hx-vars\",true,t)}function Zt(e,t){return Wt(e,\"hx-vals\",false,t)}function Gt(e){return Q($t(e),Zt(e))}function Kt(t,r,n){if(n!==null){try{t.setRequestHeader(r,n)}catch(e){t.setRequestHeader(r,encodeURIComponent(n));t.setRequestHeader(r+\"-URI-AutoEncoded\",\"true\")}}}function Yt(t){if(t.responseURL&&typeof URL!==\"undefined\"){try{var e=new URL(t.responseURL);return e.pathname+e.search}catch(e){J(z().body,\"htmx:badResponseUrl\",{url:t.responseURL})}}}function Qt(e,t){return e.getAllResponseHeaders().match(t)}function er(e,t,r){e=e.toLowerCase();if(r){if(r instanceof Element||p(r,\"String\")){return Z(e,t,null,null,{targetOverride:k(r),returnPromise:true})}else{return Z(e,t,k(r.source),r.event,{handler:r.handler,headers:r.headers,values:r.values,targetOverride:k(r.target),swapOverride:r.swap,returnPromise:true})}}else{return Z(e,t,null,null,{returnPromise:true})}}function tr(e){var t=[];while(e){t.push(e);e=e.parentElement}return t}function Z(e,t,n,f,r){var c=null;var h=null;r=r!=null?r:{};if(r.returnPromise&&typeof Promise!==\"undefined\"){var d=new Promise(function(e,t){c=e;h=t})}if(n==null){n=z().body}var v=r.handler||rr;if(!Y(n)){return}var g=r.targetOverride||ne(n);if(g==null||g==te){J(n,\"htmx:targetError\",{target:V(n,\"hx-target\")});return}var p=n;var i=_(n);var o=G(n,\"hx-sync\");var m=null;var x=false;if(o){var y=o.split(\":\");var b=y[0].trim();if(b===\"this\"){p=re(n,\"hx-sync\")}else{p=ee(n,b)}o=(y[1]||\"drop\").trim();i=_(p);if(o===\"drop\"&&i.xhr&&i.abortable!==true){return}else if(o===\"abort\"){if(i.xhr){return}else{x=true}}else if(o===\"replace\"){$(p,\"htmx:abort\")}else if(o.indexOf(\"queue\")===0){var w=o.split(\" \");m=(w[1]||\"last\").trim()}}if(i.xhr){if(i.abortable){$(p,\"htmx:abort\")}else{if(m==null){if(f){var S=_(f);if(S&&S.triggerSpec&&S.triggerSpec.queue){m=S.triggerSpec.queue}}if(m==null){m=\"last\"}}if(i.queuedRequests==null){i.queuedRequests=[]}if(m===\"first\"&&i.queuedRequests.length===0){i.queuedRequests.push(function(){Z(e,t,n,f,r)})}else if(m===\"all\"){i.queuedRequests.push(function(){Z(e,t,n,f,r)})}else if(m===\"last\"){i.queuedRequests=[];i.queuedRequests.push(function(){Z(e,t,n,f,r)})}return}}var a=new XMLHttpRequest;i.xhr=a;i.abortable=x;var s=function(){i.xhr=null;i.abortable=false;if(i.queuedRequests!=null&&i.queuedRequests.length>0){var e=i.queuedRequests.shift();e()}};var E=G(n,\"hx-prompt\");if(E){var C=prompt(E);if(C===null||!$(n,\"htmx:prompt\",{prompt:C,target:g})){K(c);s();return d}}var R=G(n,\"hx-confirm\");if(R){if(!confirm(R)){K(c);s();return d}}var O=Xt(n,g,C);if(r.headers){O=Q(O,r.headers)}var L=Mt(n,e);var q=L.errors;var A=L.values;if(r.values){A=Q(A,r.values)}var T=Gt(n);var H=Q(A,T);var N=jt(H,n);if(e!==\"get\"&&G(n,\"hx-encoding\")==null){O[\"Content-Type\"]=\"application/x-www-form-urlencoded\"}if(t==null||t===\"\"){t=z().location.href}var k=Wt(n,\"hx-request\");var l={parameters:N,unfilteredParameters:H,headers:O,target:g,verb:e,errors:q,withCredentials:r.credentials||k.credentials||U.config.withCredentials,timeout:r.timeout||k.timeout||U.config.timeout,path:t,triggeringEvent:f};if(!$(n,\"htmx:configRequest\",l)){K(c);s();return d}t=l.path;e=l.verb;O=l.headers;N=l.parameters;q=l.errors;if(q&&q.length>0){$(n,\"htmx:validation:halted\",l);K(c);s();return d}var I=t.split(\"#\");var M=I[0];var D=I[1];if(e===\"get\"){var F=M;var P=Object.keys(N).length!==0;if(P){if(F.indexOf(\"?\")<0){F+=\"?\"}else{F+=\"&\"}F+=Ft(N);if(D){F+=\"#\"+D}}a.open(\"GET\",F,true)}else{a.open(e.toUpperCase(),t,true)}a.overrideMimeType(\"text/html\");a.withCredentials=l.withCredentials;a.timeout=l.timeout;if(k.noHeaders){}else{for(var X in O){if(O.hasOwnProperty(X)){var j=O[X];Kt(a,X,j)}}}var u={xhr:a,target:g,requestConfig:l,etc:r,pathInfo:{path:t,finalPath:F,anchor:D}};a.onload=function(){try{var e=tr(n);v(n,u);Tt(B);$(n,\"htmx:afterRequest\",u);$(n,\"htmx:afterOnLoad\",u);if(!Y(n)){var t=null;while(e.length>0&&t==null){var r=e.shift();if(Y(r)){t=r}}if(t){$(t,\"htmx:afterRequest\",u);$(t,\"htmx:afterOnLoad\",u)}}K(c);s()}catch(e){J(n,\"htmx:onLoadError\",Q({error:e},u));throw e}};a.onerror=function(){Tt(B);J(n,\"htmx:afterRequest\",u);J(n,\"htmx:sendError\",u);K(h);s()};a.onabort=function(){Tt(B);J(n,\"htmx:afterRequest\",u);J(n,\"htmx:sendAbort\",u);K(h);s()};a.ontimeout=function(){Tt(B);J(n,\"htmx:afterRequest\",u);J(n,\"htmx:timeout\",u);K(h);s()};if(!$(n,\"htmx:beforeRequest\",u)){K(c);s();return d}var B=At(n);W([\"loadstart\",\"loadend\",\"progress\",\"abort\"],function(t){W([a,a.upload],function(e){e.addEventListener(t,function(e){$(n,\"htmx:xhr:\"+t,{lengthComputable:e.lengthComputable,loaded:e.loaded,total:e.total})})})});$(n,\"htmx:beforeSend\",u);a.send(e===\"get\"?null:Vt(a,n,N));return d}function rr(s,l){var u=l.xhr;var f=l.target;var r=l.etc;if(!$(s,\"htmx:beforeOnLoad\",l))return;if(Qt(u,/HX-Trigger:/i)){Se(u,\"HX-Trigger\",s)}if(Qt(u,/HX-Push:/i)){var c=u.getResponseHeader(\"HX-Push\")}if(Qt(u,/HX-Redirect:/i)){window.location.href=u.getResponseHeader(\"HX-Redirect\");return}if(Qt(u,/HX-Refresh:/i)){if(\"true\"===u.getResponseHeader(\"HX-Refresh\")){location.reload();return}}if(Qt(u,/HX-Retarget:/i)){l.target=z().querySelector(u.getResponseHeader(\"HX-Retarget\"))}var h;if(c==\"false\"){h=false}else{h=Lt(s)||c}var n=u.status>=200&&u.status<400&&u.status!==204;var d=u.response;var e=u.status>=400;var t=Q({shouldSwap:n,serverResponse:d,isError:e},l);if(!$(f,\"htmx:beforeSwap\",t))return;f=t.target;d=t.serverResponse;e=t.isError;l.failed=e;l.successful=!e;if(t.shouldSwap){if(u.status===286){Ie(s)}gt(s,function(e){d=e.transformResponse(d,u,s)});if(h){St()}var i=r.swapOverride;var v=Ut(s,i);f.classList.add(U.config.swappingClass);var o=function(){try{var e=document.activeElement;var t={};try{t={elt:e,start:e?e.selectionStart:null,end:e?e.selectionEnd:null}}catch(e){}var n=zt(f);we(v.swapStyle,f,s,d,n);if(t.elt&&!Y(t.elt)&&t.elt.id){var r=document.getElementById(t.elt.id);var i={preventScroll:v.focusScroll!==undefined?!v.focusScroll:!U.config.defaultFocusScroll};if(r){if(t.start&&r.setSelectionRange){r.setSelectionRange(t.start,t.end)}r.focus(i)}}f.classList.remove(U.config.swappingClass);W(n.elts,function(e){if(e.classList){e.classList.add(U.config.settlingClass)}$(e,\"htmx:afterSwap\",l)});if(l.pathInfo.anchor){location.hash=l.pathInfo.anchor}if(Qt(u,/HX-Trigger-After-Swap:/i)){var o=s;if(!Y(s)){o=z().body}Se(u,\"HX-Trigger-After-Swap\",o)}var a=function(){W(n.tasks,function(e){e.call()});W(n.elts,function(e){if(e.classList){e.classList.remove(U.config.settlingClass)}$(e,\"htmx:afterSettle\",l)});if(h){var e=c||qt(s)||Yt(u)||l.pathInfo.finalPath||l.pathInfo.path;Et(e);$(z().body,\"htmx:pushedIntoHistory\",{path:e})}if(n.title){var t=C(\"title\");if(t){t.innerHTML=n.title}else{window.document.title=n.title}}_t(n.elts,v);if(Qt(u,/HX-Trigger-After-Settle:/i)){var r=s;if(!Y(s)){r=z().body}Se(u,\"HX-Trigger-After-Settle\",r)}};if(v.settleDelay>0){setTimeout(a,v.settleDelay)}else{a()}}catch(e){J(s,\"htmx:swapError\",l);throw e}};if(v.swapDelay>0){setTimeout(o,v.swapDelay)}else{o()}}if(e){J(s,\"htmx:responseError\",Q({error:\"Response Status Error Code \"+u.status+\" from \"+l.pathInfo.path},l))}}var nr={};function ir(){return{init:function(e){return null},onEvent:function(e,t){return true},transformResponse:function(e,t,r){return e},isInlineSwap:function(e){return false},handleSwap:function(e,t,r,n){return false},encodeParameters:function(e,t,r){return null}}}function or(e,t){if(t.init){t.init(r)}nr[e]=Q(ir(),t)}function ar(e){delete nr[e]}function sr(e,r,n){if(e==undefined){return r}if(r==undefined){r=[]}if(n==undefined){n=[]}var t=V(e,\"hx-ext\");if(t){W(t.split(\",\"),function(e){e=e.replace(/ /g,\"\");if(e.slice(0,7)==\"ignore:\"){n.push(e.slice(7));return}if(n.indexOf(e)<0){var t=nr[e];if(t&&r.indexOf(t)<0){r.push(t)}}})}return sr(u(e),r,n)}function lr(e){if(z().readyState!==\"loading\"){e()}else{z().addEventListener(\"DOMContentLoaded\",e)}}function ur(){if(U.config.includeIndicatorStyles!==false){z().head.insertAdjacentHTML(\"beforeend\",\"<style>                      .\"+U.config.indicatorClass+\"{opacity:0;transition: opacity 200ms ease-in;}                      .\"+U.config.requestClass+\" .\"+U.config.indicatorClass+\"{opacity:1}                      .\"+U.config.requestClass+\".\"+U.config.indicatorClass+\"{opacity:1}                    </style>\")}}function fr(){var e=z().querySelector('meta[name=\"htmx-config\"]');if(e){return S(e.content)}else{return null}}function cr(){var e=fr();if(e){U.config=Q(U.config,e)}}lr(function(){cr();ur();var e=z().body;ct(e);var t=z().querySelectorAll(\"[hx-trigger='restored'],[data-hx-trigger='restored']\");e.addEventListener(\"htmx:abort\",function(e){var t=e.target;var r=_(t);if(r&&r.xhr){r.xhr.abort()}});window.onpopstate=function(e){if(e.state&&e.state.htmx){Ot();W(t,function(e){$(e,\"htmx:restored\",{document:z(),triggerEvent:$})})}};setTimeout(function(){$(e,\"htmx:load\",{})},0)});return U}()});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/htmx.org/dist/htmx.min.js\n");

/***/ }),

/***/ "./assets/css/app.scss":
/*!*****************************!*\
  !*** ./assets/css/app.scss ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY3NzL2FwcC5zY3NzPzAwNTkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBIiwiZmlsZSI6Ii4vYXNzZXRzL2Nzcy9hcHAuc2Nzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./assets/css/app.scss\n");

/***/ }),

/***/ "./node_modules/popper.js/dist/esm/popper.js":
/*!***************************************************!*\
  !*** ./node_modules/popper.js/dist/esm/popper.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**!\n * @fileOverview Kickass library to create and place poppers near their reference elements.\n * @version 1.16.1\n * @license\n * Copyright (c) 2016 Federico Zivolo and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && typeof navigator !== 'undefined';\n\nvar timeoutDuration = function () {\n  var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];\n  for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {\n    if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\n      return 1;\n    }\n  }\n  return 0;\n}();\n\nfunction microtaskDebounce(fn) {\n  var called = false;\n  return function () {\n    if (called) {\n      return;\n    }\n    called = true;\n    window.Promise.resolve().then(function () {\n      called = false;\n      fn();\n    });\n  };\n}\n\nfunction taskDebounce(fn) {\n  var scheduled = false;\n  return function () {\n    if (!scheduled) {\n      scheduled = true;\n      setTimeout(function () {\n        scheduled = false;\n        fn();\n      }, timeoutDuration);\n    }\n  };\n}\n\nvar supportsMicroTasks = isBrowser && window.Promise;\n\n/**\n* Create a debounced version of a method, that's asynchronously deferred\n* but called in the minimum time possible.\n*\n* @method\n* @memberof Popper.Utils\n* @argument {Function} fn\n* @returns {Function}\n*/\nvar debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;\n\n/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\nfunction isFunction(functionToCheck) {\n  var getType = {};\n  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\n}\n\n/**\n * Get CSS computed property of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Eement} element\n * @argument {String} property\n */\nfunction getStyleComputedProperty(element, property) {\n  if (element.nodeType !== 1) {\n    return [];\n  }\n  // NOTE: 1 DOM access here\n  var window = element.ownerDocument.defaultView;\n  var css = window.getComputedStyle(element, null);\n  return property ? css[property] : css;\n}\n\n/**\n * Returns the parentNode or the host of the element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} parent\n */\nfunction getParentNode(element) {\n  if (element.nodeName === 'HTML') {\n    return element;\n  }\n  return element.parentNode || element.host;\n}\n\n/**\n * Returns the scrolling parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} scroll parent\n */\nfunction getScrollParent(element) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  if (!element) {\n    return document.body;\n  }\n\n  switch (element.nodeName) {\n    case 'HTML':\n    case 'BODY':\n      return element.ownerDocument.body;\n    case '#document':\n      return element.body;\n  }\n\n  // Firefox want us to check `-x` and `-y` variations as well\n\n  var _getStyleComputedProp = getStyleComputedProperty(element),\n      overflow = _getStyleComputedProp.overflow,\n      overflowX = _getStyleComputedProp.overflowX,\n      overflowY = _getStyleComputedProp.overflowY;\n\n  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {\n    return element;\n  }\n\n  return getScrollParent(getParentNode(element));\n}\n\n/**\n * Returns the reference node of the reference object, or the reference object itself.\n * @method\n * @memberof Popper.Utils\n * @param {Element|Object} reference - the reference element (the popper will be relative to this)\n * @returns {Element} parent\n */\nfunction getReferenceNode(reference) {\n  return reference && reference.referenceNode ? reference.referenceNode : reference;\n}\n\nvar isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);\nvar isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);\n\n/**\n * Determines if the browser is Internet Explorer\n * @method\n * @memberof Popper.Utils\n * @param {Number} version to check\n * @returns {Boolean} isIE\n */\nfunction isIE(version) {\n  if (version === 11) {\n    return isIE11;\n  }\n  if (version === 10) {\n    return isIE10;\n  }\n  return isIE11 || isIE10;\n}\n\n/**\n * Returns the offset parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} offset parent\n */\nfunction getOffsetParent(element) {\n  if (!element) {\n    return document.documentElement;\n  }\n\n  var noOffsetParent = isIE(10) ? document.body : null;\n\n  // NOTE: 1 DOM access here\n  var offsetParent = element.offsetParent || null;\n  // Skip hidden elements which don't have an offsetParent\n  while (offsetParent === noOffsetParent && element.nextElementSibling) {\n    offsetParent = (element = element.nextElementSibling).offsetParent;\n  }\n\n  var nodeName = offsetParent && offsetParent.nodeName;\n\n  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n    return element ? element.ownerDocument.documentElement : document.documentElement;\n  }\n\n  // .offsetParent will return the closest TH, TD or TABLE in case\n  // no offsetParent is present, I hate this job...\n  if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {\n    return getOffsetParent(offsetParent);\n  }\n\n  return offsetParent;\n}\n\nfunction isOffsetContainer(element) {\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY') {\n    return false;\n  }\n  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;\n}\n\n/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} node\n * @returns {Element} root node\n */\nfunction getRoot(node) {\n  if (node.parentNode !== null) {\n    return getRoot(node.parentNode);\n  }\n\n  return node;\n}\n\n/**\n * Finds the offset parent common to the two provided nodes\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element1\n * @argument {Element} element2\n * @returns {Element} common offset parent\n */\nfunction findCommonOffsetParent(element1, element2) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n    return document.documentElement;\n  }\n\n  // Here we make sure to give as \"start\" the element that comes first in the DOM\n  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;\n  var start = order ? element1 : element2;\n  var end = order ? element2 : element1;\n\n  // Get common ancestor container\n  var range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  var commonAncestorContainer = range.commonAncestorContainer;\n\n  // Both nodes are inside #document\n\n  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {\n    if (isOffsetContainer(commonAncestorContainer)) {\n      return commonAncestorContainer;\n    }\n\n    return getOffsetParent(commonAncestorContainer);\n  }\n\n  // one of the nodes is inside shadowDOM, find which one\n  var element1root = getRoot(element1);\n  if (element1root.host) {\n    return findCommonOffsetParent(element1root.host, element2);\n  } else {\n    return findCommonOffsetParent(element1, getRoot(element2).host);\n  }\n}\n\n/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {String} side `top` or `left`\n * @returns {number} amount of scrolled pixels\n */\nfunction getScroll(element) {\n  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';\n\n  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    var html = element.ownerDocument.documentElement;\n    var scrollingElement = element.ownerDocument.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}\n\n/*\n * Sum or subtract the element scroll values (left and top) from a given rect object\n * @method\n * @memberof Popper.Utils\n * @param {Object} rect - Rect object you want to change\n * @param {HTMLElement} element - The element from the function reads the scroll values\n * @param {Boolean} subtract - set to true if you want to subtract the scroll values\n * @return {Object} rect - The modifier rect object\n */\nfunction includeScroll(rect, element) {\n  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var scrollTop = getScroll(element, 'top');\n  var scrollLeft = getScroll(element, 'left');\n  var modifier = subtract ? -1 : 1;\n  rect.top += scrollTop * modifier;\n  rect.bottom += scrollTop * modifier;\n  rect.left += scrollLeft * modifier;\n  rect.right += scrollLeft * modifier;\n  return rect;\n}\n\n/*\n * Helper to detect borders of a given element\n * @method\n * @memberof Popper.Utils\n * @param {CSSStyleDeclaration} styles\n * Result of `getStyleComputedProperty` on the given element\n * @param {String} axis - `x` or `y`\n * @return {number} borders - The borders size of the given axis\n */\n\nfunction getBordersSize(styles, axis) {\n  var sideA = axis === 'x' ? 'Left' : 'Top';\n  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n\n  return parseFloat(styles['border' + sideA + 'Width']) + parseFloat(styles['border' + sideB + 'Width']);\n}\n\nfunction getSize(axis, body, html, computedStyle) {\n  return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);\n}\n\nfunction getWindowSizes(document) {\n  var body = document.body;\n  var html = document.documentElement;\n  var computedStyle = isIE(10) && getComputedStyle(html);\n\n  return {\n    height: getSize('Height', body, html, computedStyle),\n    width: getSize('Width', body, html, computedStyle)\n  };\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\nvar defineProperty = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n/**\n * Given element offsets, generate an output similar to getBoundingClientRect\n * @method\n * @memberof Popper.Utils\n * @argument {Object} offsets\n * @returns {Object} ClientRect like output\n */\nfunction getClientRect(offsets) {\n  return _extends({}, offsets, {\n    right: offsets.left + offsets.width,\n    bottom: offsets.top + offsets.height\n  });\n}\n\n/**\n * Get bounding client rect of given element\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} element\n * @return {Object} client rect\n */\nfunction getBoundingClientRect(element) {\n  var rect = {};\n\n  // IE10 10 FIX: Please, don't ask, the element isn't\n  // considered in DOM in some circumstances...\n  // This isn't reproducible in IE10 compatibility mode of IE11\n  try {\n    if (isIE(10)) {\n      rect = element.getBoundingClientRect();\n      var scrollTop = getScroll(element, 'top');\n      var scrollLeft = getScroll(element, 'left');\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    } else {\n      rect = element.getBoundingClientRect();\n    }\n  } catch (e) {}\n\n  var result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top\n  };\n\n  // subtract scrollbar size from sizes\n  var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};\n  var width = sizes.width || element.clientWidth || result.width;\n  var height = sizes.height || element.clientHeight || result.height;\n\n  var horizScrollbar = element.offsetWidth - width;\n  var vertScrollbar = element.offsetHeight - height;\n\n  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n  // we make this check conditional for performance reasons\n  if (horizScrollbar || vertScrollbar) {\n    var styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, 'x');\n    vertScrollbar -= getBordersSize(styles, 'y');\n\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result);\n}\n\nfunction getOffsetRectRelativeToArbitraryNode(children, parent) {\n  var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var isIE10 = isIE(10);\n  var isHTML = parent.nodeName === 'HTML';\n  var childrenRect = getBoundingClientRect(children);\n  var parentRect = getBoundingClientRect(parent);\n  var scrollParent = getScrollParent(children);\n\n  var styles = getStyleComputedProperty(parent);\n  var borderTopWidth = parseFloat(styles.borderTopWidth);\n  var borderLeftWidth = parseFloat(styles.borderLeftWidth);\n\n  // In cases where the parent is fixed, we must ignore negative scroll in offset calc\n  if (fixedPosition && isHTML) {\n    parentRect.top = Math.max(parentRect.top, 0);\n    parentRect.left = Math.max(parentRect.left, 0);\n  }\n  var offsets = getClientRect({\n    top: childrenRect.top - parentRect.top - borderTopWidth,\n    left: childrenRect.left - parentRect.left - borderLeftWidth,\n    width: childrenRect.width,\n    height: childrenRect.height\n  });\n  offsets.marginTop = 0;\n  offsets.marginLeft = 0;\n\n  // Subtract margins of documentElement in case it's being used as parent\n  // we do this only on HTML because it's the only element that behaves\n  // differently when margins are applied to it. The margins are included in\n  // the box of the documentElement, in the other cases not.\n  if (!isIE10 && isHTML) {\n    var marginTop = parseFloat(styles.marginTop);\n    var marginLeft = parseFloat(styles.marginLeft);\n\n    offsets.top -= borderTopWidth - marginTop;\n    offsets.bottom -= borderTopWidth - marginTop;\n    offsets.left -= borderLeftWidth - marginLeft;\n    offsets.right -= borderLeftWidth - marginLeft;\n\n    // Attach marginTop and marginLeft because in some circumstances we may need them\n    offsets.marginTop = marginTop;\n    offsets.marginLeft = marginLeft;\n  }\n\n  if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {\n    offsets = includeScroll(offsets, parent);\n  }\n\n  return offsets;\n}\n\nfunction getViewportOffsetRectRelativeToArtbitraryNode(element) {\n  var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var html = element.ownerDocument.documentElement;\n  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n  var width = Math.max(html.clientWidth, window.innerWidth || 0);\n  var height = Math.max(html.clientHeight, window.innerHeight || 0);\n\n  var scrollTop = !excludeScroll ? getScroll(html) : 0;\n  var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;\n\n  var offset = {\n    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\n    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\n    width: width,\n    height: height\n  };\n\n  return getClientRect(offset);\n}\n\n/**\n * Check if the given element is fixed or is inside a fixed parent\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {Element} customContainer\n * @returns {Boolean} answer to \"isFixed?\"\n */\nfunction isFixed(element) {\n  var nodeName = element.nodeName;\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    return false;\n  }\n  if (getStyleComputedProperty(element, 'position') === 'fixed') {\n    return true;\n  }\n  var parentNode = getParentNode(element);\n  if (!parentNode) {\n    return false;\n  }\n  return isFixed(parentNode);\n}\n\n/**\n * Finds the first parent of an element that has a transformed property defined\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} first transformed parent or documentElement\n */\n\nfunction getFixedPositionOffsetParent(element) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element || !element.parentElement || isIE()) {\n    return document.documentElement;\n  }\n  var el = element.parentElement;\n  while (el && getStyleComputedProperty(el, 'transform') === 'none') {\n    el = el.parentElement;\n  }\n  return el || document.documentElement;\n}\n\n/**\n * Computed the boundaries limits and return them\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} popper\n * @param {HTMLElement} reference\n * @param {number} padding\n * @param {HTMLElement} boundariesElement - Element used to define the boundaries\n * @param {Boolean} fixedPosition - Is in fixed position mode\n * @returns {Object} Coordinates of the boundaries\n */\nfunction getBoundaries(popper, reference, padding, boundariesElement) {\n  var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n  // NOTE: 1 DOM access here\n\n  var boundaries = { top: 0, left: 0 };\n  var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));\n\n  // Handle viewport case\n  if (boundariesElement === 'viewport') {\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);\n  } else {\n    // Handle other cases based on DOM element used as boundaries\n    var boundariesNode = void 0;\n    if (boundariesElement === 'scrollParent') {\n      boundariesNode = getScrollParent(getParentNode(reference));\n      if (boundariesNode.nodeName === 'BODY') {\n        boundariesNode = popper.ownerDocument.documentElement;\n      }\n    } else if (boundariesElement === 'window') {\n      boundariesNode = popper.ownerDocument.documentElement;\n    } else {\n      boundariesNode = boundariesElement;\n    }\n\n    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);\n\n    // In case of HTML, we need a different computation\n    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n      var _getWindowSizes = getWindowSizes(popper.ownerDocument),\n          height = _getWindowSizes.height,\n          width = _getWindowSizes.width;\n\n      boundaries.top += offsets.top - offsets.marginTop;\n      boundaries.bottom = height + offsets.top;\n      boundaries.left += offsets.left - offsets.marginLeft;\n      boundaries.right = width + offsets.left;\n    } else {\n      // for all the other DOM elements, this one is good\n      boundaries = offsets;\n    }\n  }\n\n  // Add paddings\n  padding = padding || 0;\n  var isPaddingNumber = typeof padding === 'number';\n  boundaries.left += isPaddingNumber ? padding : padding.left || 0;\n  boundaries.top += isPaddingNumber ? padding : padding.top || 0;\n  boundaries.right -= isPaddingNumber ? padding : padding.right || 0;\n  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;\n\n  return boundaries;\n}\n\nfunction getArea(_ref) {\n  var width = _ref.width,\n      height = _ref.height;\n\n  return width * height;\n}\n\n/**\n * Utility used to transform the `auto` placement to the placement with more\n * available space.\n * @method\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {\n  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n\n  if (placement.indexOf('auto') === -1) {\n    return placement;\n  }\n\n  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);\n\n  var rects = {\n    top: {\n      width: boundaries.width,\n      height: refRect.top - boundaries.top\n    },\n    right: {\n      width: boundaries.right - refRect.right,\n      height: boundaries.height\n    },\n    bottom: {\n      width: boundaries.width,\n      height: boundaries.bottom - refRect.bottom\n    },\n    left: {\n      width: refRect.left - boundaries.left,\n      height: boundaries.height\n    }\n  };\n\n  var sortedAreas = Object.keys(rects).map(function (key) {\n    return _extends({\n      key: key\n    }, rects[key], {\n      area: getArea(rects[key])\n    });\n  }).sort(function (a, b) {\n    return b.area - a.area;\n  });\n\n  var filteredAreas = sortedAreas.filter(function (_ref2) {\n    var width = _ref2.width,\n        height = _ref2.height;\n    return width >= popper.clientWidth && height >= popper.clientHeight;\n  });\n\n  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;\n\n  var variation = placement.split('-')[1];\n\n  return computedPlacement + (variation ? '-' + variation : '');\n}\n\n/**\n * Get offsets to the reference element\n * @method\n * @memberof Popper.Utils\n * @param {Object} state\n * @param {Element} popper - the popper element\n * @param {Element} reference - the reference element (the popper will be relative to this)\n * @param {Element} fixedPosition - is in fixed position mode\n * @returns {Object} An object containing the offsets which will be applied to the popper\n */\nfunction getReferenceOffsets(state, popper, reference) {\n  var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));\n  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);\n}\n\n/**\n * Get the outer sizes of the given element (offset size + margins)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Object} object containing width and height properties\n */\nfunction getOuterSizes(element) {\n  var window = element.ownerDocument.defaultView;\n  var styles = window.getComputedStyle(element);\n  var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);\n  var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);\n  var result = {\n    width: element.offsetWidth + y,\n    height: element.offsetHeight + x\n  };\n  return result;\n}\n\n/**\n * Get the opposite placement of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement\n * @returns {String} flipped placement\n */\nfunction getOppositePlacement(placement) {\n  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };\n  return placement.replace(/left|right|bottom|top/g, function (matched) {\n    return hash[matched];\n  });\n}\n\n/**\n * Get offsets to the popper\n * @method\n * @memberof Popper.Utils\n * @param {Object} position - CSS position the Popper will get applied\n * @param {HTMLElement} popper - the popper element\n * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\n * @param {String} placement - one of the valid placement options\n * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\n */\nfunction getPopperOffsets(popper, referenceOffsets, placement) {\n  placement = placement.split('-')[0];\n\n  // Get popper node sizes\n  var popperRect = getOuterSizes(popper);\n\n  // Add position, width and height to our offsets object\n  var popperOffsets = {\n    width: popperRect.width,\n    height: popperRect.height\n  };\n\n  // depending by the popper placement we have to compute its offsets slightly differently\n  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n  var mainSide = isHoriz ? 'top' : 'left';\n  var secondarySide = isHoriz ? 'left' : 'top';\n  var measurement = isHoriz ? 'height' : 'width';\n  var secondaryMeasurement = !isHoriz ? 'height' : 'width';\n\n  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;\n  if (placement === secondarySide) {\n    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\n  } else {\n    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];\n  }\n\n  return popperOffsets;\n}\n\n/**\n * Mimics the `find` method of Array\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction find(arr, check) {\n  // use native find if supported\n  if (Array.prototype.find) {\n    return arr.find(check);\n  }\n\n  // use `filter` to obtain the same behavior of `find`\n  return arr.filter(check)[0];\n}\n\n/**\n * Return the index of the matching object\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction findIndex(arr, prop, value) {\n  // use native findIndex if supported\n  if (Array.prototype.findIndex) {\n    return arr.findIndex(function (cur) {\n      return cur[prop] === value;\n    });\n  }\n\n  // use `find` + `indexOf` if `findIndex` isn't supported\n  var match = find(arr, function (obj) {\n    return obj[prop] === value;\n  });\n  return arr.indexOf(match);\n}\n\n/**\n * Loop trough the list of modifiers and run them in order,\n * each of them will then edit the data object.\n * @method\n * @memberof Popper.Utils\n * @param {dataObject} data\n * @param {Array} modifiers\n * @param {String} ends - Optional modifier name used as stopper\n * @returns {dataObject}\n */\nfunction runModifiers(modifiers, data, ends) {\n  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));\n\n  modifiersToRun.forEach(function (modifier) {\n    if (modifier['function']) {\n      // eslint-disable-line dot-notation\n      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n    }\n    var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation\n    if (modifier.enabled && isFunction(fn)) {\n      // Add properties to offsets to make them a complete clientRect object\n      // we do this before each modifier to make sure the previous one doesn't\n      // mess with these values\n      data.offsets.popper = getClientRect(data.offsets.popper);\n      data.offsets.reference = getClientRect(data.offsets.reference);\n\n      data = fn(data, modifier);\n    }\n  });\n\n  return data;\n}\n\n/**\n * Updates the position of the popper, computing the new offsets and applying\n * the new style.<br />\n * Prefer `scheduleUpdate` over `update` because of performance reasons.\n * @method\n * @memberof Popper\n */\nfunction update() {\n  // if popper is destroyed, don't perform any further update\n  if (this.state.isDestroyed) {\n    return;\n  }\n\n  var data = {\n    instance: this,\n    styles: {},\n    arrowStyles: {},\n    attributes: {},\n    flipped: false,\n    offsets: {}\n  };\n\n  // compute reference element offsets\n  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);\n\n  // store the computed placement inside `originalPlacement`\n  data.originalPlacement = data.placement;\n\n  data.positionFixed = this.options.positionFixed;\n\n  // compute the popper offsets\n  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);\n\n  data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';\n\n  // run the modifiers\n  data = runModifiers(this.modifiers, data);\n\n  // the first `update` will call `onCreate` callback\n  // the other ones will call `onUpdate` callback\n  if (!this.state.isCreated) {\n    this.state.isCreated = true;\n    this.options.onCreate(data);\n  } else {\n    this.options.onUpdate(data);\n  }\n}\n\n/**\n * Helper used to know if the given modifier is enabled.\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean}\n */\nfunction isModifierEnabled(modifiers, modifierName) {\n  return modifiers.some(function (_ref) {\n    var name = _ref.name,\n        enabled = _ref.enabled;\n    return enabled && name === modifierName;\n  });\n}\n\n/**\n * Get the prefixed supported property name\n * @method\n * @memberof Popper.Utils\n * @argument {String} property (camelCase)\n * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\n */\nfunction getSupportedPropertyName(property) {\n  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];\n  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);\n\n  for (var i = 0; i < prefixes.length; i++) {\n    var prefix = prefixes[i];\n    var toCheck = prefix ? '' + prefix + upperProp : property;\n    if (typeof document.body.style[toCheck] !== 'undefined') {\n      return toCheck;\n    }\n  }\n  return null;\n}\n\n/**\n * Destroys the popper.\n * @method\n * @memberof Popper\n */\nfunction destroy() {\n  this.state.isDestroyed = true;\n\n  // touch DOM only if `applyStyle` modifier is enabled\n  if (isModifierEnabled(this.modifiers, 'applyStyle')) {\n    this.popper.removeAttribute('x-placement');\n    this.popper.style.position = '';\n    this.popper.style.top = '';\n    this.popper.style.left = '';\n    this.popper.style.right = '';\n    this.popper.style.bottom = '';\n    this.popper.style.willChange = '';\n    this.popper.style[getSupportedPropertyName('transform')] = '';\n  }\n\n  this.disableEventListeners();\n\n  // remove the popper if user explicitly asked for the deletion on destroy\n  // do not use `remove` because IE11 doesn't support it\n  if (this.options.removeOnDestroy) {\n    this.popper.parentNode.removeChild(this.popper);\n  }\n  return this;\n}\n\n/**\n * Get the window associated with the element\n * @argument {Element} element\n * @returns {Window}\n */\nfunction getWindow(element) {\n  var ownerDocument = element.ownerDocument;\n  return ownerDocument ? ownerDocument.defaultView : window;\n}\n\nfunction attachToScrollParents(scrollParent, event, callback, scrollParents) {\n  var isBody = scrollParent.nodeName === 'BODY';\n  var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;\n  target.addEventListener(event, callback, { passive: true });\n\n  if (!isBody) {\n    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);\n  }\n  scrollParents.push(target);\n}\n\n/**\n * Setup needed event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction setupEventListeners(reference, options, state, updateBound) {\n  // Resize event listener on window\n  state.updateBound = updateBound;\n  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });\n\n  // Scroll event listener on scroll parents\n  var scrollElement = getScrollParent(reference);\n  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);\n  state.scrollElement = scrollElement;\n  state.eventsEnabled = true;\n\n  return state;\n}\n\n/**\n * It will add resize/scroll events and start recalculating\n * position of the popper element when they are triggered.\n * @method\n * @memberof Popper\n */\nfunction enableEventListeners() {\n  if (!this.state.eventsEnabled) {\n    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);\n  }\n}\n\n/**\n * Remove event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction removeEventListeners(reference, state) {\n  // Remove resize event listener on window\n  getWindow(reference).removeEventListener('resize', state.updateBound);\n\n  // Remove scroll event listener on scroll parents\n  state.scrollParents.forEach(function (target) {\n    target.removeEventListener('scroll', state.updateBound);\n  });\n\n  // Reset state\n  state.updateBound = null;\n  state.scrollParents = [];\n  state.scrollElement = null;\n  state.eventsEnabled = false;\n  return state;\n}\n\n/**\n * It will remove resize/scroll events and won't recalculate popper position\n * when they are triggered. It also won't trigger `onUpdate` callback anymore,\n * unless you call `update` method manually.\n * @method\n * @memberof Popper\n */\nfunction disableEventListeners() {\n  if (this.state.eventsEnabled) {\n    cancelAnimationFrame(this.scheduleUpdate);\n    this.state = removeEventListeners(this.reference, this.state);\n  }\n}\n\n/**\n * Tells if a given input is a number\n * @method\n * @memberof Popper.Utils\n * @param {*} input to check\n * @return {Boolean}\n */\nfunction isNumeric(n) {\n  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n/**\n * Set the style to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the style to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setStyles(element, styles) {\n  Object.keys(styles).forEach(function (prop) {\n    var unit = '';\n    // add unit if the value is numeric and is one of the following\n    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {\n      unit = 'px';\n    }\n    element.style[prop] = styles[prop] + unit;\n  });\n}\n\n/**\n * Set the attributes to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the attributes to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setAttributes(element, attributes) {\n  Object.keys(attributes).forEach(function (prop) {\n    var value = attributes[prop];\n    if (value !== false) {\n      element.setAttribute(prop, attributes[prop]);\n    } else {\n      element.removeAttribute(prop);\n    }\n  });\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} data.styles - List of style properties - values to apply to popper element\n * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The same data object\n */\nfunction applyStyle(data) {\n  // any property present in `data.styles` will be applied to the popper,\n  // in this way we can make the 3rd party modifiers add custom styles to it\n  // Be aware, modifiers could override the properties defined in the previous\n  // lines of this modifier!\n  setStyles(data.instance.popper, data.styles);\n\n  // any property present in `data.attributes` will be applied to the popper,\n  // they will be set as HTML attributes of the element\n  setAttributes(data.instance.popper, data.attributes);\n\n  // if arrowElement is defined and arrowStyles has some properties\n  if (data.arrowElement && Object.keys(data.arrowStyles).length) {\n    setStyles(data.arrowElement, data.arrowStyles);\n  }\n\n  return data;\n}\n\n/**\n * Set the x-placement attribute before everything else because it could be used\n * to add margins to the popper margins needs to be calculated to get the\n * correct popper offsets.\n * @method\n * @memberof Popper.modifiers\n * @param {HTMLElement} reference - The reference element used to position the popper\n * @param {HTMLElement} popper - The HTML element used as popper\n * @param {Object} options - Popper.js options\n */\nfunction applyStyleOnLoad(reference, popper, options, modifierOptions, state) {\n  // compute reference element offsets\n  var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);\n\n  popper.setAttribute('x-placement', placement);\n\n  // Apply `position` to popper before anything else because\n  // without the position applied we can't guarantee correct computations\n  setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });\n\n  return options;\n}\n\n/**\n * @function\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Boolean} shouldRound - If the offsets should be rounded at all\n * @returns {Object} The popper's position offsets rounded\n *\n * The tale of pixel-perfect positioning. It's still not 100% perfect, but as\n * good as it can be within reason.\n * Discussion here: https://github.com/FezVrasta/popper.js/pull/715\n *\n * Low DPI screens cause a popper to be blurry if not using full pixels (Safari\n * as well on High DPI screens).\n *\n * Firefox prefers no rounding for positioning and does not have blurriness on\n * high DPI screens.\n *\n * Only horizontal placement and left/right values need to be considered.\n */\nfunction getRoundedOffsets(data, shouldRound) {\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n  var round = Math.round,\n      floor = Math.floor;\n\n  var noRound = function noRound(v) {\n    return v;\n  };\n\n  var referenceWidth = round(reference.width);\n  var popperWidth = round(popper.width);\n\n  var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;\n  var isVariation = data.placement.indexOf('-') !== -1;\n  var sameWidthParity = referenceWidth % 2 === popperWidth % 2;\n  var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;\n\n  var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;\n  var verticalToInteger = !shouldRound ? noRound : round;\n\n  return {\n    left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),\n    top: verticalToInteger(popper.top),\n    bottom: verticalToInteger(popper.bottom),\n    right: horizontalToInteger(popper.right)\n  };\n}\n\nvar isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeStyle(data, options) {\n  var x = options.x,\n      y = options.y;\n  var popper = data.offsets.popper;\n\n  // Remove this legacy support in Popper.js v2\n\n  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'applyStyle';\n  }).gpuAcceleration;\n  if (legacyGpuAccelerationOption !== undefined) {\n    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');\n  }\n  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;\n\n  var offsetParent = getOffsetParent(data.instance.popper);\n  var offsetParentRect = getBoundingClientRect(offsetParent);\n\n  // Styles\n  var styles = {\n    position: popper.position\n  };\n\n  var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);\n\n  var sideA = x === 'bottom' ? 'top' : 'bottom';\n  var sideB = y === 'right' ? 'left' : 'right';\n\n  // if gpuAcceleration is set to `true` and transform is supported,\n  //  we use `translate3d` to apply the position to the popper we\n  // automatically use the supported prefixed version if needed\n  var prefixedProperty = getSupportedPropertyName('transform');\n\n  // now, let's make a step back and look at this code closely (wtf?)\n  // If the content of the popper grows once it's been positioned, it\n  // may happen that the popper gets misplaced because of the new content\n  // overflowing its reference element\n  // To avoid this problem, we provide two options (x and y), which allow\n  // the consumer to define the offset origin.\n  // If we position a popper on top of a reference element, we can set\n  // `x` to `top` to make the popper grow towards its top instead of\n  // its bottom.\n  var left = void 0,\n      top = void 0;\n  if (sideA === 'bottom') {\n    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)\n    // and not the bottom of the html element\n    if (offsetParent.nodeName === 'HTML') {\n      top = -offsetParent.clientHeight + offsets.bottom;\n    } else {\n      top = -offsetParentRect.height + offsets.bottom;\n    }\n  } else {\n    top = offsets.top;\n  }\n  if (sideB === 'right') {\n    if (offsetParent.nodeName === 'HTML') {\n      left = -offsetParent.clientWidth + offsets.right;\n    } else {\n      left = -offsetParentRect.width + offsets.right;\n    }\n  } else {\n    left = offsets.left;\n  }\n  if (gpuAcceleration && prefixedProperty) {\n    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';\n    styles[sideA] = 0;\n    styles[sideB] = 0;\n    styles.willChange = 'transform';\n  } else {\n    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\n    var invertTop = sideA === 'bottom' ? -1 : 1;\n    var invertLeft = sideB === 'right' ? -1 : 1;\n    styles[sideA] = top * invertTop;\n    styles[sideB] = left * invertLeft;\n    styles.willChange = sideA + ', ' + sideB;\n  }\n\n  // Attributes\n  var attributes = {\n    'x-placement': data.placement\n  };\n\n  // Update `data` attributes, styles and arrowStyles\n  data.attributes = _extends({}, attributes, data.attributes);\n  data.styles = _extends({}, styles, data.styles);\n  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);\n\n  return data;\n}\n\n/**\n * Helper used to know if the given modifier depends from another one.<br />\n * It checks if the needed modifier is listed and enabled.\n * @method\n * @memberof Popper.Utils\n * @param {Array} modifiers - list of modifiers\n * @param {String} requestingName - name of requesting modifier\n * @param {String} requestedName - name of requested modifier\n * @returns {Boolean}\n */\nfunction isModifierRequired(modifiers, requestingName, requestedName) {\n  var requesting = find(modifiers, function (_ref) {\n    var name = _ref.name;\n    return name === requestingName;\n  });\n\n  var isRequired = !!requesting && modifiers.some(function (modifier) {\n    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;\n  });\n\n  if (!isRequired) {\n    var _requesting = '`' + requestingName + '`';\n    var requested = '`' + requestedName + '`';\n    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');\n  }\n  return isRequired;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction arrow(data, options) {\n  var _data$offsets$arrow;\n\n  // arrow depends on keepTogether in order to work\n  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {\n    return data;\n  }\n\n  var arrowElement = options.element;\n\n  // if arrowElement is a string, suppose it's a CSS selector\n  if (typeof arrowElement === 'string') {\n    arrowElement = data.instance.popper.querySelector(arrowElement);\n\n    // if arrowElement is not found, don't run the modifier\n    if (!arrowElement) {\n      return data;\n    }\n  } else {\n    // if the arrowElement isn't a query selector we must check that the\n    // provided DOM node is child of its popper node\n    if (!data.instance.popper.contains(arrowElement)) {\n      console.warn('WARNING: `arrow.element` must be child of its popper element!');\n      return data;\n    }\n  }\n\n  var placement = data.placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isVertical = ['left', 'right'].indexOf(placement) !== -1;\n\n  var len = isVertical ? 'height' : 'width';\n  var sideCapitalized = isVertical ? 'Top' : 'Left';\n  var side = sideCapitalized.toLowerCase();\n  var altSide = isVertical ? 'left' : 'top';\n  var opSide = isVertical ? 'bottom' : 'right';\n  var arrowElementSize = getOuterSizes(arrowElement)[len];\n\n  //\n  // extends keepTogether behavior making sure the popper and its\n  // reference have enough pixels in conjunction\n  //\n\n  // top/left side\n  if (reference[opSide] - arrowElementSize < popper[side]) {\n    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);\n  }\n  // bottom/right side\n  if (reference[side] + arrowElementSize > popper[opSide]) {\n    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];\n  }\n  data.offsets.popper = getClientRect(data.offsets.popper);\n\n  // compute center of the popper\n  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;\n\n  // Compute the sideValue using the updated popper offsets\n  // take popper margin in account because we don't have this info available\n  var css = getStyleComputedProperty(data.instance.popper);\n  var popperMarginSide = parseFloat(css['margin' + sideCapitalized]);\n  var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width']);\n  var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;\n\n  // prevent arrowElement from being placed not contiguously to its popper\n  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\n\n  data.arrowElement = arrowElement;\n  data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);\n\n  return data;\n}\n\n/**\n * Get the opposite placement variation of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement variation\n * @returns {String} flipped placement variation\n */\nfunction getOppositeVariation(variation) {\n  if (variation === 'end') {\n    return 'start';\n  } else if (variation === 'start') {\n    return 'end';\n  }\n  return variation;\n}\n\n/**\n * List of accepted placements to use as values of the `placement` option.<br />\n * Valid placements are:\n * - `auto`\n * - `top`\n * - `right`\n * - `bottom`\n * - `left`\n *\n * Each placement can have a variation from this list:\n * - `-start`\n * - `-end`\n *\n * Variations are interpreted easily if you think of them as the left to right\n * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\n * is right.<br />\n * Vertically (`left` and `right`), `start` is top and `end` is bottom.\n *\n * Some valid examples are:\n * - `top-end` (on top of reference, right aligned)\n * - `right-start` (on right of reference, top aligned)\n * - `bottom` (on bottom, centered)\n * - `auto-end` (on the side with more space available, alignment depends by placement)\n *\n * @static\n * @type {Array}\n * @enum {String}\n * @readonly\n * @method placements\n * @memberof Popper\n */\nvar placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];\n\n// Get rid of `auto` `auto-start` and `auto-end`\nvar validPlacements = placements.slice(3);\n\n/**\n * Given an initial placement, returns all the subsequent placements\n * clockwise (or counter-clockwise).\n *\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement - A valid placement (it accepts variations)\n * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\n * @returns {Array} placements including their variations\n */\nfunction clockwise(placement) {\n  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var index = validPlacements.indexOf(placement);\n  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));\n  return counter ? arr.reverse() : arr;\n}\n\nvar BEHAVIORS = {\n  FLIP: 'flip',\n  CLOCKWISE: 'clockwise',\n  COUNTERCLOCKWISE: 'counterclockwise'\n};\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction flip(data, options) {\n  // if `inner` modifier is enabled, we can't use the `flip` modifier\n  if (isModifierEnabled(data.instance.modifiers, 'inner')) {\n    return data;\n  }\n\n  if (data.flipped && data.placement === data.originalPlacement) {\n    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\n    return data;\n  }\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);\n\n  var placement = data.placement.split('-')[0];\n  var placementOpposite = getOppositePlacement(placement);\n  var variation = data.placement.split('-')[1] || '';\n\n  var flipOrder = [];\n\n  switch (options.behavior) {\n    case BEHAVIORS.FLIP:\n      flipOrder = [placement, placementOpposite];\n      break;\n    case BEHAVIORS.CLOCKWISE:\n      flipOrder = clockwise(placement);\n      break;\n    case BEHAVIORS.COUNTERCLOCKWISE:\n      flipOrder = clockwise(placement, true);\n      break;\n    default:\n      flipOrder = options.behavior;\n  }\n\n  flipOrder.forEach(function (step, index) {\n    if (placement !== step || flipOrder.length === index + 1) {\n      return data;\n    }\n\n    placement = data.placement.split('-')[0];\n    placementOpposite = getOppositePlacement(placement);\n\n    var popperOffsets = data.offsets.popper;\n    var refOffsets = data.offsets.reference;\n\n    // using floor because the reference offsets may contain decimals we are not going to consider here\n    var floor = Math.floor;\n    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);\n\n    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\n    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\n    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\n    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);\n\n    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;\n\n    // flip the variation if required\n    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n\n    // flips variation if reference element overflows boundaries\n    var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);\n\n    // flips variation if popper content overflows boundaries\n    var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === 'start' && overflowsRight || isVertical && variation === 'end' && overflowsLeft || !isVertical && variation === 'start' && overflowsBottom || !isVertical && variation === 'end' && overflowsTop);\n\n    var flippedVariation = flippedVariationByRef || flippedVariationByContent;\n\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\n      // this boolean to detect any flip loop\n      data.flipped = true;\n\n      if (overlapsRef || overflowsBoundaries) {\n        placement = flipOrder[index + 1];\n      }\n\n      if (flippedVariation) {\n        variation = getOppositeVariation(variation);\n      }\n\n      data.placement = placement + (variation ? '-' + variation : '');\n\n      // this object contains `position`, we want to preserve it along with\n      // any additional property we may add in the future\n      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));\n\n      data = runModifiers(data.instance.modifiers, data, 'flip');\n    }\n  });\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction keepTogether(data) {\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var placement = data.placement.split('-')[0];\n  var floor = Math.floor;\n  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n  var side = isVertical ? 'right' : 'bottom';\n  var opSide = isVertical ? 'left' : 'top';\n  var measurement = isVertical ? 'width' : 'height';\n\n  if (popper[side] < floor(reference[opSide])) {\n    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];\n  }\n  if (popper[opSide] > floor(reference[side])) {\n    data.offsets.popper[opSide] = floor(reference[side]);\n  }\n\n  return data;\n}\n\n/**\n * Converts a string containing value + unit into a px value number\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} str - Value + unit string\n * @argument {String} measurement - `height` or `width`\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @returns {Number|String}\n * Value in pixels, or original string if no values were extracted\n */\nfunction toValue(str, measurement, popperOffsets, referenceOffsets) {\n  // separate value from unit\n  var split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\n  var value = +split[1];\n  var unit = split[2];\n\n  // If it's not a number it's an operator, I guess\n  if (!value) {\n    return str;\n  }\n\n  if (unit.indexOf('%') === 0) {\n    var element = void 0;\n    switch (unit) {\n      case '%p':\n        element = popperOffsets;\n        break;\n      case '%':\n      case '%r':\n      default:\n        element = referenceOffsets;\n    }\n\n    var rect = getClientRect(element);\n    return rect[measurement] / 100 * value;\n  } else if (unit === 'vh' || unit === 'vw') {\n    // if is a vh or vw, we calculate the size based on the viewport\n    var size = void 0;\n    if (unit === 'vh') {\n      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n    } else {\n      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n    }\n    return size / 100 * value;\n  } else {\n    // if is an explicit pixel unit, we get rid of the unit and keep the value\n    // if is an implicit unit, it's px, and we return just the value\n    return value;\n  }\n}\n\n/**\n * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} offset\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @argument {String} basePlacement\n * @returns {Array} a two cells array with x and y offsets in numbers\n */\nfunction parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {\n  var offsets = [0, 0];\n\n  // Use height if placement is left or right and index is 0 otherwise use width\n  // in this way the first offset will use an axis and the second one\n  // will use the other one\n  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;\n\n  // Split the offset string to obtain a list of values and operands\n  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\n  var fragments = offset.split(/(\\+|\\-)/).map(function (frag) {\n    return frag.trim();\n  });\n\n  // Detect if the offset string contains a pair of values or a single one\n  // they could be separated by comma or space\n  var divider = fragments.indexOf(find(fragments, function (frag) {\n    return frag.search(/,|\\s/) !== -1;\n  }));\n\n  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {\n    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');\n  }\n\n  // If divider is found, we divide the list of values and operands to divide\n  // them by ofset X and Y.\n  var splitRegex = /\\s*,\\s*|\\s+/;\n  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];\n\n  // Convert the values with units to absolute pixels to allow our computations\n  ops = ops.map(function (op, index) {\n    // Most of the units rely on the orientation of the popper\n    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';\n    var mergeWithPrevious = false;\n    return op\n    // This aggregates any `+` or `-` sign that aren't considered operators\n    // e.g.: 10 + +5 => [10, +, +5]\n    .reduce(function (a, b) {\n      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {\n        a[a.length - 1] = b;\n        mergeWithPrevious = true;\n        return a;\n      } else if (mergeWithPrevious) {\n        a[a.length - 1] += b;\n        mergeWithPrevious = false;\n        return a;\n      } else {\n        return a.concat(b);\n      }\n    }, [])\n    // Here we convert the string values into number values (in px)\n    .map(function (str) {\n      return toValue(str, measurement, popperOffsets, referenceOffsets);\n    });\n  });\n\n  // Loop trough the offsets arrays and execute the operations\n  ops.forEach(function (op, index) {\n    op.forEach(function (frag, index2) {\n      if (isNumeric(frag)) {\n        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);\n      }\n    });\n  });\n  return offsets;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @argument {Number|String} options.offset=0\n * The offset value as described in the modifier description\n * @returns {Object} The data object, properly modified\n */\nfunction offset(data, _ref) {\n  var offset = _ref.offset;\n  var placement = data.placement,\n      _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var basePlacement = placement.split('-')[0];\n\n  var offsets = void 0;\n  if (isNumeric(+offset)) {\n    offsets = [+offset, 0];\n  } else {\n    offsets = parseOffset(offset, popper, reference, basePlacement);\n  }\n\n  if (basePlacement === 'left') {\n    popper.top += offsets[0];\n    popper.left -= offsets[1];\n  } else if (basePlacement === 'right') {\n    popper.top += offsets[0];\n    popper.left += offsets[1];\n  } else if (basePlacement === 'top') {\n    popper.left += offsets[0];\n    popper.top -= offsets[1];\n  } else if (basePlacement === 'bottom') {\n    popper.left += offsets[0];\n    popper.top += offsets[1];\n  }\n\n  data.popper = popper;\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction preventOverflow(data, options) {\n  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);\n\n  // If offsetParent is the reference element, we really want to\n  // go one step up and use the next offsetParent as reference to\n  // avoid to make this modifier completely useless and look like broken\n  if (data.instance.reference === boundariesElement) {\n    boundariesElement = getOffsetParent(boundariesElement);\n  }\n\n  // NOTE: DOM access here\n  // resets the popper's position so that the document size can be calculated excluding\n  // the size of the popper element itself\n  var transformProp = getSupportedPropertyName('transform');\n  var popperStyles = data.instance.popper.style; // assignment to help minification\n  var top = popperStyles.top,\n      left = popperStyles.left,\n      transform = popperStyles[transformProp];\n\n  popperStyles.top = '';\n  popperStyles.left = '';\n  popperStyles[transformProp] = '';\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);\n\n  // NOTE: DOM access here\n  // restores the original style properties after the offsets have been computed\n  popperStyles.top = top;\n  popperStyles.left = left;\n  popperStyles[transformProp] = transform;\n\n  options.boundaries = boundaries;\n\n  var order = options.priority;\n  var popper = data.offsets.popper;\n\n  var check = {\n    primary: function primary(placement) {\n      var value = popper[placement];\n      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {\n        value = Math.max(popper[placement], boundaries[placement]);\n      }\n      return defineProperty({}, placement, value);\n    },\n    secondary: function secondary(placement) {\n      var mainSide = placement === 'right' ? 'left' : 'top';\n      var value = popper[mainSide];\n      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {\n        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));\n      }\n      return defineProperty({}, mainSide, value);\n    }\n  };\n\n  order.forEach(function (placement) {\n    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\n    popper = _extends({}, popper, check[side](placement));\n  });\n\n  data.offsets.popper = popper;\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction shift(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var shiftvariation = placement.split('-')[1];\n\n  // if shift shiftvariation is specified, run the modifier\n  if (shiftvariation) {\n    var _data$offsets = data.offsets,\n        reference = _data$offsets.reference,\n        popper = _data$offsets.popper;\n\n    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n    var side = isVertical ? 'left' : 'top';\n    var measurement = isVertical ? 'width' : 'height';\n\n    var shiftOffsets = {\n      start: defineProperty({}, side, reference[side]),\n      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])\n    };\n\n    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction hide(data) {\n  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {\n    return data;\n  }\n\n  var refRect = data.offsets.reference;\n  var bound = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'preventOverflow';\n  }).boundaries;\n\n  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === true) {\n      return data;\n    }\n\n    data.hide = true;\n    data.attributes['x-out-of-boundaries'] = '';\n  } else {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === false) {\n      return data;\n    }\n\n    data.hide = false;\n    data.attributes['x-out-of-boundaries'] = false;\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction inner(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;\n\n  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;\n\n  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);\n\n  data.placement = getOppositePlacement(placement);\n  data.offsets.popper = getClientRect(popper);\n\n  return data;\n}\n\n/**\n * Modifier function, each modifier can have a function of this type assigned\n * to its `fn` property.<br />\n * These functions will be called on each update, this means that you must\n * make sure they are performant enough to avoid performance bottlenecks.\n *\n * @function ModifierFn\n * @argument {dataObject} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {dataObject} The data object, properly modified\n */\n\n/**\n * Modifiers are plugins used to alter the behavior of your poppers.<br />\n * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\n * needed by the library.\n *\n * Usually you don't want to override the `order`, `fn` and `onLoad` props.\n * All the other properties are configurations that could be tweaked.\n * @namespace modifiers\n */\nvar modifiers = {\n  /**\n   * Modifier used to shift the popper on the start or end of its reference\n   * element.<br />\n   * It will read the variation of the `placement` property.<br />\n   * It can be one either `-end` or `-start`.\n   * @memberof modifiers\n   * @inner\n   */\n  shift: {\n    /** @prop {number} order=100 - Index used to define the order of execution */\n    order: 100,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: shift\n  },\n\n  /**\n   * The `offset` modifier can shift your popper on both its axis.\n   *\n   * It accepts the following units:\n   * - `px` or unit-less, interpreted as pixels\n   * - `%` or `%r`, percentage relative to the length of the reference element\n   * - `%p`, percentage relative to the length of the popper element\n   * - `vw`, CSS viewport width unit\n   * - `vh`, CSS viewport height unit\n   *\n   * For length is intended the main axis relative to the placement of the popper.<br />\n   * This means that if the placement is `top` or `bottom`, the length will be the\n   * `width`. In case of `left` or `right`, it will be the `height`.\n   *\n   * You can provide a single value (as `Number` or `String`), or a pair of values\n   * as `String` divided by a comma or one (or more) white spaces.<br />\n   * The latter is a deprecated method because it leads to confusion and will be\n   * removed in v2.<br />\n   * Additionally, it accepts additions and subtractions between different units.\n   * Note that multiplications and divisions aren't supported.\n   *\n   * Valid examples are:\n   * ```\n   * 10\n   * '10%'\n   * '10, 10'\n   * '10%, 10'\n   * '10 + 10%'\n   * '10 - 5vh + 3%'\n   * '-10px + 5vh, 5px - 6%'\n   * ```\n   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap\n   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.\n   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  offset: {\n    /** @prop {number} order=200 - Index used to define the order of execution */\n    order: 200,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: offset,\n    /** @prop {Number|String} offset=0\n     * The offset value as described in the modifier description\n     */\n    offset: 0\n  },\n\n  /**\n   * Modifier used to prevent the popper from being positioned outside the boundary.\n   *\n   * A scenario exists where the reference itself is not within the boundaries.<br />\n   * We can say it has \"escaped the boundaries\" — or just \"escaped\".<br />\n   * In this case we need to decide whether the popper should either:\n   *\n   * - detach from the reference and remain \"trapped\" in the boundaries, or\n   * - if it should ignore the boundary and \"escape with its reference\"\n   *\n   * When `escapeWithReference` is set to`true` and reference is completely\n   * outside its boundaries, the popper will overflow (or completely leave)\n   * the boundaries in order to remain attached to the edge of the reference.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  preventOverflow: {\n    /** @prop {number} order=300 - Index used to define the order of execution */\n    order: 300,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: preventOverflow,\n    /**\n     * @prop {Array} [priority=['left','right','top','bottom']]\n     * Popper will try to prevent overflow following these priorities by default,\n     * then, it could overflow on the left and on top of the `boundariesElement`\n     */\n    priority: ['left', 'right', 'top', 'bottom'],\n    /**\n     * @prop {number} padding=5\n     * Amount of pixel used to define a minimum distance between the boundaries\n     * and the popper. This makes sure the popper always has a little padding\n     * between the edges of its container\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='scrollParent'\n     * Boundaries used by the modifier. Can be `scrollParent`, `window`,\n     * `viewport` or any DOM element.\n     */\n    boundariesElement: 'scrollParent'\n  },\n\n  /**\n   * Modifier used to make sure the reference and its popper stay near each other\n   * without leaving any gap between the two. Especially useful when the arrow is\n   * enabled and you want to ensure that it points to its reference element.\n   * It cares only about the first axis. You can still have poppers with margin\n   * between the popper and its reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  keepTogether: {\n    /** @prop {number} order=400 - Index used to define the order of execution */\n    order: 400,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: keepTogether\n  },\n\n  /**\n   * This modifier is used to move the `arrowElement` of the popper to make\n   * sure it is positioned between the reference element and its popper element.\n   * It will read the outer size of the `arrowElement` node to detect how many\n   * pixels of conjunction are needed.\n   *\n   * It has no effect if no `arrowElement` is provided.\n   * @memberof modifiers\n   * @inner\n   */\n  arrow: {\n    /** @prop {number} order=500 - Index used to define the order of execution */\n    order: 500,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: arrow,\n    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */\n    element: '[x-arrow]'\n  },\n\n  /**\n   * Modifier used to flip the popper's placement when it starts to overlap its\n   * reference element.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   *\n   * **NOTE:** this modifier will interrupt the current update cycle and will\n   * restart it if it detects the need to flip the placement.\n   * @memberof modifiers\n   * @inner\n   */\n  flip: {\n    /** @prop {number} order=600 - Index used to define the order of execution */\n    order: 600,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: flip,\n    /**\n     * @prop {String|Array} behavior='flip'\n     * The behavior used to change the popper's placement. It can be one of\n     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\n     * placements (with optional variations)\n     */\n    behavior: 'flip',\n    /**\n     * @prop {number} padding=5\n     * The popper will flip if it hits the edges of the `boundariesElement`\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='viewport'\n     * The element which will define the boundaries of the popper position.\n     * The popper will never be placed outside of the defined boundaries\n     * (except if `keepTogether` is enabled)\n     */\n    boundariesElement: 'viewport',\n    /**\n     * @prop {Boolean} flipVariations=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the reference element overlaps its boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariations: false,\n    /**\n     * @prop {Boolean} flipVariationsByContent=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the popper element overlaps its reference boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariationsByContent: false\n  },\n\n  /**\n   * Modifier used to make the popper flow toward the inner of the reference element.\n   * By default, when this modifier is disabled, the popper will be placed outside\n   * the reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  inner: {\n    /** @prop {number} order=700 - Index used to define the order of execution */\n    order: 700,\n    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\n    enabled: false,\n    /** @prop {ModifierFn} */\n    fn: inner\n  },\n\n  /**\n   * Modifier used to hide the popper when its reference element is outside of the\n   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\n   * be used to hide with a CSS selector the popper when its reference is\n   * out of boundaries.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   * @memberof modifiers\n   * @inner\n   */\n  hide: {\n    /** @prop {number} order=800 - Index used to define the order of execution */\n    order: 800,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: hide\n  },\n\n  /**\n   * Computes the style that will be applied to the popper element to gets\n   * properly positioned.\n   *\n   * Note that this modifier will not touch the DOM, it just prepares the styles\n   * so that `applyStyle` modifier can apply it. This separation is useful\n   * in case you need to replace `applyStyle` with a custom implementation.\n   *\n   * This modifier has `850` as `order` value to maintain backward compatibility\n   * with previous versions of Popper.js. Expect the modifiers ordering method\n   * to change in future major versions of the library.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  computeStyle: {\n    /** @prop {number} order=850 - Index used to define the order of execution */\n    order: 850,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: computeStyle,\n    /**\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: true,\n    /**\n     * @prop {string} [x='bottom']\n     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\n     * Change this if your popper should grow in a direction different from `bottom`\n     */\n    x: 'bottom',\n    /**\n     * @prop {string} [x='left']\n     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\n     * Change this if your popper should grow in a direction different from `right`\n     */\n    y: 'right'\n  },\n\n  /**\n   * Applies the computed styles to the popper element.\n   *\n   * All the DOM manipulations are limited to this modifier. This is useful in case\n   * you want to integrate Popper.js inside a framework or view library and you\n   * want to delegate all the DOM manipulations to it.\n   *\n   * Note that if you disable this modifier, you must make sure the popper element\n   * has its position set to `absolute` before Popper.js can do its work!\n   *\n   * Just disable this modifier and define your own to achieve the desired effect.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  applyStyle: {\n    /** @prop {number} order=900 - Index used to define the order of execution */\n    order: 900,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: applyStyle,\n    /** @prop {Function} */\n    onLoad: applyStyleOnLoad,\n    /**\n     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: undefined\n  }\n};\n\n/**\n * The `dataObject` is an object containing all the information used by Popper.js.\n * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\n * @name dataObject\n * @property {Object} data.instance The Popper.js instance\n * @property {String} data.placement Placement applied to popper\n * @property {String} data.originalPlacement Placement originally defined on init\n * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\n * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper\n * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\n * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.boundaries Offsets of the popper boundaries\n * @property {Object} data.offsets The measurements of popper, reference and arrow elements\n * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\n */\n\n/**\n * Default options provided to Popper.js constructor.<br />\n * These can be overridden using the `options` argument of Popper.js.<br />\n * To override an option, simply pass an object with the same\n * structure of the `options` object, as the 3rd argument. For example:\n * ```\n * new Popper(ref, pop, {\n *   modifiers: {\n *     preventOverflow: { enabled: false }\n *   }\n * })\n * ```\n * @type {Object}\n * @static\n * @memberof Popper\n */\nvar Defaults = {\n  /**\n   * Popper's placement.\n   * @prop {Popper.placements} placement='bottom'\n   */\n  placement: 'bottom',\n\n  /**\n   * Set this to true if you want popper to position it self in 'fixed' mode\n   * @prop {Boolean} positionFixed=false\n   */\n  positionFixed: false,\n\n  /**\n   * Whether events (resize, scroll) are initially enabled.\n   * @prop {Boolean} eventsEnabled=true\n   */\n  eventsEnabled: true,\n\n  /**\n   * Set to true if you want to automatically remove the popper when\n   * you call the `destroy` method.\n   * @prop {Boolean} removeOnDestroy=false\n   */\n  removeOnDestroy: false,\n\n  /**\n   * Callback called when the popper is created.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onCreate}\n   */\n  onCreate: function onCreate() {},\n\n  /**\n   * Callback called when the popper is updated. This callback is not called\n   * on the initialization/creation of the popper, but only on subsequent\n   * updates.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onUpdate}\n   */\n  onUpdate: function onUpdate() {},\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the popper.\n   * They provide most of the functionalities of Popper.js.\n   * @prop {modifiers}\n   */\n  modifiers: modifiers\n};\n\n/**\n * @callback onCreate\n * @param {dataObject} data\n */\n\n/**\n * @callback onUpdate\n * @param {dataObject} data\n */\n\n// Utils\n// Methods\nvar Popper = function () {\n  /**\n   * Creates a new Popper.js instance.\n   * @class Popper\n   * @param {Element|referenceObject} reference - The reference element used to position the popper\n   * @param {Element} popper - The HTML / XML element used as the popper\n   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\n   * @return {Object} instance - The generated Popper.js instance\n   */\n  function Popper(reference, popper) {\n    var _this = this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    classCallCheck(this, Popper);\n\n    this.scheduleUpdate = function () {\n      return requestAnimationFrame(_this.update);\n    };\n\n    // make update() debounced, so that it only runs at most once-per-tick\n    this.update = debounce(this.update.bind(this));\n\n    // with {} we create a new object with the options inside it\n    this.options = _extends({}, Popper.Defaults, options);\n\n    // init state\n    this.state = {\n      isDestroyed: false,\n      isCreated: false,\n      scrollParents: []\n    };\n\n    // get reference and popper elements (allow jQuery wrappers)\n    this.reference = reference && reference.jquery ? reference[0] : reference;\n    this.popper = popper && popper.jquery ? popper[0] : popper;\n\n    // Deep merge modifiers options\n    this.options.modifiers = {};\n    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {\n      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});\n    });\n\n    // Refactoring modifiers' list (Object => Array)\n    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {\n      return _extends({\n        name: name\n      }, _this.options.modifiers[name]);\n    })\n    // sort the modifiers by order\n    .sort(function (a, b) {\n      return a.order - b.order;\n    });\n\n    // modifiers have the ability to execute arbitrary code when Popper.js get inited\n    // such code is executed in the same order of its modifier\n    // they could add new properties to their options configuration\n    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!\n    this.modifiers.forEach(function (modifierOptions) {\n      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\n        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);\n      }\n    });\n\n    // fire the first update to position the popper in the right place\n    this.update();\n\n    var eventsEnabled = this.options.eventsEnabled;\n    if (eventsEnabled) {\n      // setup event listeners, they will take care of update the position in specific situations\n      this.enableEventListeners();\n    }\n\n    this.state.eventsEnabled = eventsEnabled;\n  }\n\n  // We can't use class properties because they don't get listed in the\n  // class prototype and break stuff like Sinon stubs\n\n\n  createClass(Popper, [{\n    key: 'update',\n    value: function update$$1() {\n      return update.call(this);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy$$1() {\n      return destroy.call(this);\n    }\n  }, {\n    key: 'enableEventListeners',\n    value: function enableEventListeners$$1() {\n      return enableEventListeners.call(this);\n    }\n  }, {\n    key: 'disableEventListeners',\n    value: function disableEventListeners$$1() {\n      return disableEventListeners.call(this);\n    }\n\n    /**\n     * Schedules an update. It will run on the next UI update available.\n     * @method scheduleUpdate\n     * @memberof Popper\n     */\n\n\n    /**\n     * Collection of utilities useful when writing custom modifiers.\n     * Starting from version 1.7, this method is available only if you\n     * include `popper-utils.js` before `popper.js`.\n     *\n     * **DEPRECATION**: This way to access PopperUtils is deprecated\n     * and will be removed in v2! Use the PopperUtils module directly instead.\n     * Due to the high instability of the methods contained in Utils, we can't\n     * guarantee them to follow semver. Use them at your own risk!\n     * @static\n     * @private\n     * @type {Object}\n     * @deprecated since version 1.8\n     * @member Utils\n     * @memberof Popper\n     */\n\n  }]);\n  return Popper;\n}();\n\n/**\n * The `referenceObject` is an object that provides an interface compatible with Popper.js\n * and lets you use it as replacement of a real DOM node.<br />\n * You can use this method to position a popper relatively to a set of coordinates\n * in case you don't have a DOM node to use as reference.\n *\n * ```\n * new Popper(referenceObject, popperNode);\n * ```\n *\n * NB: This feature isn't supported in Internet Explorer 10.\n * @name referenceObject\n * @property {Function} data.getBoundingClientRect\n * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\n * @property {number} data.clientWidth\n * An ES6 getter that will return the width of the virtual reference element.\n * @property {number} data.clientHeight\n * An ES6 getter that will return the height of the virtual reference element.\n */\n\n\nPopper.Utils = (typeof window !== 'undefined' ? window : __webpack_require__.g).PopperUtils;\nPopper.placements = placements;\nPopper.Defaults = Defaults;\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Popper);\n//# sourceMappingURL=popper.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/popper.js/dist/esm/popper.js\n");

/***/ }),

/***/ "./node_modules/sortablejs/modular/sortable.esm.js":
/*!*********************************************************!*\
  !*** ./node_modules/sortablejs/modular/sortable.esm.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   \"MultiDrag\": () => (/* binding */ MultiDragPlugin),\n/* harmony export */   \"Sortable\": () => (/* binding */ Sortable),\n/* harmony export */   \"Swap\": () => (/* binding */ SwapPlugin)\n/* harmony export */ });\n/**!\n * Sortable 1.14.0\n * @author\tRubaXa   <trash@rubaxa.org>\n * @author\towenm    <owen23355@gmail.com>\n * @license MIT\n */\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nvar version = \"1.14.0\";\n\nfunction userAgent(pattern) {\n  if (typeof window !== 'undefined' && window.navigator) {\n    return !! /*@__PURE__*/navigator.userAgent.match(pattern);\n  }\n}\n\nvar IE11OrLess = userAgent(/(?:Trident.*rv[ :]?11\\.|msie|iemobile|Windows Phone)/i);\nvar Edge = userAgent(/Edge/i);\nvar FireFox = userAgent(/firefox/i);\nvar Safari = userAgent(/safari/i) && !userAgent(/chrome/i) && !userAgent(/android/i);\nvar IOS = userAgent(/iP(ad|od|hone)/i);\nvar ChromeForAndroid = userAgent(/chrome/i) && userAgent(/android/i);\n\nvar captureMode = {\n  capture: false,\n  passive: false\n};\n\nfunction on(el, event, fn) {\n  el.addEventListener(event, fn, !IE11OrLess && captureMode);\n}\n\nfunction off(el, event, fn) {\n  el.removeEventListener(event, fn, !IE11OrLess && captureMode);\n}\n\nfunction matches(\n/**HTMLElement*/\nel,\n/**String*/\nselector) {\n  if (!selector) return;\n  selector[0] === '>' && (selector = selector.substring(1));\n\n  if (el) {\n    try {\n      if (el.matches) {\n        return el.matches(selector);\n      } else if (el.msMatchesSelector) {\n        return el.msMatchesSelector(selector);\n      } else if (el.webkitMatchesSelector) {\n        return el.webkitMatchesSelector(selector);\n      }\n    } catch (_) {\n      return false;\n    }\n  }\n\n  return false;\n}\n\nfunction getParentOrHost(el) {\n  return el.host && el !== document && el.host.nodeType ? el.host : el.parentNode;\n}\n\nfunction closest(\n/**HTMLElement*/\nel,\n/**String*/\nselector,\n/**HTMLElement*/\nctx, includeCTX) {\n  if (el) {\n    ctx = ctx || document;\n\n    do {\n      if (selector != null && (selector[0] === '>' ? el.parentNode === ctx && matches(el, selector) : matches(el, selector)) || includeCTX && el === ctx) {\n        return el;\n      }\n\n      if (el === ctx) break;\n      /* jshint boss:true */\n    } while (el = getParentOrHost(el));\n  }\n\n  return null;\n}\n\nvar R_SPACE = /\\s+/g;\n\nfunction toggleClass(el, name, state) {\n  if (el && name) {\n    if (el.classList) {\n      el.classList[state ? 'add' : 'remove'](name);\n    } else {\n      var className = (' ' + el.className + ' ').replace(R_SPACE, ' ').replace(' ' + name + ' ', ' ');\n      el.className = (className + (state ? ' ' + name : '')).replace(R_SPACE, ' ');\n    }\n  }\n}\n\nfunction css(el, prop, val) {\n  var style = el && el.style;\n\n  if (style) {\n    if (val === void 0) {\n      if (document.defaultView && document.defaultView.getComputedStyle) {\n        val = document.defaultView.getComputedStyle(el, '');\n      } else if (el.currentStyle) {\n        val = el.currentStyle;\n      }\n\n      return prop === void 0 ? val : val[prop];\n    } else {\n      if (!(prop in style) && prop.indexOf('webkit') === -1) {\n        prop = '-webkit-' + prop;\n      }\n\n      style[prop] = val + (typeof val === 'string' ? '' : 'px');\n    }\n  }\n}\n\nfunction matrix(el, selfOnly) {\n  var appliedTransforms = '';\n\n  if (typeof el === 'string') {\n    appliedTransforms = el;\n  } else {\n    do {\n      var transform = css(el, 'transform');\n\n      if (transform && transform !== 'none') {\n        appliedTransforms = transform + ' ' + appliedTransforms;\n      }\n      /* jshint boss:true */\n\n    } while (!selfOnly && (el = el.parentNode));\n  }\n\n  var matrixFn = window.DOMMatrix || window.WebKitCSSMatrix || window.CSSMatrix || window.MSCSSMatrix;\n  /*jshint -W056 */\n\n  return matrixFn && new matrixFn(appliedTransforms);\n}\n\nfunction find(ctx, tagName, iterator) {\n  if (ctx) {\n    var list = ctx.getElementsByTagName(tagName),\n        i = 0,\n        n = list.length;\n\n    if (iterator) {\n      for (; i < n; i++) {\n        iterator(list[i], i);\n      }\n    }\n\n    return list;\n  }\n\n  return [];\n}\n\nfunction getWindowScrollingElement() {\n  var scrollingElement = document.scrollingElement;\n\n  if (scrollingElement) {\n    return scrollingElement;\n  } else {\n    return document.documentElement;\n  }\n}\n/**\n * Returns the \"bounding client rect\" of given element\n * @param  {HTMLElement} el                       The element whose boundingClientRect is wanted\n * @param  {[Boolean]} relativeToContainingBlock  Whether the rect should be relative to the containing block of (including) the container\n * @param  {[Boolean]} relativeToNonStaticParent  Whether the rect should be relative to the relative parent of (including) the contaienr\n * @param  {[Boolean]} undoScale                  Whether the container's scale() should be undone\n * @param  {[HTMLElement]} container              The parent the element will be placed in\n * @return {Object}                               The boundingClientRect of el, with specified adjustments\n */\n\n\nfunction getRect(el, relativeToContainingBlock, relativeToNonStaticParent, undoScale, container) {\n  if (!el.getBoundingClientRect && el !== window) return;\n  var elRect, top, left, bottom, right, height, width;\n\n  if (el !== window && el.parentNode && el !== getWindowScrollingElement()) {\n    elRect = el.getBoundingClientRect();\n    top = elRect.top;\n    left = elRect.left;\n    bottom = elRect.bottom;\n    right = elRect.right;\n    height = elRect.height;\n    width = elRect.width;\n  } else {\n    top = 0;\n    left = 0;\n    bottom = window.innerHeight;\n    right = window.innerWidth;\n    height = window.innerHeight;\n    width = window.innerWidth;\n  }\n\n  if ((relativeToContainingBlock || relativeToNonStaticParent) && el !== window) {\n    // Adjust for translate()\n    container = container || el.parentNode; // solves #1123 (see: https://stackoverflow.com/a/37953806/6088312)\n    // Not needed on <= IE11\n\n    if (!IE11OrLess) {\n      do {\n        if (container && container.getBoundingClientRect && (css(container, 'transform') !== 'none' || relativeToNonStaticParent && css(container, 'position') !== 'static')) {\n          var containerRect = container.getBoundingClientRect(); // Set relative to edges of padding box of container\n\n          top -= containerRect.top + parseInt(css(container, 'border-top-width'));\n          left -= containerRect.left + parseInt(css(container, 'border-left-width'));\n          bottom = top + elRect.height;\n          right = left + elRect.width;\n          break;\n        }\n        /* jshint boss:true */\n\n      } while (container = container.parentNode);\n    }\n  }\n\n  if (undoScale && el !== window) {\n    // Adjust for scale()\n    var elMatrix = matrix(container || el),\n        scaleX = elMatrix && elMatrix.a,\n        scaleY = elMatrix && elMatrix.d;\n\n    if (elMatrix) {\n      top /= scaleY;\n      left /= scaleX;\n      width /= scaleX;\n      height /= scaleY;\n      bottom = top + height;\n      right = left + width;\n    }\n  }\n\n  return {\n    top: top,\n    left: left,\n    bottom: bottom,\n    right: right,\n    width: width,\n    height: height\n  };\n}\n/**\n * Checks if a side of an element is scrolled past a side of its parents\n * @param  {HTMLElement}  el           The element who's side being scrolled out of view is in question\n * @param  {String}       elSide       Side of the element in question ('top', 'left', 'right', 'bottom')\n * @param  {String}       parentSide   Side of the parent in question ('top', 'left', 'right', 'bottom')\n * @return {HTMLElement}               The parent scroll element that the el's side is scrolled past, or null if there is no such element\n */\n\n\nfunction isScrolledPast(el, elSide, parentSide) {\n  var parent = getParentAutoScrollElement(el, true),\n      elSideVal = getRect(el)[elSide];\n  /* jshint boss:true */\n\n  while (parent) {\n    var parentSideVal = getRect(parent)[parentSide],\n        visible = void 0;\n\n    if (parentSide === 'top' || parentSide === 'left') {\n      visible = elSideVal >= parentSideVal;\n    } else {\n      visible = elSideVal <= parentSideVal;\n    }\n\n    if (!visible) return parent;\n    if (parent === getWindowScrollingElement()) break;\n    parent = getParentAutoScrollElement(parent, false);\n  }\n\n  return false;\n}\n/**\n * Gets nth child of el, ignoring hidden children, sortable's elements (does not ignore clone if it's visible)\n * and non-draggable elements\n * @param  {HTMLElement} el       The parent element\n * @param  {Number} childNum      The index of the child\n * @param  {Object} options       Parent Sortable's options\n * @return {HTMLElement}          The child at index childNum, or null if not found\n */\n\n\nfunction getChild(el, childNum, options, includeDragEl) {\n  var currentChild = 0,\n      i = 0,\n      children = el.children;\n\n  while (i < children.length) {\n    if (children[i].style.display !== 'none' && children[i] !== Sortable.ghost && (includeDragEl || children[i] !== Sortable.dragged) && closest(children[i], options.draggable, el, false)) {\n      if (currentChild === childNum) {\n        return children[i];\n      }\n\n      currentChild++;\n    }\n\n    i++;\n  }\n\n  return null;\n}\n/**\n * Gets the last child in the el, ignoring ghostEl or invisible elements (clones)\n * @param  {HTMLElement} el       Parent element\n * @param  {selector} selector    Any other elements that should be ignored\n * @return {HTMLElement}          The last child, ignoring ghostEl\n */\n\n\nfunction lastChild(el, selector) {\n  var last = el.lastElementChild;\n\n  while (last && (last === Sortable.ghost || css(last, 'display') === 'none' || selector && !matches(last, selector))) {\n    last = last.previousElementSibling;\n  }\n\n  return last || null;\n}\n/**\n * Returns the index of an element within its parent for a selected set of\n * elements\n * @param  {HTMLElement} el\n * @param  {selector} selector\n * @return {number}\n */\n\n\nfunction index(el, selector) {\n  var index = 0;\n\n  if (!el || !el.parentNode) {\n    return -1;\n  }\n  /* jshint boss:true */\n\n\n  while (el = el.previousElementSibling) {\n    if (el.nodeName.toUpperCase() !== 'TEMPLATE' && el !== Sortable.clone && (!selector || matches(el, selector))) {\n      index++;\n    }\n  }\n\n  return index;\n}\n/**\n * Returns the scroll offset of the given element, added with all the scroll offsets of parent elements.\n * The value is returned in real pixels.\n * @param  {HTMLElement} el\n * @return {Array}             Offsets in the format of [left, top]\n */\n\n\nfunction getRelativeScrollOffset(el) {\n  var offsetLeft = 0,\n      offsetTop = 0,\n      winScroller = getWindowScrollingElement();\n\n  if (el) {\n    do {\n      var elMatrix = matrix(el),\n          scaleX = elMatrix.a,\n          scaleY = elMatrix.d;\n      offsetLeft += el.scrollLeft * scaleX;\n      offsetTop += el.scrollTop * scaleY;\n    } while (el !== winScroller && (el = el.parentNode));\n  }\n\n  return [offsetLeft, offsetTop];\n}\n/**\n * Returns the index of the object within the given array\n * @param  {Array} arr   Array that may or may not hold the object\n * @param  {Object} obj  An object that has a key-value pair unique to and identical to a key-value pair in the object you want to find\n * @return {Number}      The index of the object in the array, or -1\n */\n\n\nfunction indexOfObject(arr, obj) {\n  for (var i in arr) {\n    if (!arr.hasOwnProperty(i)) continue;\n\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key) && obj[key] === arr[i][key]) return Number(i);\n    }\n  }\n\n  return -1;\n}\n\nfunction getParentAutoScrollElement(el, includeSelf) {\n  // skip to window\n  if (!el || !el.getBoundingClientRect) return getWindowScrollingElement();\n  var elem = el;\n  var gotSelf = false;\n\n  do {\n    // we don't need to get elem css if it isn't even overflowing in the first place (performance)\n    if (elem.clientWidth < elem.scrollWidth || elem.clientHeight < elem.scrollHeight) {\n      var elemCSS = css(elem);\n\n      if (elem.clientWidth < elem.scrollWidth && (elemCSS.overflowX == 'auto' || elemCSS.overflowX == 'scroll') || elem.clientHeight < elem.scrollHeight && (elemCSS.overflowY == 'auto' || elemCSS.overflowY == 'scroll')) {\n        if (!elem.getBoundingClientRect || elem === document.body) return getWindowScrollingElement();\n        if (gotSelf || includeSelf) return elem;\n        gotSelf = true;\n      }\n    }\n    /* jshint boss:true */\n\n  } while (elem = elem.parentNode);\n\n  return getWindowScrollingElement();\n}\n\nfunction extend(dst, src) {\n  if (dst && src) {\n    for (var key in src) {\n      if (src.hasOwnProperty(key)) {\n        dst[key] = src[key];\n      }\n    }\n  }\n\n  return dst;\n}\n\nfunction isRectEqual(rect1, rect2) {\n  return Math.round(rect1.top) === Math.round(rect2.top) && Math.round(rect1.left) === Math.round(rect2.left) && Math.round(rect1.height) === Math.round(rect2.height) && Math.round(rect1.width) === Math.round(rect2.width);\n}\n\nvar _throttleTimeout;\n\nfunction throttle(callback, ms) {\n  return function () {\n    if (!_throttleTimeout) {\n      var args = arguments,\n          _this = this;\n\n      if (args.length === 1) {\n        callback.call(_this, args[0]);\n      } else {\n        callback.apply(_this, args);\n      }\n\n      _throttleTimeout = setTimeout(function () {\n        _throttleTimeout = void 0;\n      }, ms);\n    }\n  };\n}\n\nfunction cancelThrottle() {\n  clearTimeout(_throttleTimeout);\n  _throttleTimeout = void 0;\n}\n\nfunction scrollBy(el, x, y) {\n  el.scrollLeft += x;\n  el.scrollTop += y;\n}\n\nfunction clone(el) {\n  var Polymer = window.Polymer;\n  var $ = window.jQuery || window.Zepto;\n\n  if (Polymer && Polymer.dom) {\n    return Polymer.dom(el).cloneNode(true);\n  } else if ($) {\n    return $(el).clone(true)[0];\n  } else {\n    return el.cloneNode(true);\n  }\n}\n\nfunction setRect(el, rect) {\n  css(el, 'position', 'absolute');\n  css(el, 'top', rect.top);\n  css(el, 'left', rect.left);\n  css(el, 'width', rect.width);\n  css(el, 'height', rect.height);\n}\n\nfunction unsetRect(el) {\n  css(el, 'position', '');\n  css(el, 'top', '');\n  css(el, 'left', '');\n  css(el, 'width', '');\n  css(el, 'height', '');\n}\n\nvar expando = 'Sortable' + new Date().getTime();\n\nfunction AnimationStateManager() {\n  var animationStates = [],\n      animationCallbackId;\n  return {\n    captureAnimationState: function captureAnimationState() {\n      animationStates = [];\n      if (!this.options.animation) return;\n      var children = [].slice.call(this.el.children);\n      children.forEach(function (child) {\n        if (css(child, 'display') === 'none' || child === Sortable.ghost) return;\n        animationStates.push({\n          target: child,\n          rect: getRect(child)\n        });\n\n        var fromRect = _objectSpread2({}, animationStates[animationStates.length - 1].rect); // If animating: compensate for current animation\n\n\n        if (child.thisAnimationDuration) {\n          var childMatrix = matrix(child, true);\n\n          if (childMatrix) {\n            fromRect.top -= childMatrix.f;\n            fromRect.left -= childMatrix.e;\n          }\n        }\n\n        child.fromRect = fromRect;\n      });\n    },\n    addAnimationState: function addAnimationState(state) {\n      animationStates.push(state);\n    },\n    removeAnimationState: function removeAnimationState(target) {\n      animationStates.splice(indexOfObject(animationStates, {\n        target: target\n      }), 1);\n    },\n    animateAll: function animateAll(callback) {\n      var _this = this;\n\n      if (!this.options.animation) {\n        clearTimeout(animationCallbackId);\n        if (typeof callback === 'function') callback();\n        return;\n      }\n\n      var animating = false,\n          animationTime = 0;\n      animationStates.forEach(function (state) {\n        var time = 0,\n            target = state.target,\n            fromRect = target.fromRect,\n            toRect = getRect(target),\n            prevFromRect = target.prevFromRect,\n            prevToRect = target.prevToRect,\n            animatingRect = state.rect,\n            targetMatrix = matrix(target, true);\n\n        if (targetMatrix) {\n          // Compensate for current animation\n          toRect.top -= targetMatrix.f;\n          toRect.left -= targetMatrix.e;\n        }\n\n        target.toRect = toRect;\n\n        if (target.thisAnimationDuration) {\n          // Could also check if animatingRect is between fromRect and toRect\n          if (isRectEqual(prevFromRect, toRect) && !isRectEqual(fromRect, toRect) && // Make sure animatingRect is on line between toRect & fromRect\n          (animatingRect.top - toRect.top) / (animatingRect.left - toRect.left) === (fromRect.top - toRect.top) / (fromRect.left - toRect.left)) {\n            // If returning to same place as started from animation and on same axis\n            time = calculateRealTime(animatingRect, prevFromRect, prevToRect, _this.options);\n          }\n        } // if fromRect != toRect: animate\n\n\n        if (!isRectEqual(toRect, fromRect)) {\n          target.prevFromRect = fromRect;\n          target.prevToRect = toRect;\n\n          if (!time) {\n            time = _this.options.animation;\n          }\n\n          _this.animate(target, animatingRect, toRect, time);\n        }\n\n        if (time) {\n          animating = true;\n          animationTime = Math.max(animationTime, time);\n          clearTimeout(target.animationResetTimer);\n          target.animationResetTimer = setTimeout(function () {\n            target.animationTime = 0;\n            target.prevFromRect = null;\n            target.fromRect = null;\n            target.prevToRect = null;\n            target.thisAnimationDuration = null;\n          }, time);\n          target.thisAnimationDuration = time;\n        }\n      });\n      clearTimeout(animationCallbackId);\n\n      if (!animating) {\n        if (typeof callback === 'function') callback();\n      } else {\n        animationCallbackId = setTimeout(function () {\n          if (typeof callback === 'function') callback();\n        }, animationTime);\n      }\n\n      animationStates = [];\n    },\n    animate: function animate(target, currentRect, toRect, duration) {\n      if (duration) {\n        css(target, 'transition', '');\n        css(target, 'transform', '');\n        var elMatrix = matrix(this.el),\n            scaleX = elMatrix && elMatrix.a,\n            scaleY = elMatrix && elMatrix.d,\n            translateX = (currentRect.left - toRect.left) / (scaleX || 1),\n            translateY = (currentRect.top - toRect.top) / (scaleY || 1);\n        target.animatingX = !!translateX;\n        target.animatingY = !!translateY;\n        css(target, 'transform', 'translate3d(' + translateX + 'px,' + translateY + 'px,0)');\n        this.forRepaintDummy = repaint(target); // repaint\n\n        css(target, 'transition', 'transform ' + duration + 'ms' + (this.options.easing ? ' ' + this.options.easing : ''));\n        css(target, 'transform', 'translate3d(0,0,0)');\n        typeof target.animated === 'number' && clearTimeout(target.animated);\n        target.animated = setTimeout(function () {\n          css(target, 'transition', '');\n          css(target, 'transform', '');\n          target.animated = false;\n          target.animatingX = false;\n          target.animatingY = false;\n        }, duration);\n      }\n    }\n  };\n}\n\nfunction repaint(target) {\n  return target.offsetWidth;\n}\n\nfunction calculateRealTime(animatingRect, fromRect, toRect, options) {\n  return Math.sqrt(Math.pow(fromRect.top - animatingRect.top, 2) + Math.pow(fromRect.left - animatingRect.left, 2)) / Math.sqrt(Math.pow(fromRect.top - toRect.top, 2) + Math.pow(fromRect.left - toRect.left, 2)) * options.animation;\n}\n\nvar plugins = [];\nvar defaults = {\n  initializeByDefault: true\n};\nvar PluginManager = {\n  mount: function mount(plugin) {\n    // Set default static properties\n    for (var option in defaults) {\n      if (defaults.hasOwnProperty(option) && !(option in plugin)) {\n        plugin[option] = defaults[option];\n      }\n    }\n\n    plugins.forEach(function (p) {\n      if (p.pluginName === plugin.pluginName) {\n        throw \"Sortable: Cannot mount plugin \".concat(plugin.pluginName, \" more than once\");\n      }\n    });\n    plugins.push(plugin);\n  },\n  pluginEvent: function pluginEvent(eventName, sortable, evt) {\n    var _this = this;\n\n    this.eventCanceled = false;\n\n    evt.cancel = function () {\n      _this.eventCanceled = true;\n    };\n\n    var eventNameGlobal = eventName + 'Global';\n    plugins.forEach(function (plugin) {\n      if (!sortable[plugin.pluginName]) return; // Fire global events if it exists in this sortable\n\n      if (sortable[plugin.pluginName][eventNameGlobal]) {\n        sortable[plugin.pluginName][eventNameGlobal](_objectSpread2({\n          sortable: sortable\n        }, evt));\n      } // Only fire plugin event if plugin is enabled in this sortable,\n      // and plugin has event defined\n\n\n      if (sortable.options[plugin.pluginName] && sortable[plugin.pluginName][eventName]) {\n        sortable[plugin.pluginName][eventName](_objectSpread2({\n          sortable: sortable\n        }, evt));\n      }\n    });\n  },\n  initializePlugins: function initializePlugins(sortable, el, defaults, options) {\n    plugins.forEach(function (plugin) {\n      var pluginName = plugin.pluginName;\n      if (!sortable.options[pluginName] && !plugin.initializeByDefault) return;\n      var initialized = new plugin(sortable, el, sortable.options);\n      initialized.sortable = sortable;\n      initialized.options = sortable.options;\n      sortable[pluginName] = initialized; // Add default options from plugin\n\n      _extends(defaults, initialized.defaults);\n    });\n\n    for (var option in sortable.options) {\n      if (!sortable.options.hasOwnProperty(option)) continue;\n      var modified = this.modifyOption(sortable, option, sortable.options[option]);\n\n      if (typeof modified !== 'undefined') {\n        sortable.options[option] = modified;\n      }\n    }\n  },\n  getEventProperties: function getEventProperties(name, sortable) {\n    var eventProperties = {};\n    plugins.forEach(function (plugin) {\n      if (typeof plugin.eventProperties !== 'function') return;\n\n      _extends(eventProperties, plugin.eventProperties.call(sortable[plugin.pluginName], name));\n    });\n    return eventProperties;\n  },\n  modifyOption: function modifyOption(sortable, name, value) {\n    var modifiedValue;\n    plugins.forEach(function (plugin) {\n      // Plugin must exist on the Sortable\n      if (!sortable[plugin.pluginName]) return; // If static option listener exists for this option, call in the context of the Sortable's instance of this plugin\n\n      if (plugin.optionListeners && typeof plugin.optionListeners[name] === 'function') {\n        modifiedValue = plugin.optionListeners[name].call(sortable[plugin.pluginName], value);\n      }\n    });\n    return modifiedValue;\n  }\n};\n\nfunction dispatchEvent(_ref) {\n  var sortable = _ref.sortable,\n      rootEl = _ref.rootEl,\n      name = _ref.name,\n      targetEl = _ref.targetEl,\n      cloneEl = _ref.cloneEl,\n      toEl = _ref.toEl,\n      fromEl = _ref.fromEl,\n      oldIndex = _ref.oldIndex,\n      newIndex = _ref.newIndex,\n      oldDraggableIndex = _ref.oldDraggableIndex,\n      newDraggableIndex = _ref.newDraggableIndex,\n      originalEvent = _ref.originalEvent,\n      putSortable = _ref.putSortable,\n      extraEventProperties = _ref.extraEventProperties;\n  sortable = sortable || rootEl && rootEl[expando];\n  if (!sortable) return;\n  var evt,\n      options = sortable.options,\n      onName = 'on' + name.charAt(0).toUpperCase() + name.substr(1); // Support for new CustomEvent feature\n\n  if (window.CustomEvent && !IE11OrLess && !Edge) {\n    evt = new CustomEvent(name, {\n      bubbles: true,\n      cancelable: true\n    });\n  } else {\n    evt = document.createEvent('Event');\n    evt.initEvent(name, true, true);\n  }\n\n  evt.to = toEl || rootEl;\n  evt.from = fromEl || rootEl;\n  evt.item = targetEl || rootEl;\n  evt.clone = cloneEl;\n  evt.oldIndex = oldIndex;\n  evt.newIndex = newIndex;\n  evt.oldDraggableIndex = oldDraggableIndex;\n  evt.newDraggableIndex = newDraggableIndex;\n  evt.originalEvent = originalEvent;\n  evt.pullMode = putSortable ? putSortable.lastPutMode : undefined;\n\n  var allEventProperties = _objectSpread2(_objectSpread2({}, extraEventProperties), PluginManager.getEventProperties(name, sortable));\n\n  for (var option in allEventProperties) {\n    evt[option] = allEventProperties[option];\n  }\n\n  if (rootEl) {\n    rootEl.dispatchEvent(evt);\n  }\n\n  if (options[onName]) {\n    options[onName].call(sortable, evt);\n  }\n}\n\nvar _excluded = [\"evt\"];\n\nvar pluginEvent = function pluginEvent(eventName, sortable) {\n  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      originalEvent = _ref.evt,\n      data = _objectWithoutProperties(_ref, _excluded);\n\n  PluginManager.pluginEvent.bind(Sortable)(eventName, sortable, _objectSpread2({\n    dragEl: dragEl,\n    parentEl: parentEl,\n    ghostEl: ghostEl,\n    rootEl: rootEl,\n    nextEl: nextEl,\n    lastDownEl: lastDownEl,\n    cloneEl: cloneEl,\n    cloneHidden: cloneHidden,\n    dragStarted: moved,\n    putSortable: putSortable,\n    activeSortable: Sortable.active,\n    originalEvent: originalEvent,\n    oldIndex: oldIndex,\n    oldDraggableIndex: oldDraggableIndex,\n    newIndex: newIndex,\n    newDraggableIndex: newDraggableIndex,\n    hideGhostForTarget: _hideGhostForTarget,\n    unhideGhostForTarget: _unhideGhostForTarget,\n    cloneNowHidden: function cloneNowHidden() {\n      cloneHidden = true;\n    },\n    cloneNowShown: function cloneNowShown() {\n      cloneHidden = false;\n    },\n    dispatchSortableEvent: function dispatchSortableEvent(name) {\n      _dispatchEvent({\n        sortable: sortable,\n        name: name,\n        originalEvent: originalEvent\n      });\n    }\n  }, data));\n};\n\nfunction _dispatchEvent(info) {\n  dispatchEvent(_objectSpread2({\n    putSortable: putSortable,\n    cloneEl: cloneEl,\n    targetEl: dragEl,\n    rootEl: rootEl,\n    oldIndex: oldIndex,\n    oldDraggableIndex: oldDraggableIndex,\n    newIndex: newIndex,\n    newDraggableIndex: newDraggableIndex\n  }, info));\n}\n\nvar dragEl,\n    parentEl,\n    ghostEl,\n    rootEl,\n    nextEl,\n    lastDownEl,\n    cloneEl,\n    cloneHidden,\n    oldIndex,\n    newIndex,\n    oldDraggableIndex,\n    newDraggableIndex,\n    activeGroup,\n    putSortable,\n    awaitingDragStarted = false,\n    ignoreNextClick = false,\n    sortables = [],\n    tapEvt,\n    touchEvt,\n    lastDx,\n    lastDy,\n    tapDistanceLeft,\n    tapDistanceTop,\n    moved,\n    lastTarget,\n    lastDirection,\n    pastFirstInvertThresh = false,\n    isCircumstantialInvert = false,\n    targetMoveDistance,\n    // For positioning ghost absolutely\nghostRelativeParent,\n    ghostRelativeParentInitialScroll = [],\n    // (left, top)\n_silent = false,\n    savedInputChecked = [];\n/** @const */\n\nvar documentExists = typeof document !== 'undefined',\n    PositionGhostAbsolutely = IOS,\n    CSSFloatProperty = Edge || IE11OrLess ? 'cssFloat' : 'float',\n    // This will not pass for IE9, because IE9 DnD only works on anchors\nsupportDraggable = documentExists && !ChromeForAndroid && !IOS && 'draggable' in document.createElement('div'),\n    supportCssPointerEvents = function () {\n  if (!documentExists) return; // false when <= IE11\n\n  if (IE11OrLess) {\n    return false;\n  }\n\n  var el = document.createElement('x');\n  el.style.cssText = 'pointer-events:auto';\n  return el.style.pointerEvents === 'auto';\n}(),\n    _detectDirection = function _detectDirection(el, options) {\n  var elCSS = css(el),\n      elWidth = parseInt(elCSS.width) - parseInt(elCSS.paddingLeft) - parseInt(elCSS.paddingRight) - parseInt(elCSS.borderLeftWidth) - parseInt(elCSS.borderRightWidth),\n      child1 = getChild(el, 0, options),\n      child2 = getChild(el, 1, options),\n      firstChildCSS = child1 && css(child1),\n      secondChildCSS = child2 && css(child2),\n      firstChildWidth = firstChildCSS && parseInt(firstChildCSS.marginLeft) + parseInt(firstChildCSS.marginRight) + getRect(child1).width,\n      secondChildWidth = secondChildCSS && parseInt(secondChildCSS.marginLeft) + parseInt(secondChildCSS.marginRight) + getRect(child2).width;\n\n  if (elCSS.display === 'flex') {\n    return elCSS.flexDirection === 'column' || elCSS.flexDirection === 'column-reverse' ? 'vertical' : 'horizontal';\n  }\n\n  if (elCSS.display === 'grid') {\n    return elCSS.gridTemplateColumns.split(' ').length <= 1 ? 'vertical' : 'horizontal';\n  }\n\n  if (child1 && firstChildCSS[\"float\"] && firstChildCSS[\"float\"] !== 'none') {\n    var touchingSideChild2 = firstChildCSS[\"float\"] === 'left' ? 'left' : 'right';\n    return child2 && (secondChildCSS.clear === 'both' || secondChildCSS.clear === touchingSideChild2) ? 'vertical' : 'horizontal';\n  }\n\n  return child1 && (firstChildCSS.display === 'block' || firstChildCSS.display === 'flex' || firstChildCSS.display === 'table' || firstChildCSS.display === 'grid' || firstChildWidth >= elWidth && elCSS[CSSFloatProperty] === 'none' || child2 && elCSS[CSSFloatProperty] === 'none' && firstChildWidth + secondChildWidth > elWidth) ? 'vertical' : 'horizontal';\n},\n    _dragElInRowColumn = function _dragElInRowColumn(dragRect, targetRect, vertical) {\n  var dragElS1Opp = vertical ? dragRect.left : dragRect.top,\n      dragElS2Opp = vertical ? dragRect.right : dragRect.bottom,\n      dragElOppLength = vertical ? dragRect.width : dragRect.height,\n      targetS1Opp = vertical ? targetRect.left : targetRect.top,\n      targetS2Opp = vertical ? targetRect.right : targetRect.bottom,\n      targetOppLength = vertical ? targetRect.width : targetRect.height;\n  return dragElS1Opp === targetS1Opp || dragElS2Opp === targetS2Opp || dragElS1Opp + dragElOppLength / 2 === targetS1Opp + targetOppLength / 2;\n},\n\n/**\n * Detects first nearest empty sortable to X and Y position using emptyInsertThreshold.\n * @param  {Number} x      X position\n * @param  {Number} y      Y position\n * @return {HTMLElement}   Element of the first found nearest Sortable\n */\n_detectNearestEmptySortable = function _detectNearestEmptySortable(x, y) {\n  var ret;\n  sortables.some(function (sortable) {\n    var threshold = sortable[expando].options.emptyInsertThreshold;\n    if (!threshold || lastChild(sortable)) return;\n    var rect = getRect(sortable),\n        insideHorizontally = x >= rect.left - threshold && x <= rect.right + threshold,\n        insideVertically = y >= rect.top - threshold && y <= rect.bottom + threshold;\n\n    if (insideHorizontally && insideVertically) {\n      return ret = sortable;\n    }\n  });\n  return ret;\n},\n    _prepareGroup = function _prepareGroup(options) {\n  function toFn(value, pull) {\n    return function (to, from, dragEl, evt) {\n      var sameGroup = to.options.group.name && from.options.group.name && to.options.group.name === from.options.group.name;\n\n      if (value == null && (pull || sameGroup)) {\n        // Default pull value\n        // Default pull and put value if same group\n        return true;\n      } else if (value == null || value === false) {\n        return false;\n      } else if (pull && value === 'clone') {\n        return value;\n      } else if (typeof value === 'function') {\n        return toFn(value(to, from, dragEl, evt), pull)(to, from, dragEl, evt);\n      } else {\n        var otherGroup = (pull ? to : from).options.group.name;\n        return value === true || typeof value === 'string' && value === otherGroup || value.join && value.indexOf(otherGroup) > -1;\n      }\n    };\n  }\n\n  var group = {};\n  var originalGroup = options.group;\n\n  if (!originalGroup || _typeof(originalGroup) != 'object') {\n    originalGroup = {\n      name: originalGroup\n    };\n  }\n\n  group.name = originalGroup.name;\n  group.checkPull = toFn(originalGroup.pull, true);\n  group.checkPut = toFn(originalGroup.put);\n  group.revertClone = originalGroup.revertClone;\n  options.group = group;\n},\n    _hideGhostForTarget = function _hideGhostForTarget() {\n  if (!supportCssPointerEvents && ghostEl) {\n    css(ghostEl, 'display', 'none');\n  }\n},\n    _unhideGhostForTarget = function _unhideGhostForTarget() {\n  if (!supportCssPointerEvents && ghostEl) {\n    css(ghostEl, 'display', '');\n  }\n}; // #1184 fix - Prevent click event on fallback if dragged but item not changed position\n\n\nif (documentExists) {\n  document.addEventListener('click', function (evt) {\n    if (ignoreNextClick) {\n      evt.preventDefault();\n      evt.stopPropagation && evt.stopPropagation();\n      evt.stopImmediatePropagation && evt.stopImmediatePropagation();\n      ignoreNextClick = false;\n      return false;\n    }\n  }, true);\n}\n\nvar nearestEmptyInsertDetectEvent = function nearestEmptyInsertDetectEvent(evt) {\n  if (dragEl) {\n    evt = evt.touches ? evt.touches[0] : evt;\n\n    var nearest = _detectNearestEmptySortable(evt.clientX, evt.clientY);\n\n    if (nearest) {\n      // Create imitation event\n      var event = {};\n\n      for (var i in evt) {\n        if (evt.hasOwnProperty(i)) {\n          event[i] = evt[i];\n        }\n      }\n\n      event.target = event.rootEl = nearest;\n      event.preventDefault = void 0;\n      event.stopPropagation = void 0;\n\n      nearest[expando]._onDragOver(event);\n    }\n  }\n};\n\nvar _checkOutsideTargetEl = function _checkOutsideTargetEl(evt) {\n  if (dragEl) {\n    dragEl.parentNode[expando]._isOutsideThisEl(evt.target);\n  }\n};\n/**\n * @class  Sortable\n * @param  {HTMLElement}  el\n * @param  {Object}       [options]\n */\n\n\nfunction Sortable(el, options) {\n  if (!(el && el.nodeType && el.nodeType === 1)) {\n    throw \"Sortable: `el` must be an HTMLElement, not \".concat({}.toString.call(el));\n  }\n\n  this.el = el; // root element\n\n  this.options = options = _extends({}, options); // Export instance\n\n  el[expando] = this;\n  var defaults = {\n    group: null,\n    sort: true,\n    disabled: false,\n    store: null,\n    handle: null,\n    draggable: /^[uo]l$/i.test(el.nodeName) ? '>li' : '>*',\n    swapThreshold: 1,\n    // percentage; 0 <= x <= 1\n    invertSwap: false,\n    // invert always\n    invertedSwapThreshold: null,\n    // will be set to same as swapThreshold if default\n    removeCloneOnHide: true,\n    direction: function direction() {\n      return _detectDirection(el, this.options);\n    },\n    ghostClass: 'sortable-ghost',\n    chosenClass: 'sortable-chosen',\n    dragClass: 'sortable-drag',\n    ignore: 'a, img',\n    filter: null,\n    preventOnFilter: true,\n    animation: 0,\n    easing: null,\n    setData: function setData(dataTransfer, dragEl) {\n      dataTransfer.setData('Text', dragEl.textContent);\n    },\n    dropBubble: false,\n    dragoverBubble: false,\n    dataIdAttr: 'data-id',\n    delay: 0,\n    delayOnTouchOnly: false,\n    touchStartThreshold: (Number.parseInt ? Number : window).parseInt(window.devicePixelRatio, 10) || 1,\n    forceFallback: false,\n    fallbackClass: 'sortable-fallback',\n    fallbackOnBody: false,\n    fallbackTolerance: 0,\n    fallbackOffset: {\n      x: 0,\n      y: 0\n    },\n    supportPointer: Sortable.supportPointer !== false && 'PointerEvent' in window && !Safari,\n    emptyInsertThreshold: 5\n  };\n  PluginManager.initializePlugins(this, el, defaults); // Set default options\n\n  for (var name in defaults) {\n    !(name in options) && (options[name] = defaults[name]);\n  }\n\n  _prepareGroup(options); // Bind all private methods\n\n\n  for (var fn in this) {\n    if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {\n      this[fn] = this[fn].bind(this);\n    }\n  } // Setup drag mode\n\n\n  this.nativeDraggable = options.forceFallback ? false : supportDraggable;\n\n  if (this.nativeDraggable) {\n    // Touch start threshold cannot be greater than the native dragstart threshold\n    this.options.touchStartThreshold = 1;\n  } // Bind events\n\n\n  if (options.supportPointer) {\n    on(el, 'pointerdown', this._onTapStart);\n  } else {\n    on(el, 'mousedown', this._onTapStart);\n    on(el, 'touchstart', this._onTapStart);\n  }\n\n  if (this.nativeDraggable) {\n    on(el, 'dragover', this);\n    on(el, 'dragenter', this);\n  }\n\n  sortables.push(this.el); // Restore sorting\n\n  options.store && options.store.get && this.sort(options.store.get(this) || []); // Add animation state manager\n\n  _extends(this, AnimationStateManager());\n}\n\nSortable.prototype =\n/** @lends Sortable.prototype */\n{\n  constructor: Sortable,\n  _isOutsideThisEl: function _isOutsideThisEl(target) {\n    if (!this.el.contains(target) && target !== this.el) {\n      lastTarget = null;\n    }\n  },\n  _getDirection: function _getDirection(evt, target) {\n    return typeof this.options.direction === 'function' ? this.options.direction.call(this, evt, target, dragEl) : this.options.direction;\n  },\n  _onTapStart: function _onTapStart(\n  /** Event|TouchEvent */\n  evt) {\n    if (!evt.cancelable) return;\n\n    var _this = this,\n        el = this.el,\n        options = this.options,\n        preventOnFilter = options.preventOnFilter,\n        type = evt.type,\n        touch = evt.touches && evt.touches[0] || evt.pointerType && evt.pointerType === 'touch' && evt,\n        target = (touch || evt).target,\n        originalTarget = evt.target.shadowRoot && (evt.path && evt.path[0] || evt.composedPath && evt.composedPath()[0]) || target,\n        filter = options.filter;\n\n    _saveInputCheckedState(el); // Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.\n\n\n    if (dragEl) {\n      return;\n    }\n\n    if (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {\n      return; // only left button and enabled\n    } // cancel dnd if original target is content editable\n\n\n    if (originalTarget.isContentEditable) {\n      return;\n    } // Safari ignores further event handling after mousedown\n\n\n    if (!this.nativeDraggable && Safari && target && target.tagName.toUpperCase() === 'SELECT') {\n      return;\n    }\n\n    target = closest(target, options.draggable, el, false);\n\n    if (target && target.animated) {\n      return;\n    }\n\n    if (lastDownEl === target) {\n      // Ignoring duplicate `down`\n      return;\n    } // Get the index of the dragged element within its parent\n\n\n    oldIndex = index(target);\n    oldDraggableIndex = index(target, options.draggable); // Check filter\n\n    if (typeof filter === 'function') {\n      if (filter.call(this, evt, target, this)) {\n        _dispatchEvent({\n          sortable: _this,\n          rootEl: originalTarget,\n          name: 'filter',\n          targetEl: target,\n          toEl: el,\n          fromEl: el\n        });\n\n        pluginEvent('filter', _this, {\n          evt: evt\n        });\n        preventOnFilter && evt.cancelable && evt.preventDefault();\n        return; // cancel dnd\n      }\n    } else if (filter) {\n      filter = filter.split(',').some(function (criteria) {\n        criteria = closest(originalTarget, criteria.trim(), el, false);\n\n        if (criteria) {\n          _dispatchEvent({\n            sortable: _this,\n            rootEl: criteria,\n            name: 'filter',\n            targetEl: target,\n            fromEl: el,\n            toEl: el\n          });\n\n          pluginEvent('filter', _this, {\n            evt: evt\n          });\n          return true;\n        }\n      });\n\n      if (filter) {\n        preventOnFilter && evt.cancelable && evt.preventDefault();\n        return; // cancel dnd\n      }\n    }\n\n    if (options.handle && !closest(originalTarget, options.handle, el, false)) {\n      return;\n    } // Prepare `dragstart`\n\n\n    this._prepareDragStart(evt, touch, target);\n  },\n  _prepareDragStart: function _prepareDragStart(\n  /** Event */\n  evt,\n  /** Touch */\n  touch,\n  /** HTMLElement */\n  target) {\n    var _this = this,\n        el = _this.el,\n        options = _this.options,\n        ownerDocument = el.ownerDocument,\n        dragStartFn;\n\n    if (target && !dragEl && target.parentNode === el) {\n      var dragRect = getRect(target);\n      rootEl = el;\n      dragEl = target;\n      parentEl = dragEl.parentNode;\n      nextEl = dragEl.nextSibling;\n      lastDownEl = target;\n      activeGroup = options.group;\n      Sortable.dragged = dragEl;\n      tapEvt = {\n        target: dragEl,\n        clientX: (touch || evt).clientX,\n        clientY: (touch || evt).clientY\n      };\n      tapDistanceLeft = tapEvt.clientX - dragRect.left;\n      tapDistanceTop = tapEvt.clientY - dragRect.top;\n      this._lastX = (touch || evt).clientX;\n      this._lastY = (touch || evt).clientY;\n      dragEl.style['will-change'] = 'all';\n\n      dragStartFn = function dragStartFn() {\n        pluginEvent('delayEnded', _this, {\n          evt: evt\n        });\n\n        if (Sortable.eventCanceled) {\n          _this._onDrop();\n\n          return;\n        } // Delayed drag has been triggered\n        // we can re-enable the events: touchmove/mousemove\n\n\n        _this._disableDelayedDragEvents();\n\n        if (!FireFox && _this.nativeDraggable) {\n          dragEl.draggable = true;\n        } // Bind the events: dragstart/dragend\n\n\n        _this._triggerDragStart(evt, touch); // Drag start event\n\n\n        _dispatchEvent({\n          sortable: _this,\n          name: 'choose',\n          originalEvent: evt\n        }); // Chosen item\n\n\n        toggleClass(dragEl, options.chosenClass, true);\n      }; // Disable \"draggable\"\n\n\n      options.ignore.split(',').forEach(function (criteria) {\n        find(dragEl, criteria.trim(), _disableDraggable);\n      });\n      on(ownerDocument, 'dragover', nearestEmptyInsertDetectEvent);\n      on(ownerDocument, 'mousemove', nearestEmptyInsertDetectEvent);\n      on(ownerDocument, 'touchmove', nearestEmptyInsertDetectEvent);\n      on(ownerDocument, 'mouseup', _this._onDrop);\n      on(ownerDocument, 'touchend', _this._onDrop);\n      on(ownerDocument, 'touchcancel', _this._onDrop); // Make dragEl draggable (must be before delay for FireFox)\n\n      if (FireFox && this.nativeDraggable) {\n        this.options.touchStartThreshold = 4;\n        dragEl.draggable = true;\n      }\n\n      pluginEvent('delayStart', this, {\n        evt: evt\n      }); // Delay is impossible for native DnD in Edge or IE\n\n      if (options.delay && (!options.delayOnTouchOnly || touch) && (!this.nativeDraggable || !(Edge || IE11OrLess))) {\n        if (Sortable.eventCanceled) {\n          this._onDrop();\n\n          return;\n        } // If the user moves the pointer or let go the click or touch\n        // before the delay has been reached:\n        // disable the delayed drag\n\n\n        on(ownerDocument, 'mouseup', _this._disableDelayedDrag);\n        on(ownerDocument, 'touchend', _this._disableDelayedDrag);\n        on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);\n        on(ownerDocument, 'mousemove', _this._delayedDragTouchMoveHandler);\n        on(ownerDocument, 'touchmove', _this._delayedDragTouchMoveHandler);\n        options.supportPointer && on(ownerDocument, 'pointermove', _this._delayedDragTouchMoveHandler);\n        _this._dragStartTimer = setTimeout(dragStartFn, options.delay);\n      } else {\n        dragStartFn();\n      }\n    }\n  },\n  _delayedDragTouchMoveHandler: function _delayedDragTouchMoveHandler(\n  /** TouchEvent|PointerEvent **/\n  e) {\n    var touch = e.touches ? e.touches[0] : e;\n\n    if (Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) >= Math.floor(this.options.touchStartThreshold / (this.nativeDraggable && window.devicePixelRatio || 1))) {\n      this._disableDelayedDrag();\n    }\n  },\n  _disableDelayedDrag: function _disableDelayedDrag() {\n    dragEl && _disableDraggable(dragEl);\n    clearTimeout(this._dragStartTimer);\n\n    this._disableDelayedDragEvents();\n  },\n  _disableDelayedDragEvents: function _disableDelayedDragEvents() {\n    var ownerDocument = this.el.ownerDocument;\n    off(ownerDocument, 'mouseup', this._disableDelayedDrag);\n    off(ownerDocument, 'touchend', this._disableDelayedDrag);\n    off(ownerDocument, 'touchcancel', this._disableDelayedDrag);\n    off(ownerDocument, 'mousemove', this._delayedDragTouchMoveHandler);\n    off(ownerDocument, 'touchmove', this._delayedDragTouchMoveHandler);\n    off(ownerDocument, 'pointermove', this._delayedDragTouchMoveHandler);\n  },\n  _triggerDragStart: function _triggerDragStart(\n  /** Event */\n  evt,\n  /** Touch */\n  touch) {\n    touch = touch || evt.pointerType == 'touch' && evt;\n\n    if (!this.nativeDraggable || touch) {\n      if (this.options.supportPointer) {\n        on(document, 'pointermove', this._onTouchMove);\n      } else if (touch) {\n        on(document, 'touchmove', this._onTouchMove);\n      } else {\n        on(document, 'mousemove', this._onTouchMove);\n      }\n    } else {\n      on(dragEl, 'dragend', this);\n      on(rootEl, 'dragstart', this._onDragStart);\n    }\n\n    try {\n      if (document.selection) {\n        // Timeout neccessary for IE9\n        _nextTick(function () {\n          document.selection.empty();\n        });\n      } else {\n        window.getSelection().removeAllRanges();\n      }\n    } catch (err) {}\n  },\n  _dragStarted: function _dragStarted(fallback, evt) {\n\n    awaitingDragStarted = false;\n\n    if (rootEl && dragEl) {\n      pluginEvent('dragStarted', this, {\n        evt: evt\n      });\n\n      if (this.nativeDraggable) {\n        on(document, 'dragover', _checkOutsideTargetEl);\n      }\n\n      var options = this.options; // Apply effect\n\n      !fallback && toggleClass(dragEl, options.dragClass, false);\n      toggleClass(dragEl, options.ghostClass, true);\n      Sortable.active = this;\n      fallback && this._appendGhost(); // Drag start event\n\n      _dispatchEvent({\n        sortable: this,\n        name: 'start',\n        originalEvent: evt\n      });\n    } else {\n      this._nulling();\n    }\n  },\n  _emulateDragOver: function _emulateDragOver() {\n    if (touchEvt) {\n      this._lastX = touchEvt.clientX;\n      this._lastY = touchEvt.clientY;\n\n      _hideGhostForTarget();\n\n      var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);\n      var parent = target;\n\n      while (target && target.shadowRoot) {\n        target = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);\n        if (target === parent) break;\n        parent = target;\n      }\n\n      dragEl.parentNode[expando]._isOutsideThisEl(target);\n\n      if (parent) {\n        do {\n          if (parent[expando]) {\n            var inserted = void 0;\n            inserted = parent[expando]._onDragOver({\n              clientX: touchEvt.clientX,\n              clientY: touchEvt.clientY,\n              target: target,\n              rootEl: parent\n            });\n\n            if (inserted && !this.options.dragoverBubble) {\n              break;\n            }\n          }\n\n          target = parent; // store last element\n        }\n        /* jshint boss:true */\n        while (parent = parent.parentNode);\n      }\n\n      _unhideGhostForTarget();\n    }\n  },\n  _onTouchMove: function _onTouchMove(\n  /**TouchEvent*/\n  evt) {\n    if (tapEvt) {\n      var options = this.options,\n          fallbackTolerance = options.fallbackTolerance,\n          fallbackOffset = options.fallbackOffset,\n          touch = evt.touches ? evt.touches[0] : evt,\n          ghostMatrix = ghostEl && matrix(ghostEl, true),\n          scaleX = ghostEl && ghostMatrix && ghostMatrix.a,\n          scaleY = ghostEl && ghostMatrix && ghostMatrix.d,\n          relativeScrollOffset = PositionGhostAbsolutely && ghostRelativeParent && getRelativeScrollOffset(ghostRelativeParent),\n          dx = (touch.clientX - tapEvt.clientX + fallbackOffset.x) / (scaleX || 1) + (relativeScrollOffset ? relativeScrollOffset[0] - ghostRelativeParentInitialScroll[0] : 0) / (scaleX || 1),\n          dy = (touch.clientY - tapEvt.clientY + fallbackOffset.y) / (scaleY || 1) + (relativeScrollOffset ? relativeScrollOffset[1] - ghostRelativeParentInitialScroll[1] : 0) / (scaleY || 1); // only set the status to dragging, when we are actually dragging\n\n      if (!Sortable.active && !awaitingDragStarted) {\n        if (fallbackTolerance && Math.max(Math.abs(touch.clientX - this._lastX), Math.abs(touch.clientY - this._lastY)) < fallbackTolerance) {\n          return;\n        }\n\n        this._onDragStart(evt, true);\n      }\n\n      if (ghostEl) {\n        if (ghostMatrix) {\n          ghostMatrix.e += dx - (lastDx || 0);\n          ghostMatrix.f += dy - (lastDy || 0);\n        } else {\n          ghostMatrix = {\n            a: 1,\n            b: 0,\n            c: 0,\n            d: 1,\n            e: dx,\n            f: dy\n          };\n        }\n\n        var cssMatrix = \"matrix(\".concat(ghostMatrix.a, \",\").concat(ghostMatrix.b, \",\").concat(ghostMatrix.c, \",\").concat(ghostMatrix.d, \",\").concat(ghostMatrix.e, \",\").concat(ghostMatrix.f, \")\");\n        css(ghostEl, 'webkitTransform', cssMatrix);\n        css(ghostEl, 'mozTransform', cssMatrix);\n        css(ghostEl, 'msTransform', cssMatrix);\n        css(ghostEl, 'transform', cssMatrix);\n        lastDx = dx;\n        lastDy = dy;\n        touchEvt = touch;\n      }\n\n      evt.cancelable && evt.preventDefault();\n    }\n  },\n  _appendGhost: function _appendGhost() {\n    // Bug if using scale(): https://stackoverflow.com/questions/2637058\n    // Not being adjusted for\n    if (!ghostEl) {\n      var container = this.options.fallbackOnBody ? document.body : rootEl,\n          rect = getRect(dragEl, true, PositionGhostAbsolutely, true, container),\n          options = this.options; // Position absolutely\n\n      if (PositionGhostAbsolutely) {\n        // Get relatively positioned parent\n        ghostRelativeParent = container;\n\n        while (css(ghostRelativeParent, 'position') === 'static' && css(ghostRelativeParent, 'transform') === 'none' && ghostRelativeParent !== document) {\n          ghostRelativeParent = ghostRelativeParent.parentNode;\n        }\n\n        if (ghostRelativeParent !== document.body && ghostRelativeParent !== document.documentElement) {\n          if (ghostRelativeParent === document) ghostRelativeParent = getWindowScrollingElement();\n          rect.top += ghostRelativeParent.scrollTop;\n          rect.left += ghostRelativeParent.scrollLeft;\n        } else {\n          ghostRelativeParent = getWindowScrollingElement();\n        }\n\n        ghostRelativeParentInitialScroll = getRelativeScrollOffset(ghostRelativeParent);\n      }\n\n      ghostEl = dragEl.cloneNode(true);\n      toggleClass(ghostEl, options.ghostClass, false);\n      toggleClass(ghostEl, options.fallbackClass, true);\n      toggleClass(ghostEl, options.dragClass, true);\n      css(ghostEl, 'transition', '');\n      css(ghostEl, 'transform', '');\n      css(ghostEl, 'box-sizing', 'border-box');\n      css(ghostEl, 'margin', 0);\n      css(ghostEl, 'top', rect.top);\n      css(ghostEl, 'left', rect.left);\n      css(ghostEl, 'width', rect.width);\n      css(ghostEl, 'height', rect.height);\n      css(ghostEl, 'opacity', '0.8');\n      css(ghostEl, 'position', PositionGhostAbsolutely ? 'absolute' : 'fixed');\n      css(ghostEl, 'zIndex', '100000');\n      css(ghostEl, 'pointerEvents', 'none');\n      Sortable.ghost = ghostEl;\n      container.appendChild(ghostEl); // Set transform-origin\n\n      css(ghostEl, 'transform-origin', tapDistanceLeft / parseInt(ghostEl.style.width) * 100 + '% ' + tapDistanceTop / parseInt(ghostEl.style.height) * 100 + '%');\n    }\n  },\n  _onDragStart: function _onDragStart(\n  /**Event*/\n  evt,\n  /**boolean*/\n  fallback) {\n    var _this = this;\n\n    var dataTransfer = evt.dataTransfer;\n    var options = _this.options;\n    pluginEvent('dragStart', this, {\n      evt: evt\n    });\n\n    if (Sortable.eventCanceled) {\n      this._onDrop();\n\n      return;\n    }\n\n    pluginEvent('setupClone', this);\n\n    if (!Sortable.eventCanceled) {\n      cloneEl = clone(dragEl);\n      cloneEl.draggable = false;\n      cloneEl.style['will-change'] = '';\n\n      this._hideClone();\n\n      toggleClass(cloneEl, this.options.chosenClass, false);\n      Sortable.clone = cloneEl;\n    } // #1143: IFrame support workaround\n\n\n    _this.cloneId = _nextTick(function () {\n      pluginEvent('clone', _this);\n      if (Sortable.eventCanceled) return;\n\n      if (!_this.options.removeCloneOnHide) {\n        rootEl.insertBefore(cloneEl, dragEl);\n      }\n\n      _this._hideClone();\n\n      _dispatchEvent({\n        sortable: _this,\n        name: 'clone'\n      });\n    });\n    !fallback && toggleClass(dragEl, options.dragClass, true); // Set proper drop events\n\n    if (fallback) {\n      ignoreNextClick = true;\n      _this._loopId = setInterval(_this._emulateDragOver, 50);\n    } else {\n      // Undo what was set in _prepareDragStart before drag started\n      off(document, 'mouseup', _this._onDrop);\n      off(document, 'touchend', _this._onDrop);\n      off(document, 'touchcancel', _this._onDrop);\n\n      if (dataTransfer) {\n        dataTransfer.effectAllowed = 'move';\n        options.setData && options.setData.call(_this, dataTransfer, dragEl);\n      }\n\n      on(document, 'drop', _this); // #1276 fix:\n\n      css(dragEl, 'transform', 'translateZ(0)');\n    }\n\n    awaitingDragStarted = true;\n    _this._dragStartId = _nextTick(_this._dragStarted.bind(_this, fallback, evt));\n    on(document, 'selectstart', _this);\n    moved = true;\n\n    if (Safari) {\n      css(document.body, 'user-select', 'none');\n    }\n  },\n  // Returns true - if no further action is needed (either inserted or another condition)\n  _onDragOver: function _onDragOver(\n  /**Event*/\n  evt) {\n    var el = this.el,\n        target = evt.target,\n        dragRect,\n        targetRect,\n        revert,\n        options = this.options,\n        group = options.group,\n        activeSortable = Sortable.active,\n        isOwner = activeGroup === group,\n        canSort = options.sort,\n        fromSortable = putSortable || activeSortable,\n        vertical,\n        _this = this,\n        completedFired = false;\n\n    if (_silent) return;\n\n    function dragOverEvent(name, extra) {\n      pluginEvent(name, _this, _objectSpread2({\n        evt: evt,\n        isOwner: isOwner,\n        axis: vertical ? 'vertical' : 'horizontal',\n        revert: revert,\n        dragRect: dragRect,\n        targetRect: targetRect,\n        canSort: canSort,\n        fromSortable: fromSortable,\n        target: target,\n        completed: completed,\n        onMove: function onMove(target, after) {\n          return _onMove(rootEl, el, dragEl, dragRect, target, getRect(target), evt, after);\n        },\n        changed: changed\n      }, extra));\n    } // Capture animation state\n\n\n    function capture() {\n      dragOverEvent('dragOverAnimationCapture');\n\n      _this.captureAnimationState();\n\n      if (_this !== fromSortable) {\n        fromSortable.captureAnimationState();\n      }\n    } // Return invocation when dragEl is inserted (or completed)\n\n\n    function completed(insertion) {\n      dragOverEvent('dragOverCompleted', {\n        insertion: insertion\n      });\n\n      if (insertion) {\n        // Clones must be hidden before folding animation to capture dragRectAbsolute properly\n        if (isOwner) {\n          activeSortable._hideClone();\n        } else {\n          activeSortable._showClone(_this);\n        }\n\n        if (_this !== fromSortable) {\n          // Set ghost class to new sortable's ghost class\n          toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : activeSortable.options.ghostClass, false);\n          toggleClass(dragEl, options.ghostClass, true);\n        }\n\n        if (putSortable !== _this && _this !== Sortable.active) {\n          putSortable = _this;\n        } else if (_this === Sortable.active && putSortable) {\n          putSortable = null;\n        } // Animation\n\n\n        if (fromSortable === _this) {\n          _this._ignoreWhileAnimating = target;\n        }\n\n        _this.animateAll(function () {\n          dragOverEvent('dragOverAnimationComplete');\n          _this._ignoreWhileAnimating = null;\n        });\n\n        if (_this !== fromSortable) {\n          fromSortable.animateAll();\n          fromSortable._ignoreWhileAnimating = null;\n        }\n      } // Null lastTarget if it is not inside a previously swapped element\n\n\n      if (target === dragEl && !dragEl.animated || target === el && !target.animated) {\n        lastTarget = null;\n      } // no bubbling and not fallback\n\n\n      if (!options.dragoverBubble && !evt.rootEl && target !== document) {\n        dragEl.parentNode[expando]._isOutsideThisEl(evt.target); // Do not detect for empty insert if already inserted\n\n\n        !insertion && nearestEmptyInsertDetectEvent(evt);\n      }\n\n      !options.dragoverBubble && evt.stopPropagation && evt.stopPropagation();\n      return completedFired = true;\n    } // Call when dragEl has been inserted\n\n\n    function changed() {\n      newIndex = index(dragEl);\n      newDraggableIndex = index(dragEl, options.draggable);\n\n      _dispatchEvent({\n        sortable: _this,\n        name: 'change',\n        toEl: el,\n        newIndex: newIndex,\n        newDraggableIndex: newDraggableIndex,\n        originalEvent: evt\n      });\n    }\n\n    if (evt.preventDefault !== void 0) {\n      evt.cancelable && evt.preventDefault();\n    }\n\n    target = closest(target, options.draggable, el, true);\n    dragOverEvent('dragOver');\n    if (Sortable.eventCanceled) return completedFired;\n\n    if (dragEl.contains(evt.target) || target.animated && target.animatingX && target.animatingY || _this._ignoreWhileAnimating === target) {\n      return completed(false);\n    }\n\n    ignoreNextClick = false;\n\n    if (activeSortable && !options.disabled && (isOwner ? canSort || (revert = parentEl !== rootEl) // Reverting item into the original list\n    : putSortable === this || (this.lastPutMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) && group.checkPut(this, activeSortable, dragEl, evt))) {\n      vertical = this._getDirection(evt, target) === 'vertical';\n      dragRect = getRect(dragEl);\n      dragOverEvent('dragOverValid');\n      if (Sortable.eventCanceled) return completedFired;\n\n      if (revert) {\n        parentEl = rootEl; // actualization\n\n        capture();\n\n        this._hideClone();\n\n        dragOverEvent('revert');\n\n        if (!Sortable.eventCanceled) {\n          if (nextEl) {\n            rootEl.insertBefore(dragEl, nextEl);\n          } else {\n            rootEl.appendChild(dragEl);\n          }\n        }\n\n        return completed(true);\n      }\n\n      var elLastChild = lastChild(el, options.draggable);\n\n      if (!elLastChild || _ghostIsLast(evt, vertical, this) && !elLastChild.animated) {\n        // Insert to end of list\n        // If already at end of list: Do not insert\n        if (elLastChild === dragEl) {\n          return completed(false);\n        } // if there is a last element, it is the target\n\n\n        if (elLastChild && el === evt.target) {\n          target = elLastChild;\n        }\n\n        if (target) {\n          targetRect = getRect(target);\n        }\n\n        if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, !!target) !== false) {\n          capture();\n          el.appendChild(dragEl);\n          parentEl = el; // actualization\n\n          changed();\n          return completed(true);\n        }\n      } else if (elLastChild && _ghostIsFirst(evt, vertical, this)) {\n        // Insert to start of list\n        var firstChild = getChild(el, 0, options, true);\n\n        if (firstChild === dragEl) {\n          return completed(false);\n        }\n\n        target = firstChild;\n        targetRect = getRect(target);\n\n        if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, false) !== false) {\n          capture();\n          el.insertBefore(dragEl, firstChild);\n          parentEl = el; // actualization\n\n          changed();\n          return completed(true);\n        }\n      } else if (target.parentNode === el) {\n        targetRect = getRect(target);\n        var direction = 0,\n            targetBeforeFirstSwap,\n            differentLevel = dragEl.parentNode !== el,\n            differentRowCol = !_dragElInRowColumn(dragEl.animated && dragEl.toRect || dragRect, target.animated && target.toRect || targetRect, vertical),\n            side1 = vertical ? 'top' : 'left',\n            scrolledPastTop = isScrolledPast(target, 'top', 'top') || isScrolledPast(dragEl, 'top', 'top'),\n            scrollBefore = scrolledPastTop ? scrolledPastTop.scrollTop : void 0;\n\n        if (lastTarget !== target) {\n          targetBeforeFirstSwap = targetRect[side1];\n          pastFirstInvertThresh = false;\n          isCircumstantialInvert = !differentRowCol && options.invertSwap || differentLevel;\n        }\n\n        direction = _getSwapDirection(evt, target, targetRect, vertical, differentRowCol ? 1 : options.swapThreshold, options.invertedSwapThreshold == null ? options.swapThreshold : options.invertedSwapThreshold, isCircumstantialInvert, lastTarget === target);\n        var sibling;\n\n        if (direction !== 0) {\n          // Check if target is beside dragEl in respective direction (ignoring hidden elements)\n          var dragIndex = index(dragEl);\n\n          do {\n            dragIndex -= direction;\n            sibling = parentEl.children[dragIndex];\n          } while (sibling && (css(sibling, 'display') === 'none' || sibling === ghostEl));\n        } // If dragEl is already beside target: Do not insert\n\n\n        if (direction === 0 || sibling === target) {\n          return completed(false);\n        }\n\n        lastTarget = target;\n        lastDirection = direction;\n        var nextSibling = target.nextElementSibling,\n            after = false;\n        after = direction === 1;\n\n        var moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);\n\n        if (moveVector !== false) {\n          if (moveVector === 1 || moveVector === -1) {\n            after = moveVector === 1;\n          }\n\n          _silent = true;\n          setTimeout(_unsilent, 30);\n          capture();\n\n          if (after && !nextSibling) {\n            el.appendChild(dragEl);\n          } else {\n            target.parentNode.insertBefore(dragEl, after ? nextSibling : target);\n          } // Undo chrome's scroll adjustment (has no effect on other browsers)\n\n\n          if (scrolledPastTop) {\n            scrollBy(scrolledPastTop, 0, scrollBefore - scrolledPastTop.scrollTop);\n          }\n\n          parentEl = dragEl.parentNode; // actualization\n          // must be done before animation\n\n          if (targetBeforeFirstSwap !== undefined && !isCircumstantialInvert) {\n            targetMoveDistance = Math.abs(targetBeforeFirstSwap - getRect(target)[side1]);\n          }\n\n          changed();\n          return completed(true);\n        }\n      }\n\n      if (el.contains(dragEl)) {\n        return completed(false);\n      }\n    }\n\n    return false;\n  },\n  _ignoreWhileAnimating: null,\n  _offMoveEvents: function _offMoveEvents() {\n    off(document, 'mousemove', this._onTouchMove);\n    off(document, 'touchmove', this._onTouchMove);\n    off(document, 'pointermove', this._onTouchMove);\n    off(document, 'dragover', nearestEmptyInsertDetectEvent);\n    off(document, 'mousemove', nearestEmptyInsertDetectEvent);\n    off(document, 'touchmove', nearestEmptyInsertDetectEvent);\n  },\n  _offUpEvents: function _offUpEvents() {\n    var ownerDocument = this.el.ownerDocument;\n    off(ownerDocument, 'mouseup', this._onDrop);\n    off(ownerDocument, 'touchend', this._onDrop);\n    off(ownerDocument, 'pointerup', this._onDrop);\n    off(ownerDocument, 'touchcancel', this._onDrop);\n    off(document, 'selectstart', this);\n  },\n  _onDrop: function _onDrop(\n  /**Event*/\n  evt) {\n    var el = this.el,\n        options = this.options; // Get the index of the dragged element within its parent\n\n    newIndex = index(dragEl);\n    newDraggableIndex = index(dragEl, options.draggable);\n    pluginEvent('drop', this, {\n      evt: evt\n    });\n    parentEl = dragEl && dragEl.parentNode; // Get again after plugin event\n\n    newIndex = index(dragEl);\n    newDraggableIndex = index(dragEl, options.draggable);\n\n    if (Sortable.eventCanceled) {\n      this._nulling();\n\n      return;\n    }\n\n    awaitingDragStarted = false;\n    isCircumstantialInvert = false;\n    pastFirstInvertThresh = false;\n    clearInterval(this._loopId);\n    clearTimeout(this._dragStartTimer);\n\n    _cancelNextTick(this.cloneId);\n\n    _cancelNextTick(this._dragStartId); // Unbind events\n\n\n    if (this.nativeDraggable) {\n      off(document, 'drop', this);\n      off(el, 'dragstart', this._onDragStart);\n    }\n\n    this._offMoveEvents();\n\n    this._offUpEvents();\n\n    if (Safari) {\n      css(document.body, 'user-select', '');\n    }\n\n    css(dragEl, 'transform', '');\n\n    if (evt) {\n      if (moved) {\n        evt.cancelable && evt.preventDefault();\n        !options.dropBubble && evt.stopPropagation();\n      }\n\n      ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);\n\n      if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== 'clone') {\n        // Remove clone(s)\n        cloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);\n      }\n\n      if (dragEl) {\n        if (this.nativeDraggable) {\n          off(dragEl, 'dragend', this);\n        }\n\n        _disableDraggable(dragEl);\n\n        dragEl.style['will-change'] = ''; // Remove classes\n        // ghostClass is added in dragStarted\n\n        if (moved && !awaitingDragStarted) {\n          toggleClass(dragEl, putSortable ? putSortable.options.ghostClass : this.options.ghostClass, false);\n        }\n\n        toggleClass(dragEl, this.options.chosenClass, false); // Drag stop event\n\n        _dispatchEvent({\n          sortable: this,\n          name: 'unchoose',\n          toEl: parentEl,\n          newIndex: null,\n          newDraggableIndex: null,\n          originalEvent: evt\n        });\n\n        if (rootEl !== parentEl) {\n          if (newIndex >= 0) {\n            // Add event\n            _dispatchEvent({\n              rootEl: parentEl,\n              name: 'add',\n              toEl: parentEl,\n              fromEl: rootEl,\n              originalEvent: evt\n            }); // Remove event\n\n\n            _dispatchEvent({\n              sortable: this,\n              name: 'remove',\n              toEl: parentEl,\n              originalEvent: evt\n            }); // drag from one list and drop into another\n\n\n            _dispatchEvent({\n              rootEl: parentEl,\n              name: 'sort',\n              toEl: parentEl,\n              fromEl: rootEl,\n              originalEvent: evt\n            });\n\n            _dispatchEvent({\n              sortable: this,\n              name: 'sort',\n              toEl: parentEl,\n              originalEvent: evt\n            });\n          }\n\n          putSortable && putSortable.save();\n        } else {\n          if (newIndex !== oldIndex) {\n            if (newIndex >= 0) {\n              // drag & drop within the same list\n              _dispatchEvent({\n                sortable: this,\n                name: 'update',\n                toEl: parentEl,\n                originalEvent: evt\n              });\n\n              _dispatchEvent({\n                sortable: this,\n                name: 'sort',\n                toEl: parentEl,\n                originalEvent: evt\n              });\n            }\n          }\n        }\n\n        if (Sortable.active) {\n          /* jshint eqnull:true */\n          if (newIndex == null || newIndex === -1) {\n            newIndex = oldIndex;\n            newDraggableIndex = oldDraggableIndex;\n          }\n\n          _dispatchEvent({\n            sortable: this,\n            name: 'end',\n            toEl: parentEl,\n            originalEvent: evt\n          }); // Save sorting\n\n\n          this.save();\n        }\n      }\n    }\n\n    this._nulling();\n  },\n  _nulling: function _nulling() {\n    pluginEvent('nulling', this);\n    rootEl = dragEl = parentEl = ghostEl = nextEl = cloneEl = lastDownEl = cloneHidden = tapEvt = touchEvt = moved = newIndex = newDraggableIndex = oldIndex = oldDraggableIndex = lastTarget = lastDirection = putSortable = activeGroup = Sortable.dragged = Sortable.ghost = Sortable.clone = Sortable.active = null;\n    savedInputChecked.forEach(function (el) {\n      el.checked = true;\n    });\n    savedInputChecked.length = lastDx = lastDy = 0;\n  },\n  handleEvent: function handleEvent(\n  /**Event*/\n  evt) {\n    switch (evt.type) {\n      case 'drop':\n      case 'dragend':\n        this._onDrop(evt);\n\n        break;\n\n      case 'dragenter':\n      case 'dragover':\n        if (dragEl) {\n          this._onDragOver(evt);\n\n          _globalDragOver(evt);\n        }\n\n        break;\n\n      case 'selectstart':\n        evt.preventDefault();\n        break;\n    }\n  },\n\n  /**\n   * Serializes the item into an array of string.\n   * @returns {String[]}\n   */\n  toArray: function toArray() {\n    var order = [],\n        el,\n        children = this.el.children,\n        i = 0,\n        n = children.length,\n        options = this.options;\n\n    for (; i < n; i++) {\n      el = children[i];\n\n      if (closest(el, options.draggable, this.el, false)) {\n        order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));\n      }\n    }\n\n    return order;\n  },\n\n  /**\n   * Sorts the elements according to the array.\n   * @param  {String[]}  order  order of the items\n   */\n  sort: function sort(order, useAnimation) {\n    var items = {},\n        rootEl = this.el;\n    this.toArray().forEach(function (id, i) {\n      var el = rootEl.children[i];\n\n      if (closest(el, this.options.draggable, rootEl, false)) {\n        items[id] = el;\n      }\n    }, this);\n    useAnimation && this.captureAnimationState();\n    order.forEach(function (id) {\n      if (items[id]) {\n        rootEl.removeChild(items[id]);\n        rootEl.appendChild(items[id]);\n      }\n    });\n    useAnimation && this.animateAll();\n  },\n\n  /**\n   * Save the current sorting\n   */\n  save: function save() {\n    var store = this.options.store;\n    store && store.set && store.set(this);\n  },\n\n  /**\n   * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.\n   * @param   {HTMLElement}  el\n   * @param   {String}       [selector]  default: `options.draggable`\n   * @returns {HTMLElement|null}\n   */\n  closest: function closest$1(el, selector) {\n    return closest(el, selector || this.options.draggable, this.el, false);\n  },\n\n  /**\n   * Set/get option\n   * @param   {string} name\n   * @param   {*}      [value]\n   * @returns {*}\n   */\n  option: function option(name, value) {\n    var options = this.options;\n\n    if (value === void 0) {\n      return options[name];\n    } else {\n      var modifiedValue = PluginManager.modifyOption(this, name, value);\n\n      if (typeof modifiedValue !== 'undefined') {\n        options[name] = modifiedValue;\n      } else {\n        options[name] = value;\n      }\n\n      if (name === 'group') {\n        _prepareGroup(options);\n      }\n    }\n  },\n\n  /**\n   * Destroy\n   */\n  destroy: function destroy() {\n    pluginEvent('destroy', this);\n    var el = this.el;\n    el[expando] = null;\n    off(el, 'mousedown', this._onTapStart);\n    off(el, 'touchstart', this._onTapStart);\n    off(el, 'pointerdown', this._onTapStart);\n\n    if (this.nativeDraggable) {\n      off(el, 'dragover', this);\n      off(el, 'dragenter', this);\n    } // Remove draggable attributes\n\n\n    Array.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {\n      el.removeAttribute('draggable');\n    });\n\n    this._onDrop();\n\n    this._disableDelayedDragEvents();\n\n    sortables.splice(sortables.indexOf(this.el), 1);\n    this.el = el = null;\n  },\n  _hideClone: function _hideClone() {\n    if (!cloneHidden) {\n      pluginEvent('hideClone', this);\n      if (Sortable.eventCanceled) return;\n      css(cloneEl, 'display', 'none');\n\n      if (this.options.removeCloneOnHide && cloneEl.parentNode) {\n        cloneEl.parentNode.removeChild(cloneEl);\n      }\n\n      cloneHidden = true;\n    }\n  },\n  _showClone: function _showClone(putSortable) {\n    if (putSortable.lastPutMode !== 'clone') {\n      this._hideClone();\n\n      return;\n    }\n\n    if (cloneHidden) {\n      pluginEvent('showClone', this);\n      if (Sortable.eventCanceled) return; // show clone at dragEl or original position\n\n      if (dragEl.parentNode == rootEl && !this.options.group.revertClone) {\n        rootEl.insertBefore(cloneEl, dragEl);\n      } else if (nextEl) {\n        rootEl.insertBefore(cloneEl, nextEl);\n      } else {\n        rootEl.appendChild(cloneEl);\n      }\n\n      if (this.options.group.revertClone) {\n        this.animate(dragEl, cloneEl);\n      }\n\n      css(cloneEl, 'display', '');\n      cloneHidden = false;\n    }\n  }\n};\n\nfunction _globalDragOver(\n/**Event*/\nevt) {\n  if (evt.dataTransfer) {\n    evt.dataTransfer.dropEffect = 'move';\n  }\n\n  evt.cancelable && evt.preventDefault();\n}\n\nfunction _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvent, willInsertAfter) {\n  var evt,\n      sortable = fromEl[expando],\n      onMoveFn = sortable.options.onMove,\n      retVal; // Support for new CustomEvent feature\n\n  if (window.CustomEvent && !IE11OrLess && !Edge) {\n    evt = new CustomEvent('move', {\n      bubbles: true,\n      cancelable: true\n    });\n  } else {\n    evt = document.createEvent('Event');\n    evt.initEvent('move', true, true);\n  }\n\n  evt.to = toEl;\n  evt.from = fromEl;\n  evt.dragged = dragEl;\n  evt.draggedRect = dragRect;\n  evt.related = targetEl || toEl;\n  evt.relatedRect = targetRect || getRect(toEl);\n  evt.willInsertAfter = willInsertAfter;\n  evt.originalEvent = originalEvent;\n  fromEl.dispatchEvent(evt);\n\n  if (onMoveFn) {\n    retVal = onMoveFn.call(sortable, evt, originalEvent);\n  }\n\n  return retVal;\n}\n\nfunction _disableDraggable(el) {\n  el.draggable = false;\n}\n\nfunction _unsilent() {\n  _silent = false;\n}\n\nfunction _ghostIsFirst(evt, vertical, sortable) {\n  var rect = getRect(getChild(sortable.el, 0, sortable.options, true));\n  var spacer = 10;\n  return vertical ? evt.clientX < rect.left - spacer || evt.clientY < rect.top && evt.clientX < rect.right : evt.clientY < rect.top - spacer || evt.clientY < rect.bottom && evt.clientX < rect.left;\n}\n\nfunction _ghostIsLast(evt, vertical, sortable) {\n  var rect = getRect(lastChild(sortable.el, sortable.options.draggable));\n  var spacer = 10;\n  return vertical ? evt.clientX > rect.right + spacer || evt.clientX <= rect.right && evt.clientY > rect.bottom && evt.clientX >= rect.left : evt.clientX > rect.right && evt.clientY > rect.top || evt.clientX <= rect.right && evt.clientY > rect.bottom + spacer;\n}\n\nfunction _getSwapDirection(evt, target, targetRect, vertical, swapThreshold, invertedSwapThreshold, invertSwap, isLastTarget) {\n  var mouseOnAxis = vertical ? evt.clientY : evt.clientX,\n      targetLength = vertical ? targetRect.height : targetRect.width,\n      targetS1 = vertical ? targetRect.top : targetRect.left,\n      targetS2 = vertical ? targetRect.bottom : targetRect.right,\n      invert = false;\n\n  if (!invertSwap) {\n    // Never invert or create dragEl shadow when target movemenet causes mouse to move past the end of regular swapThreshold\n    if (isLastTarget && targetMoveDistance < targetLength * swapThreshold) {\n      // multiplied only by swapThreshold because mouse will already be inside target by (1 - threshold) * targetLength / 2\n      // check if past first invert threshold on side opposite of lastDirection\n      if (!pastFirstInvertThresh && (lastDirection === 1 ? mouseOnAxis > targetS1 + targetLength * invertedSwapThreshold / 2 : mouseOnAxis < targetS2 - targetLength * invertedSwapThreshold / 2)) {\n        // past first invert threshold, do not restrict inverted threshold to dragEl shadow\n        pastFirstInvertThresh = true;\n      }\n\n      if (!pastFirstInvertThresh) {\n        // dragEl shadow (target move distance shadow)\n        if (lastDirection === 1 ? mouseOnAxis < targetS1 + targetMoveDistance // over dragEl shadow\n        : mouseOnAxis > targetS2 - targetMoveDistance) {\n          return -lastDirection;\n        }\n      } else {\n        invert = true;\n      }\n    } else {\n      // Regular\n      if (mouseOnAxis > targetS1 + targetLength * (1 - swapThreshold) / 2 && mouseOnAxis < targetS2 - targetLength * (1 - swapThreshold) / 2) {\n        return _getInsertDirection(target);\n      }\n    }\n  }\n\n  invert = invert || invertSwap;\n\n  if (invert) {\n    // Invert of regular\n    if (mouseOnAxis < targetS1 + targetLength * invertedSwapThreshold / 2 || mouseOnAxis > targetS2 - targetLength * invertedSwapThreshold / 2) {\n      return mouseOnAxis > targetS1 + targetLength / 2 ? 1 : -1;\n    }\n  }\n\n  return 0;\n}\n/**\n * Gets the direction dragEl must be swapped relative to target in order to make it\n * seem that dragEl has been \"inserted\" into that element's position\n * @param  {HTMLElement} target       The target whose position dragEl is being inserted at\n * @return {Number}                   Direction dragEl must be swapped\n */\n\n\nfunction _getInsertDirection(target) {\n  if (index(dragEl) < index(target)) {\n    return 1;\n  } else {\n    return -1;\n  }\n}\n/**\n * Generate id\n * @param   {HTMLElement} el\n * @returns {String}\n * @private\n */\n\n\nfunction _generateId(el) {\n  var str = el.tagName + el.className + el.src + el.href + el.textContent,\n      i = str.length,\n      sum = 0;\n\n  while (i--) {\n    sum += str.charCodeAt(i);\n  }\n\n  return sum.toString(36);\n}\n\nfunction _saveInputCheckedState(root) {\n  savedInputChecked.length = 0;\n  var inputs = root.getElementsByTagName('input');\n  var idx = inputs.length;\n\n  while (idx--) {\n    var el = inputs[idx];\n    el.checked && savedInputChecked.push(el);\n  }\n}\n\nfunction _nextTick(fn) {\n  return setTimeout(fn, 0);\n}\n\nfunction _cancelNextTick(id) {\n  return clearTimeout(id);\n} // Fixed #973:\n\n\nif (documentExists) {\n  on(document, 'touchmove', function (evt) {\n    if ((Sortable.active || awaitingDragStarted) && evt.cancelable) {\n      evt.preventDefault();\n    }\n  });\n} // Export utils\n\n\nSortable.utils = {\n  on: on,\n  off: off,\n  css: css,\n  find: find,\n  is: function is(el, selector) {\n    return !!closest(el, selector, el, false);\n  },\n  extend: extend,\n  throttle: throttle,\n  closest: closest,\n  toggleClass: toggleClass,\n  clone: clone,\n  index: index,\n  nextTick: _nextTick,\n  cancelNextTick: _cancelNextTick,\n  detectDirection: _detectDirection,\n  getChild: getChild\n};\n/**\n * Get the Sortable instance of an element\n * @param  {HTMLElement} element The element\n * @return {Sortable|undefined}         The instance of Sortable\n */\n\nSortable.get = function (element) {\n  return element[expando];\n};\n/**\n * Mount a plugin to Sortable\n * @param  {...SortablePlugin|SortablePlugin[]} plugins       Plugins being mounted\n */\n\n\nSortable.mount = function () {\n  for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {\n    plugins[_key] = arguments[_key];\n  }\n\n  if (plugins[0].constructor === Array) plugins = plugins[0];\n  plugins.forEach(function (plugin) {\n    if (!plugin.prototype || !plugin.prototype.constructor) {\n      throw \"Sortable: Mounted plugin must be a constructor function, not \".concat({}.toString.call(plugin));\n    }\n\n    if (plugin.utils) Sortable.utils = _objectSpread2(_objectSpread2({}, Sortable.utils), plugin.utils);\n    PluginManager.mount(plugin);\n  });\n};\n/**\n * Create sortable instance\n * @param {HTMLElement}  el\n * @param {Object}      [options]\n */\n\n\nSortable.create = function (el, options) {\n  return new Sortable(el, options);\n}; // Export\n\n\nSortable.version = version;\n\nvar autoScrolls = [],\n    scrollEl,\n    scrollRootEl,\n    scrolling = false,\n    lastAutoScrollX,\n    lastAutoScrollY,\n    touchEvt$1,\n    pointerElemChangedInterval;\n\nfunction AutoScrollPlugin() {\n  function AutoScroll() {\n    this.defaults = {\n      scroll: true,\n      forceAutoScrollFallback: false,\n      scrollSensitivity: 30,\n      scrollSpeed: 10,\n      bubbleScroll: true\n    }; // Bind all private methods\n\n    for (var fn in this) {\n      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {\n        this[fn] = this[fn].bind(this);\n      }\n    }\n  }\n\n  AutoScroll.prototype = {\n    dragStarted: function dragStarted(_ref) {\n      var originalEvent = _ref.originalEvent;\n\n      if (this.sortable.nativeDraggable) {\n        on(document, 'dragover', this._handleAutoScroll);\n      } else {\n        if (this.options.supportPointer) {\n          on(document, 'pointermove', this._handleFallbackAutoScroll);\n        } else if (originalEvent.touches) {\n          on(document, 'touchmove', this._handleFallbackAutoScroll);\n        } else {\n          on(document, 'mousemove', this._handleFallbackAutoScroll);\n        }\n      }\n    },\n    dragOverCompleted: function dragOverCompleted(_ref2) {\n      var originalEvent = _ref2.originalEvent;\n\n      // For when bubbling is canceled and using fallback (fallback 'touchmove' always reached)\n      if (!this.options.dragOverBubble && !originalEvent.rootEl) {\n        this._handleAutoScroll(originalEvent);\n      }\n    },\n    drop: function drop() {\n      if (this.sortable.nativeDraggable) {\n        off(document, 'dragover', this._handleAutoScroll);\n      } else {\n        off(document, 'pointermove', this._handleFallbackAutoScroll);\n        off(document, 'touchmove', this._handleFallbackAutoScroll);\n        off(document, 'mousemove', this._handleFallbackAutoScroll);\n      }\n\n      clearPointerElemChangedInterval();\n      clearAutoScrolls();\n      cancelThrottle();\n    },\n    nulling: function nulling() {\n      touchEvt$1 = scrollRootEl = scrollEl = scrolling = pointerElemChangedInterval = lastAutoScrollX = lastAutoScrollY = null;\n      autoScrolls.length = 0;\n    },\n    _handleFallbackAutoScroll: function _handleFallbackAutoScroll(evt) {\n      this._handleAutoScroll(evt, true);\n    },\n    _handleAutoScroll: function _handleAutoScroll(evt, fallback) {\n      var _this = this;\n\n      var x = (evt.touches ? evt.touches[0] : evt).clientX,\n          y = (evt.touches ? evt.touches[0] : evt).clientY,\n          elem = document.elementFromPoint(x, y);\n      touchEvt$1 = evt; // IE does not seem to have native autoscroll,\n      // Edge's autoscroll seems too conditional,\n      // MACOS Safari does not have autoscroll,\n      // Firefox and Chrome are good\n\n      if (fallback || this.options.forceAutoScrollFallback || Edge || IE11OrLess || Safari) {\n        autoScroll(evt, this.options, elem, fallback); // Listener for pointer element change\n\n        var ogElemScroller = getParentAutoScrollElement(elem, true);\n\n        if (scrolling && (!pointerElemChangedInterval || x !== lastAutoScrollX || y !== lastAutoScrollY)) {\n          pointerElemChangedInterval && clearPointerElemChangedInterval(); // Detect for pointer elem change, emulating native DnD behaviour\n\n          pointerElemChangedInterval = setInterval(function () {\n            var newElem = getParentAutoScrollElement(document.elementFromPoint(x, y), true);\n\n            if (newElem !== ogElemScroller) {\n              ogElemScroller = newElem;\n              clearAutoScrolls();\n            }\n\n            autoScroll(evt, _this.options, newElem, fallback);\n          }, 10);\n          lastAutoScrollX = x;\n          lastAutoScrollY = y;\n        }\n      } else {\n        // if DnD is enabled (and browser has good autoscrolling), first autoscroll will already scroll, so get parent autoscroll of first autoscroll\n        if (!this.options.bubbleScroll || getParentAutoScrollElement(elem, true) === getWindowScrollingElement()) {\n          clearAutoScrolls();\n          return;\n        }\n\n        autoScroll(evt, this.options, getParentAutoScrollElement(elem, false), false);\n      }\n    }\n  };\n  return _extends(AutoScroll, {\n    pluginName: 'scroll',\n    initializeByDefault: true\n  });\n}\n\nfunction clearAutoScrolls() {\n  autoScrolls.forEach(function (autoScroll) {\n    clearInterval(autoScroll.pid);\n  });\n  autoScrolls = [];\n}\n\nfunction clearPointerElemChangedInterval() {\n  clearInterval(pointerElemChangedInterval);\n}\n\nvar autoScroll = throttle(function (evt, options, rootEl, isFallback) {\n  // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521\n  if (!options.scroll) return;\n  var x = (evt.touches ? evt.touches[0] : evt).clientX,\n      y = (evt.touches ? evt.touches[0] : evt).clientY,\n      sens = options.scrollSensitivity,\n      speed = options.scrollSpeed,\n      winScroller = getWindowScrollingElement();\n  var scrollThisInstance = false,\n      scrollCustomFn; // New scroll root, set scrollEl\n\n  if (scrollRootEl !== rootEl) {\n    scrollRootEl = rootEl;\n    clearAutoScrolls();\n    scrollEl = options.scroll;\n    scrollCustomFn = options.scrollFn;\n\n    if (scrollEl === true) {\n      scrollEl = getParentAutoScrollElement(rootEl, true);\n    }\n  }\n\n  var layersOut = 0;\n  var currentParent = scrollEl;\n\n  do {\n    var el = currentParent,\n        rect = getRect(el),\n        top = rect.top,\n        bottom = rect.bottom,\n        left = rect.left,\n        right = rect.right,\n        width = rect.width,\n        height = rect.height,\n        canScrollX = void 0,\n        canScrollY = void 0,\n        scrollWidth = el.scrollWidth,\n        scrollHeight = el.scrollHeight,\n        elCSS = css(el),\n        scrollPosX = el.scrollLeft,\n        scrollPosY = el.scrollTop;\n\n    if (el === winScroller) {\n      canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll' || elCSS.overflowX === 'visible');\n      canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll' || elCSS.overflowY === 'visible');\n    } else {\n      canScrollX = width < scrollWidth && (elCSS.overflowX === 'auto' || elCSS.overflowX === 'scroll');\n      canScrollY = height < scrollHeight && (elCSS.overflowY === 'auto' || elCSS.overflowY === 'scroll');\n    }\n\n    var vx = canScrollX && (Math.abs(right - x) <= sens && scrollPosX + width < scrollWidth) - (Math.abs(left - x) <= sens && !!scrollPosX);\n    var vy = canScrollY && (Math.abs(bottom - y) <= sens && scrollPosY + height < scrollHeight) - (Math.abs(top - y) <= sens && !!scrollPosY);\n\n    if (!autoScrolls[layersOut]) {\n      for (var i = 0; i <= layersOut; i++) {\n        if (!autoScrolls[i]) {\n          autoScrolls[i] = {};\n        }\n      }\n    }\n\n    if (autoScrolls[layersOut].vx != vx || autoScrolls[layersOut].vy != vy || autoScrolls[layersOut].el !== el) {\n      autoScrolls[layersOut].el = el;\n      autoScrolls[layersOut].vx = vx;\n      autoScrolls[layersOut].vy = vy;\n      clearInterval(autoScrolls[layersOut].pid);\n\n      if (vx != 0 || vy != 0) {\n        scrollThisInstance = true;\n        /* jshint loopfunc:true */\n\n        autoScrolls[layersOut].pid = setInterval(function () {\n          // emulate drag over during autoscroll (fallback), emulating native DnD behaviour\n          if (isFallback && this.layer === 0) {\n            Sortable.active._onTouchMove(touchEvt$1); // To move ghost if it is positioned absolutely\n\n          }\n\n          var scrollOffsetY = autoScrolls[this.layer].vy ? autoScrolls[this.layer].vy * speed : 0;\n          var scrollOffsetX = autoScrolls[this.layer].vx ? autoScrolls[this.layer].vx * speed : 0;\n\n          if (typeof scrollCustomFn === 'function') {\n            if (scrollCustomFn.call(Sortable.dragged.parentNode[expando], scrollOffsetX, scrollOffsetY, evt, touchEvt$1, autoScrolls[this.layer].el) !== 'continue') {\n              return;\n            }\n          }\n\n          scrollBy(autoScrolls[this.layer].el, scrollOffsetX, scrollOffsetY);\n        }.bind({\n          layer: layersOut\n        }), 24);\n      }\n    }\n\n    layersOut++;\n  } while (options.bubbleScroll && currentParent !== winScroller && (currentParent = getParentAutoScrollElement(currentParent, false)));\n\n  scrolling = scrollThisInstance; // in case another function catches scrolling as false in between when it is not\n}, 30);\n\nvar drop = function drop(_ref) {\n  var originalEvent = _ref.originalEvent,\n      putSortable = _ref.putSortable,\n      dragEl = _ref.dragEl,\n      activeSortable = _ref.activeSortable,\n      dispatchSortableEvent = _ref.dispatchSortableEvent,\n      hideGhostForTarget = _ref.hideGhostForTarget,\n      unhideGhostForTarget = _ref.unhideGhostForTarget;\n  if (!originalEvent) return;\n  var toSortable = putSortable || activeSortable;\n  hideGhostForTarget();\n  var touch = originalEvent.changedTouches && originalEvent.changedTouches.length ? originalEvent.changedTouches[0] : originalEvent;\n  var target = document.elementFromPoint(touch.clientX, touch.clientY);\n  unhideGhostForTarget();\n\n  if (toSortable && !toSortable.el.contains(target)) {\n    dispatchSortableEvent('spill');\n    this.onSpill({\n      dragEl: dragEl,\n      putSortable: putSortable\n    });\n  }\n};\n\nfunction Revert() {}\n\nRevert.prototype = {\n  startIndex: null,\n  dragStart: function dragStart(_ref2) {\n    var oldDraggableIndex = _ref2.oldDraggableIndex;\n    this.startIndex = oldDraggableIndex;\n  },\n  onSpill: function onSpill(_ref3) {\n    var dragEl = _ref3.dragEl,\n        putSortable = _ref3.putSortable;\n    this.sortable.captureAnimationState();\n\n    if (putSortable) {\n      putSortable.captureAnimationState();\n    }\n\n    var nextSibling = getChild(this.sortable.el, this.startIndex, this.options);\n\n    if (nextSibling) {\n      this.sortable.el.insertBefore(dragEl, nextSibling);\n    } else {\n      this.sortable.el.appendChild(dragEl);\n    }\n\n    this.sortable.animateAll();\n\n    if (putSortable) {\n      putSortable.animateAll();\n    }\n  },\n  drop: drop\n};\n\n_extends(Revert, {\n  pluginName: 'revertOnSpill'\n});\n\nfunction Remove() {}\n\nRemove.prototype = {\n  onSpill: function onSpill(_ref4) {\n    var dragEl = _ref4.dragEl,\n        putSortable = _ref4.putSortable;\n    var parentSortable = putSortable || this.sortable;\n    parentSortable.captureAnimationState();\n    dragEl.parentNode && dragEl.parentNode.removeChild(dragEl);\n    parentSortable.animateAll();\n  },\n  drop: drop\n};\n\n_extends(Remove, {\n  pluginName: 'removeOnSpill'\n});\n\nvar lastSwapEl;\n\nfunction SwapPlugin() {\n  function Swap() {\n    this.defaults = {\n      swapClass: 'sortable-swap-highlight'\n    };\n  }\n\n  Swap.prototype = {\n    dragStart: function dragStart(_ref) {\n      var dragEl = _ref.dragEl;\n      lastSwapEl = dragEl;\n    },\n    dragOverValid: function dragOverValid(_ref2) {\n      var completed = _ref2.completed,\n          target = _ref2.target,\n          onMove = _ref2.onMove,\n          activeSortable = _ref2.activeSortable,\n          changed = _ref2.changed,\n          cancel = _ref2.cancel;\n      if (!activeSortable.options.swap) return;\n      var el = this.sortable.el,\n          options = this.options;\n\n      if (target && target !== el) {\n        var prevSwapEl = lastSwapEl;\n\n        if (onMove(target) !== false) {\n          toggleClass(target, options.swapClass, true);\n          lastSwapEl = target;\n        } else {\n          lastSwapEl = null;\n        }\n\n        if (prevSwapEl && prevSwapEl !== lastSwapEl) {\n          toggleClass(prevSwapEl, options.swapClass, false);\n        }\n      }\n\n      changed();\n      completed(true);\n      cancel();\n    },\n    drop: function drop(_ref3) {\n      var activeSortable = _ref3.activeSortable,\n          putSortable = _ref3.putSortable,\n          dragEl = _ref3.dragEl;\n      var toSortable = putSortable || this.sortable;\n      var options = this.options;\n      lastSwapEl && toggleClass(lastSwapEl, options.swapClass, false);\n\n      if (lastSwapEl && (options.swap || putSortable && putSortable.options.swap)) {\n        if (dragEl !== lastSwapEl) {\n          toSortable.captureAnimationState();\n          if (toSortable !== activeSortable) activeSortable.captureAnimationState();\n          swapNodes(dragEl, lastSwapEl);\n          toSortable.animateAll();\n          if (toSortable !== activeSortable) activeSortable.animateAll();\n        }\n      }\n    },\n    nulling: function nulling() {\n      lastSwapEl = null;\n    }\n  };\n  return _extends(Swap, {\n    pluginName: 'swap',\n    eventProperties: function eventProperties() {\n      return {\n        swapItem: lastSwapEl\n      };\n    }\n  });\n}\n\nfunction swapNodes(n1, n2) {\n  var p1 = n1.parentNode,\n      p2 = n2.parentNode,\n      i1,\n      i2;\n  if (!p1 || !p2 || p1.isEqualNode(n2) || p2.isEqualNode(n1)) return;\n  i1 = index(n1);\n  i2 = index(n2);\n\n  if (p1.isEqualNode(p2) && i1 < i2) {\n    i2++;\n  }\n\n  p1.insertBefore(n2, p1.children[i1]);\n  p2.insertBefore(n1, p2.children[i2]);\n}\n\nvar multiDragElements = [],\n    multiDragClones = [],\n    lastMultiDragSelect,\n    // for selection with modifier key down (SHIFT)\nmultiDragSortable,\n    initialFolding = false,\n    // Initial multi-drag fold when drag started\nfolding = false,\n    // Folding any other time\ndragStarted = false,\n    dragEl$1,\n    clonesFromRect,\n    clonesHidden;\n\nfunction MultiDragPlugin() {\n  function MultiDrag(sortable) {\n    // Bind all private methods\n    for (var fn in this) {\n      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {\n        this[fn] = this[fn].bind(this);\n      }\n    }\n\n    if (sortable.options.supportPointer) {\n      on(document, 'pointerup', this._deselectMultiDrag);\n    } else {\n      on(document, 'mouseup', this._deselectMultiDrag);\n      on(document, 'touchend', this._deselectMultiDrag);\n    }\n\n    on(document, 'keydown', this._checkKeyDown);\n    on(document, 'keyup', this._checkKeyUp);\n    this.defaults = {\n      selectedClass: 'sortable-selected',\n      multiDragKey: null,\n      setData: function setData(dataTransfer, dragEl) {\n        var data = '';\n\n        if (multiDragElements.length && multiDragSortable === sortable) {\n          multiDragElements.forEach(function (multiDragElement, i) {\n            data += (!i ? '' : ', ') + multiDragElement.textContent;\n          });\n        } else {\n          data = dragEl.textContent;\n        }\n\n        dataTransfer.setData('Text', data);\n      }\n    };\n  }\n\n  MultiDrag.prototype = {\n    multiDragKeyDown: false,\n    isMultiDrag: false,\n    delayStartGlobal: function delayStartGlobal(_ref) {\n      var dragged = _ref.dragEl;\n      dragEl$1 = dragged;\n    },\n    delayEnded: function delayEnded() {\n      this.isMultiDrag = ~multiDragElements.indexOf(dragEl$1);\n    },\n    setupClone: function setupClone(_ref2) {\n      var sortable = _ref2.sortable,\n          cancel = _ref2.cancel;\n      if (!this.isMultiDrag) return;\n\n      for (var i = 0; i < multiDragElements.length; i++) {\n        multiDragClones.push(clone(multiDragElements[i]));\n        multiDragClones[i].sortableIndex = multiDragElements[i].sortableIndex;\n        multiDragClones[i].draggable = false;\n        multiDragClones[i].style['will-change'] = '';\n        toggleClass(multiDragClones[i], this.options.selectedClass, false);\n        multiDragElements[i] === dragEl$1 && toggleClass(multiDragClones[i], this.options.chosenClass, false);\n      }\n\n      sortable._hideClone();\n\n      cancel();\n    },\n    clone: function clone(_ref3) {\n      var sortable = _ref3.sortable,\n          rootEl = _ref3.rootEl,\n          dispatchSortableEvent = _ref3.dispatchSortableEvent,\n          cancel = _ref3.cancel;\n      if (!this.isMultiDrag) return;\n\n      if (!this.options.removeCloneOnHide) {\n        if (multiDragElements.length && multiDragSortable === sortable) {\n          insertMultiDragClones(true, rootEl);\n          dispatchSortableEvent('clone');\n          cancel();\n        }\n      }\n    },\n    showClone: function showClone(_ref4) {\n      var cloneNowShown = _ref4.cloneNowShown,\n          rootEl = _ref4.rootEl,\n          cancel = _ref4.cancel;\n      if (!this.isMultiDrag) return;\n      insertMultiDragClones(false, rootEl);\n      multiDragClones.forEach(function (clone) {\n        css(clone, 'display', '');\n      });\n      cloneNowShown();\n      clonesHidden = false;\n      cancel();\n    },\n    hideClone: function hideClone(_ref5) {\n      var _this = this;\n\n      var sortable = _ref5.sortable,\n          cloneNowHidden = _ref5.cloneNowHidden,\n          cancel = _ref5.cancel;\n      if (!this.isMultiDrag) return;\n      multiDragClones.forEach(function (clone) {\n        css(clone, 'display', 'none');\n\n        if (_this.options.removeCloneOnHide && clone.parentNode) {\n          clone.parentNode.removeChild(clone);\n        }\n      });\n      cloneNowHidden();\n      clonesHidden = true;\n      cancel();\n    },\n    dragStartGlobal: function dragStartGlobal(_ref6) {\n      var sortable = _ref6.sortable;\n\n      if (!this.isMultiDrag && multiDragSortable) {\n        multiDragSortable.multiDrag._deselectMultiDrag();\n      }\n\n      multiDragElements.forEach(function (multiDragElement) {\n        multiDragElement.sortableIndex = index(multiDragElement);\n      }); // Sort multi-drag elements\n\n      multiDragElements = multiDragElements.sort(function (a, b) {\n        return a.sortableIndex - b.sortableIndex;\n      });\n      dragStarted = true;\n    },\n    dragStarted: function dragStarted(_ref7) {\n      var _this2 = this;\n\n      var sortable = _ref7.sortable;\n      if (!this.isMultiDrag) return;\n\n      if (this.options.sort) {\n        // Capture rects,\n        // hide multi drag elements (by positioning them absolute),\n        // set multi drag elements rects to dragRect,\n        // show multi drag elements,\n        // animate to rects,\n        // unset rects & remove from DOM\n        sortable.captureAnimationState();\n\n        if (this.options.animation) {\n          multiDragElements.forEach(function (multiDragElement) {\n            if (multiDragElement === dragEl$1) return;\n            css(multiDragElement, 'position', 'absolute');\n          });\n          var dragRect = getRect(dragEl$1, false, true, true);\n          multiDragElements.forEach(function (multiDragElement) {\n            if (multiDragElement === dragEl$1) return;\n            setRect(multiDragElement, dragRect);\n          });\n          folding = true;\n          initialFolding = true;\n        }\n      }\n\n      sortable.animateAll(function () {\n        folding = false;\n        initialFolding = false;\n\n        if (_this2.options.animation) {\n          multiDragElements.forEach(function (multiDragElement) {\n            unsetRect(multiDragElement);\n          });\n        } // Remove all auxiliary multidrag items from el, if sorting enabled\n\n\n        if (_this2.options.sort) {\n          removeMultiDragElements();\n        }\n      });\n    },\n    dragOver: function dragOver(_ref8) {\n      var target = _ref8.target,\n          completed = _ref8.completed,\n          cancel = _ref8.cancel;\n\n      if (folding && ~multiDragElements.indexOf(target)) {\n        completed(false);\n        cancel();\n      }\n    },\n    revert: function revert(_ref9) {\n      var fromSortable = _ref9.fromSortable,\n          rootEl = _ref9.rootEl,\n          sortable = _ref9.sortable,\n          dragRect = _ref9.dragRect;\n\n      if (multiDragElements.length > 1) {\n        // Setup unfold animation\n        multiDragElements.forEach(function (multiDragElement) {\n          sortable.addAnimationState({\n            target: multiDragElement,\n            rect: folding ? getRect(multiDragElement) : dragRect\n          });\n          unsetRect(multiDragElement);\n          multiDragElement.fromRect = dragRect;\n          fromSortable.removeAnimationState(multiDragElement);\n        });\n        folding = false;\n        insertMultiDragElements(!this.options.removeCloneOnHide, rootEl);\n      }\n    },\n    dragOverCompleted: function dragOverCompleted(_ref10) {\n      var sortable = _ref10.sortable,\n          isOwner = _ref10.isOwner,\n          insertion = _ref10.insertion,\n          activeSortable = _ref10.activeSortable,\n          parentEl = _ref10.parentEl,\n          putSortable = _ref10.putSortable;\n      var options = this.options;\n\n      if (insertion) {\n        // Clones must be hidden before folding animation to capture dragRectAbsolute properly\n        if (isOwner) {\n          activeSortable._hideClone();\n        }\n\n        initialFolding = false; // If leaving sort:false root, or already folding - Fold to new location\n\n        if (options.animation && multiDragElements.length > 1 && (folding || !isOwner && !activeSortable.options.sort && !putSortable)) {\n          // Fold: Set all multi drag elements's rects to dragEl's rect when multi-drag elements are invisible\n          var dragRectAbsolute = getRect(dragEl$1, false, true, true);\n          multiDragElements.forEach(function (multiDragElement) {\n            if (multiDragElement === dragEl$1) return;\n            setRect(multiDragElement, dragRectAbsolute); // Move element(s) to end of parentEl so that it does not interfere with multi-drag clones insertion if they are inserted\n            // while folding, and so that we can capture them again because old sortable will no longer be fromSortable\n\n            parentEl.appendChild(multiDragElement);\n          });\n          folding = true;\n        } // Clones must be shown (and check to remove multi drags) after folding when interfering multiDragElements are moved out\n\n\n        if (!isOwner) {\n          // Only remove if not folding (folding will remove them anyways)\n          if (!folding) {\n            removeMultiDragElements();\n          }\n\n          if (multiDragElements.length > 1) {\n            var clonesHiddenBefore = clonesHidden;\n\n            activeSortable._showClone(sortable); // Unfold animation for clones if showing from hidden\n\n\n            if (activeSortable.options.animation && !clonesHidden && clonesHiddenBefore) {\n              multiDragClones.forEach(function (clone) {\n                activeSortable.addAnimationState({\n                  target: clone,\n                  rect: clonesFromRect\n                });\n                clone.fromRect = clonesFromRect;\n                clone.thisAnimationDuration = null;\n              });\n            }\n          } else {\n            activeSortable._showClone(sortable);\n          }\n        }\n      }\n    },\n    dragOverAnimationCapture: function dragOverAnimationCapture(_ref11) {\n      var dragRect = _ref11.dragRect,\n          isOwner = _ref11.isOwner,\n          activeSortable = _ref11.activeSortable;\n      multiDragElements.forEach(function (multiDragElement) {\n        multiDragElement.thisAnimationDuration = null;\n      });\n\n      if (activeSortable.options.animation && !isOwner && activeSortable.multiDrag.isMultiDrag) {\n        clonesFromRect = _extends({}, dragRect);\n        var dragMatrix = matrix(dragEl$1, true);\n        clonesFromRect.top -= dragMatrix.f;\n        clonesFromRect.left -= dragMatrix.e;\n      }\n    },\n    dragOverAnimationComplete: function dragOverAnimationComplete() {\n      if (folding) {\n        folding = false;\n        removeMultiDragElements();\n      }\n    },\n    drop: function drop(_ref12) {\n      var evt = _ref12.originalEvent,\n          rootEl = _ref12.rootEl,\n          parentEl = _ref12.parentEl,\n          sortable = _ref12.sortable,\n          dispatchSortableEvent = _ref12.dispatchSortableEvent,\n          oldIndex = _ref12.oldIndex,\n          putSortable = _ref12.putSortable;\n      var toSortable = putSortable || this.sortable;\n      if (!evt) return;\n      var options = this.options,\n          children = parentEl.children; // Multi-drag selection\n\n      if (!dragStarted) {\n        if (options.multiDragKey && !this.multiDragKeyDown) {\n          this._deselectMultiDrag();\n        }\n\n        toggleClass(dragEl$1, options.selectedClass, !~multiDragElements.indexOf(dragEl$1));\n\n        if (!~multiDragElements.indexOf(dragEl$1)) {\n          multiDragElements.push(dragEl$1);\n          dispatchEvent({\n            sortable: sortable,\n            rootEl: rootEl,\n            name: 'select',\n            targetEl: dragEl$1,\n            originalEvt: evt\n          }); // Modifier activated, select from last to dragEl\n\n          if (evt.shiftKey && lastMultiDragSelect && sortable.el.contains(lastMultiDragSelect)) {\n            var lastIndex = index(lastMultiDragSelect),\n                currentIndex = index(dragEl$1);\n\n            if (~lastIndex && ~currentIndex && lastIndex !== currentIndex) {\n              // Must include lastMultiDragSelect (select it), in case modified selection from no selection\n              // (but previous selection existed)\n              var n, i;\n\n              if (currentIndex > lastIndex) {\n                i = lastIndex;\n                n = currentIndex;\n              } else {\n                i = currentIndex;\n                n = lastIndex + 1;\n              }\n\n              for (; i < n; i++) {\n                if (~multiDragElements.indexOf(children[i])) continue;\n                toggleClass(children[i], options.selectedClass, true);\n                multiDragElements.push(children[i]);\n                dispatchEvent({\n                  sortable: sortable,\n                  rootEl: rootEl,\n                  name: 'select',\n                  targetEl: children[i],\n                  originalEvt: evt\n                });\n              }\n            }\n          } else {\n            lastMultiDragSelect = dragEl$1;\n          }\n\n          multiDragSortable = toSortable;\n        } else {\n          multiDragElements.splice(multiDragElements.indexOf(dragEl$1), 1);\n          lastMultiDragSelect = null;\n          dispatchEvent({\n            sortable: sortable,\n            rootEl: rootEl,\n            name: 'deselect',\n            targetEl: dragEl$1,\n            originalEvt: evt\n          });\n        }\n      } // Multi-drag drop\n\n\n      if (dragStarted && this.isMultiDrag) {\n        folding = false; // Do not \"unfold\" after around dragEl if reverted\n\n        if ((parentEl[expando].options.sort || parentEl !== rootEl) && multiDragElements.length > 1) {\n          var dragRect = getRect(dragEl$1),\n              multiDragIndex = index(dragEl$1, ':not(.' + this.options.selectedClass + ')');\n          if (!initialFolding && options.animation) dragEl$1.thisAnimationDuration = null;\n          toSortable.captureAnimationState();\n\n          if (!initialFolding) {\n            if (options.animation) {\n              dragEl$1.fromRect = dragRect;\n              multiDragElements.forEach(function (multiDragElement) {\n                multiDragElement.thisAnimationDuration = null;\n\n                if (multiDragElement !== dragEl$1) {\n                  var rect = folding ? getRect(multiDragElement) : dragRect;\n                  multiDragElement.fromRect = rect; // Prepare unfold animation\n\n                  toSortable.addAnimationState({\n                    target: multiDragElement,\n                    rect: rect\n                  });\n                }\n              });\n            } // Multi drag elements are not necessarily removed from the DOM on drop, so to reinsert\n            // properly they must all be removed\n\n\n            removeMultiDragElements();\n            multiDragElements.forEach(function (multiDragElement) {\n              if (children[multiDragIndex]) {\n                parentEl.insertBefore(multiDragElement, children[multiDragIndex]);\n              } else {\n                parentEl.appendChild(multiDragElement);\n              }\n\n              multiDragIndex++;\n            }); // If initial folding is done, the elements may have changed position because they are now\n            // unfolding around dragEl, even though dragEl may not have his index changed, so update event\n            // must be fired here as Sortable will not.\n\n            if (oldIndex === index(dragEl$1)) {\n              var update = false;\n              multiDragElements.forEach(function (multiDragElement) {\n                if (multiDragElement.sortableIndex !== index(multiDragElement)) {\n                  update = true;\n                  return;\n                }\n              });\n\n              if (update) {\n                dispatchSortableEvent('update');\n              }\n            }\n          } // Must be done after capturing individual rects (scroll bar)\n\n\n          multiDragElements.forEach(function (multiDragElement) {\n            unsetRect(multiDragElement);\n          });\n          toSortable.animateAll();\n        }\n\n        multiDragSortable = toSortable;\n      } // Remove clones if necessary\n\n\n      if (rootEl === parentEl || putSortable && putSortable.lastPutMode !== 'clone') {\n        multiDragClones.forEach(function (clone) {\n          clone.parentNode && clone.parentNode.removeChild(clone);\n        });\n      }\n    },\n    nullingGlobal: function nullingGlobal() {\n      this.isMultiDrag = dragStarted = false;\n      multiDragClones.length = 0;\n    },\n    destroyGlobal: function destroyGlobal() {\n      this._deselectMultiDrag();\n\n      off(document, 'pointerup', this._deselectMultiDrag);\n      off(document, 'mouseup', this._deselectMultiDrag);\n      off(document, 'touchend', this._deselectMultiDrag);\n      off(document, 'keydown', this._checkKeyDown);\n      off(document, 'keyup', this._checkKeyUp);\n    },\n    _deselectMultiDrag: function _deselectMultiDrag(evt) {\n      if (typeof dragStarted !== \"undefined\" && dragStarted) return; // Only deselect if selection is in this sortable\n\n      if (multiDragSortable !== this.sortable) return; // Only deselect if target is not item in this sortable\n\n      if (evt && closest(evt.target, this.options.draggable, this.sortable.el, false)) return; // Only deselect if left click\n\n      if (evt && evt.button !== 0) return;\n\n      while (multiDragElements.length) {\n        var el = multiDragElements[0];\n        toggleClass(el, this.options.selectedClass, false);\n        multiDragElements.shift();\n        dispatchEvent({\n          sortable: this.sortable,\n          rootEl: this.sortable.el,\n          name: 'deselect',\n          targetEl: el,\n          originalEvt: evt\n        });\n      }\n    },\n    _checkKeyDown: function _checkKeyDown(evt) {\n      if (evt.key === this.options.multiDragKey) {\n        this.multiDragKeyDown = true;\n      }\n    },\n    _checkKeyUp: function _checkKeyUp(evt) {\n      if (evt.key === this.options.multiDragKey) {\n        this.multiDragKeyDown = false;\n      }\n    }\n  };\n  return _extends(MultiDrag, {\n    // Static methods & properties\n    pluginName: 'multiDrag',\n    utils: {\n      /**\n       * Selects the provided multi-drag item\n       * @param  {HTMLElement} el    The element to be selected\n       */\n      select: function select(el) {\n        var sortable = el.parentNode[expando];\n        if (!sortable || !sortable.options.multiDrag || ~multiDragElements.indexOf(el)) return;\n\n        if (multiDragSortable && multiDragSortable !== sortable) {\n          multiDragSortable.multiDrag._deselectMultiDrag();\n\n          multiDragSortable = sortable;\n        }\n\n        toggleClass(el, sortable.options.selectedClass, true);\n        multiDragElements.push(el);\n      },\n\n      /**\n       * Deselects the provided multi-drag item\n       * @param  {HTMLElement} el    The element to be deselected\n       */\n      deselect: function deselect(el) {\n        var sortable = el.parentNode[expando],\n            index = multiDragElements.indexOf(el);\n        if (!sortable || !sortable.options.multiDrag || !~index) return;\n        toggleClass(el, sortable.options.selectedClass, false);\n        multiDragElements.splice(index, 1);\n      }\n    },\n    eventProperties: function eventProperties() {\n      var _this3 = this;\n\n      var oldIndicies = [],\n          newIndicies = [];\n      multiDragElements.forEach(function (multiDragElement) {\n        oldIndicies.push({\n          multiDragElement: multiDragElement,\n          index: multiDragElement.sortableIndex\n        }); // multiDragElements will already be sorted if folding\n\n        var newIndex;\n\n        if (folding && multiDragElement !== dragEl$1) {\n          newIndex = -1;\n        } else if (folding) {\n          newIndex = index(multiDragElement, ':not(.' + _this3.options.selectedClass + ')');\n        } else {\n          newIndex = index(multiDragElement);\n        }\n\n        newIndicies.push({\n          multiDragElement: multiDragElement,\n          index: newIndex\n        });\n      });\n      return {\n        items: _toConsumableArray(multiDragElements),\n        clones: [].concat(multiDragClones),\n        oldIndicies: oldIndicies,\n        newIndicies: newIndicies\n      };\n    },\n    optionListeners: {\n      multiDragKey: function multiDragKey(key) {\n        key = key.toLowerCase();\n\n        if (key === 'ctrl') {\n          key = 'Control';\n        } else if (key.length > 1) {\n          key = key.charAt(0).toUpperCase() + key.substr(1);\n        }\n\n        return key;\n      }\n    }\n  });\n}\n\nfunction insertMultiDragElements(clonesInserted, rootEl) {\n  multiDragElements.forEach(function (multiDragElement, i) {\n    var target = rootEl.children[multiDragElement.sortableIndex + (clonesInserted ? Number(i) : 0)];\n\n    if (target) {\n      rootEl.insertBefore(multiDragElement, target);\n    } else {\n      rootEl.appendChild(multiDragElement);\n    }\n  });\n}\n/**\n * Insert multi-drag clones\n * @param  {[Boolean]} elementsInserted  Whether the multi-drag elements are inserted\n * @param  {HTMLElement} rootEl\n */\n\n\nfunction insertMultiDragClones(elementsInserted, rootEl) {\n  multiDragClones.forEach(function (clone, i) {\n    var target = rootEl.children[clone.sortableIndex + (elementsInserted ? Number(i) : 0)];\n\n    if (target) {\n      rootEl.insertBefore(clone, target);\n    } else {\n      rootEl.appendChild(clone);\n    }\n  });\n}\n\nfunction removeMultiDragElements() {\n  multiDragElements.forEach(function (multiDragElement) {\n    if (multiDragElement === dragEl$1) return;\n    multiDragElement.parentNode && multiDragElement.parentNode.removeChild(multiDragElement);\n  });\n}\n\nSortable.mount(new AutoScrollPlugin());\nSortable.mount(Remove, Revert);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Sortable);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/sortablejs/modular/sortable.esm.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					result = fn();
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/js/app": 0,
/******/ 			"css/app": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			for(moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 				}
/******/ 			}
/******/ 			if(runtime) var result = runtime(__webpack_require__);
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkIds[i]] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunk"] = self["webpackChunk"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./assets/js/app.js")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./assets/css/app.scss")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;