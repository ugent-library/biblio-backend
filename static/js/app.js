/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./assets/js/app.js":
/*!**************************!*\
  !*** ./assets/js/app.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _ui_check_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui/check.js */ \"./assets/js/ui/check.js\");\n/* harmony import */ var _ui_bootstrap_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ui/bootstrap.js */ \"./assets/js/ui/bootstrap.js\");\n/* harmony import */ var _ui_draggable_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui/draggable.js */ \"./assets/js/ui/draggable.js\");\n/* harmony import */ var _ui_multiple_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ui/multiple.js */ \"./assets/js/ui/multiple.js\");\n/* harmony import */ var _ui_form_change_submit_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ui/form_change_submit.js */ \"./assets/js/ui/form_change_submit.js\");\n/* harmony import */ var _ui_form_submit_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ui/form_submit.js */ \"./assets/js/ui/form_submit.js\");\n/* harmony import */ var _ui_modal_close_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ui/modal_close.js */ \"./assets/js/ui/modal_close.js\");\n/* harmony import */ var _ui_modal_popper_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ui/modal_popper.js */ \"./assets/js/ui/modal_popper.js\");\n/* harmony import */ var _ui_multi_select_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ui/multi_select.js */ \"./assets/js/ui/multi_select.js\");\n/* harmony import */ var _ui_tabs_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ui/tabs.js */ \"./assets/js/ui/tabs.js\");\n/* harmony import */ var _ui_radio_card_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ui/radio_card.js */ \"./assets/js/ui/radio_card.js\");\n/* harmony import */ var _ui_toast_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./ui/toast.js */ \"./assets/js/ui/toast.js\");\n\n\n\n\n\n\n\n\n\n\n\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  (0,_ui_tabs_js__WEBPACK_IMPORTED_MODULE_9__.default)();\n  (0,_ui_check_js__WEBPACK_IMPORTED_MODULE_0__.default)();\n  (0,_ui_bootstrap_js__WEBPACK_IMPORTED_MODULE_1__.default)();\n  (0,_ui_draggable_js__WEBPACK_IMPORTED_MODULE_2__.draggable)();\n  (0,_ui_multiple_js__WEBPACK_IMPORTED_MODULE_3__.default)();\n  (0,_ui_form_change_submit_js__WEBPACK_IMPORTED_MODULE_4__.default)();\n  (0,_ui_form_submit_js__WEBPACK_IMPORTED_MODULE_5__.default)();\n  (0,_ui_modal_close_js__WEBPACK_IMPORTED_MODULE_6__.default)();\n  (0,_ui_modal_popper_js__WEBPACK_IMPORTED_MODULE_7__.default)();\n  (0,_ui_multi_select_js__WEBPACK_IMPORTED_MODULE_8__.default)();\n  (0,_ui_radio_card_js__WEBPACK_IMPORTED_MODULE_10__.default)();\n  (0,_ui_toast_js__WEBPACK_IMPORTED_MODULE_11__.default)();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvYXBwLmpzPzllMGUiXSwibmFtZXMiOlsiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwidGFicyIsImNoZWNrIiwiYm9vdHN0cmFwIiwiZHJhZ2dhYmxlIiwibXVsdGlwbGUiLCJjaGFuZ2VTdWJtaXQiLCJzdWJtaXQiLCJtb2RhbENsb3NlIiwibW9kYWxQb3BwZXIiLCJtdWx0aXBsZVNlbGVjdCIsInJhZGlvQ2FyZCIsInRvYXN0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUFBLFFBQVEsQ0FBQ0MsZ0JBQVQsQ0FBMEIsa0JBQTFCLEVBQThDLFlBQVk7QUFDdERDLHNEQUFJO0FBQ0pDLHVEQUFLO0FBQ0xDLDJEQUFTO0FBQ1RDLDZEQUFTO0FBQ1RDLDBEQUFRO0FBQ1JDLG9FQUFZO0FBQ1pDLDZEQUFNO0FBQ05DLDZEQUFVO0FBQ1ZDLDhEQUFXO0FBQ1hDLDhEQUFjO0FBQ2RDLDZEQUFTO0FBQ1RDLHdEQUFLO0FBQ1IsQ0FiRCIsImZpbGUiOiIuL2Fzc2V0cy9qcy9hcHAuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2hlY2sgZnJvbSAnLi91aS9jaGVjay5qcydcbmltcG9ydCBib290c3RyYXAgZnJvbSAnLi91aS9ib290c3RyYXAuanMnXG5pbXBvcnQgeyBkcmFnZ2FibGUgfSBmcm9tICcuL3VpL2RyYWdnYWJsZS5qcydcbmltcG9ydCBtdWx0aXBsZSBmcm9tICcuL3VpL211bHRpcGxlLmpzJ1xuaW1wb3J0IGNoYW5nZVN1Ym1pdCBmcm9tICcuL3VpL2Zvcm1fY2hhbmdlX3N1Ym1pdC5qcydcbmltcG9ydCBzdWJtaXQgZnJvbSAnLi91aS9mb3JtX3N1Ym1pdC5qcydcbmltcG9ydCBtb2RhbENsb3NlIGZyb20gJy4vdWkvbW9kYWxfY2xvc2UuanMnXG5pbXBvcnQgbW9kYWxQb3BwZXIgZnJvbSAnLi91aS9tb2RhbF9wb3BwZXIuanMnXG5pbXBvcnQgbXVsdGlwbGVTZWxlY3QgZnJvbSAnLi91aS9tdWx0aV9zZWxlY3QuanMnXG5pbXBvcnQgdGFicyBmcm9tICcuL3VpL3RhYnMuanMnXG5pbXBvcnQgcmFkaW9DYXJkIGZyb20gJy4vdWkvcmFkaW9fY2FyZC5qcydcbmltcG9ydCB0b2FzdCBmcm9tICcuL3VpL3RvYXN0LmpzJ1xuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24gKCkge1xuICAgIHRhYnMoKVxuICAgIGNoZWNrKClcbiAgICBib290c3RyYXAoKVxuICAgIGRyYWdnYWJsZSgpXG4gICAgbXVsdGlwbGUoKVxuICAgIGNoYW5nZVN1Ym1pdCgpXG4gICAgc3VibWl0KClcbiAgICBtb2RhbENsb3NlKClcbiAgICBtb2RhbFBvcHBlcigpXG4gICAgbXVsdGlwbGVTZWxlY3QoKVxuICAgIHJhZGlvQ2FyZCgpXG4gICAgdG9hc3QoKVxufSk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./assets/js/app.js\n");

/***/ }),

/***/ "./assets/js/classes/draggableTable.js":
/*!*********************************************!*\
  !*** ./assets/js/classes/draggableTable.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DraggableTable\": () => (/* binding */ DraggableTable)\n/* harmony export */ });\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! htmx.org */ \"./node_modules/htmx.org/dist/htmx.min.js\");\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(htmx_org__WEBPACK_IMPORTED_MODULE_0__);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n/**\n * DraggableTable\n *\n * Turn a table into a table with rows which can be drag and dropped.\n * This allows users to (re)order the rows in the table. An optional API callback\n * can be passed to the constructor. This allows sending the the state of the table\n * to the backend.\n *\n * Code repurposed from: https://htmldom.dev/drag-and-drop-table-row/\n */\n\nvar DraggableTable = /*#__PURE__*/function () {\n  /**\n   * Dragable Table constructor.\n   * @param { string } DOM element to be selected. It must be a HTML Table tag - https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table\n   * @param { callback } The backend callback to notify after swapping the element.\n   */\n  function DraggableTable(_ref) {\n    var tableSelector = _ref.tableSelector,\n        callback = _ref.callback;\n\n    _classCallCheck(this, DraggableTable);\n\n    _defineProperty(this, \"_table\", void 0);\n\n    _defineProperty(this, \"_tableSelector\", void 0);\n\n    _defineProperty(this, \"_callback\", void 0);\n\n    _defineProperty(this, \"_draggingEle\", void 0);\n\n    _defineProperty(this, \"_draggingRowIndex\", void 0);\n\n    _defineProperty(this, \"_placeholder\", void 0);\n\n    _defineProperty(this, \"_list\", void 0);\n\n    _defineProperty(this, \"_isDraggingStarted\", void 0);\n\n    _defineProperty(this, \"_x\", void 0);\n\n    _defineProperty(this, \"_y\", void 0);\n\n    _defineProperty(this, \"_mouseUp\", void 0);\n\n    _defineProperty(this, \"_mouseMove\", void 0);\n\n    _defineProperty(this, \"_mouseDown\", void 0);\n\n    _defineProperty(this, \"_mouseHandlers\", []);\n\n    this._tableSelector = tableSelector;\n    this._callback = callback !== null && callback !== void 0 ? callback : \"\";\n    this._isDraggingStarted = false; // The current position of mouse relative to the dragging element\n\n    this._x = 0;\n    this._y = 0;\n  }\n\n  _createClass(DraggableTable, [{\n    key: \"_swap\",\n    value: function _swap(nodeA, nodeB) {\n      var parentA = nodeA.parentNode;\n      var siblingA = nodeA.nextSibling === nodeB ? nodeA : nodeA.nextSibling; // Move `nodeA` to before the `nodeB`\n\n      nodeB.parentNode.insertBefore(nodeA, nodeB); // Move `nodeB` to before the sibling of `nodeA`\n\n      parentA.insertBefore(nodeB, siblingA);\n    }\n  }, {\n    key: \"_isAbove\",\n    value: function _isAbove(nodeA, nodeB) {\n      // Get the bounding rectangle of nodes\n      var rectA = nodeA.getBoundingClientRect();\n      var rectB = nodeB.getBoundingClientRect();\n      return rectA.top + rectA.height / 2 < rectB.top + rectB.height / 2;\n    }\n  }, {\n    key: \"_cloneTable\",\n    value: function _cloneTable() {\n      // const rect = this._table.getBoundingClientRect();\n      var width = parseInt(window.getComputedStyle(this._table).width);\n      this._list = document.createElement('div');\n\n      this._list.classList.add('clone-list'); // list.style.position = 'absolute';\n      // list.style.left = `${rect.left}px`;\n      // list.style.top = `${rect.top}px`;\n\n\n      this._table.parentNode.insertBefore(this._list, this._table); // Hide the original table\n\n\n      this._table.style.visibility = 'hidden';\n\n      this._table.classList.add(\"d-none\");\n\n      this._table.querySelectorAll('tr').forEach(function (row) {\n        // Create a new table from given row\n        var item = document.createElement('div');\n        item.classList.add('draggable');\n        var newTable = document.createElement('table');\n        newTable.setAttribute('class', 'clone-table table');\n        newTable.style.width = \"\".concat(width, \"px\");\n        var newRow = document.createElement('tr');\n        var cells = [].slice.call(row.children);\n        cells.forEach(function (cell) {\n          var newCell = cell.cloneNode(true);\n          newRow.appendChild(newCell);\n        });\n        newTable.appendChild(newRow);\n        item.appendChild(newTable);\n\n        this._list.appendChild(item);\n      }, this);\n    }\n  }, {\n    key: \"_mouseDownHandler\",\n    value: function _mouseDownHandler(e) {\n      // Get the original row\n      var originalRow = e.target.closest('tr');\n      this._draggingRowIndex = [].slice.call(this._table.querySelectorAll('tr')).indexOf(originalRow); // Determine the mouse position\n\n      this._x = e.clientX;\n      this._y = e.clientY; // Attach the listeners to `document`\n\n      this._mouseMove = this._mouseMoveHandler.bind(this);\n      document.addEventListener('mousemove', this._mouseMove);\n      this._mouseUp = this._mouseUpHandler.bind(this);\n      document.addEventListener('mouseup', this._mouseUp);\n    }\n  }, {\n    key: \"_mouseMoveHandler\",\n    value: function _mouseMoveHandler(e) {\n      if (!this._isDraggingStarted) {\n        this._isDraggingStarted = true;\n\n        this._cloneTable();\n\n        this._draggingEle = [].slice.call(this._list.children)[this._draggingRowIndex];\n\n        this._draggingEle.classList.add('dragging'); // Let the placeholder take the height of dragging element\n        // So the next element won't move up\n\n\n        this._placeholder = document.createElement('div');\n\n        this._placeholder.classList.add('placeholder');\n\n        this._draggingEle.parentNode.insertBefore(this._placeholder, this._draggingEle.nextSibling);\n\n        this._placeholder.style.height = \"\".concat(this._draggingEle.offsetHeight, \"px\");\n      } // Set position for dragging element\n\n\n      this._draggingEle.style.position = 'absolute';\n      this._draggingEle.style.top = \"\".concat(this._draggingEle.offsetTop + e.clientY - this._y, \"px\");\n      this._draggingEle.style.left = \"\".concat(this._draggingEle.offsetLeft + e.clientX - this._x, \"px\"); // Reassign the position of mouse\n\n      this._x = e.clientX;\n      this._y = e.clientY; // The current order\n      // prevEle\n      // draggingEle\n      // placeholder\n      // nextEle\n\n      var prevEle = this._draggingEle.previousElementSibling;\n      var nextEle = this._placeholder.nextElementSibling; // The dragging element is above the previous element\n      // User moves the dragging element to the top\n      // We don't allow to drop above the header\n      // (which doesn't have `previousElementSibling`)\n\n      if (prevEle && prevEle.previousElementSibling && this._isAbove(this._draggingEle, prevEle)) {\n        // The current order    -> The new order\n        // prevEle              -> placeholder\n        // draggingEle          -> draggingEle\n        // placeholder          -> prevEle\n        this._swap(this._placeholder, this._draggingEle);\n\n        this._swap(this._placeholder, prevEle);\n\n        return;\n      } // The dragging element is below the next element\n      // User moves the dragging element to the bottom\n\n\n      if (nextEle && this._isAbove(nextEle, this._draggingEle)) {\n        // The current order    -> The new order\n        // draggingEle          -> nextEle\n        // placeholder          -> placeholder\n        // nextEle              -> draggingEle\n        this._swap(nextEle, this._placeholder);\n\n        this._swap(nextEle, this._draggingEle);\n      }\n    }\n  }, {\n    key: \"_mouseUpHandler\",\n    value: function _mouseUpHandler(e) {\n      // Remove the placeholder\n      this._placeholder && this._placeholder.parentNode.removeChild(this._placeholder);\n\n      this._draggingEle.classList.remove('dragging');\n\n      this._draggingEle.style.removeProperty('top');\n\n      this._draggingEle.style.removeProperty('left');\n\n      this._draggingEle.style.removeProperty('position'); // Get the end index\n\n\n      var endRowIndex = [].slice.call(this._list.children).indexOf(this._draggingEle);\n      this._isDraggingStarted = false; // Remove the `list` element\n\n      this._list.parentNode.removeChild(this._list); // Move the dragged row to `endRowIndex`\n\n\n      var rows = [].slice.call(this._table.querySelectorAll('tr'));\n      this._draggingRowIndex > endRowIndex ? rows[endRowIndex].parentNode.insertBefore(rows[this._draggingRowIndex], rows[endRowIndex]) : rows[endRowIndex].parentNode.insertBefore(rows[this._draggingRowIndex], rows[endRowIndex].nextSibling); // Bring back the table\n\n      this._table.style.removeProperty('visibility');\n\n      this._table.classList.remove('d-none');\n\n      if (this._callback !== \"\") {\n        var start = this._draggingRowIndex - 1;\n        var end = endRowIndex - 1;\n        var callback = this._callback;\n        callback = callback.replace(':start', start);\n        callback = callback.replace(':end', end);\n        htmx_org__WEBPACK_IMPORTED_MODULE_0___default().ajax('PUT', callback, this._table.querySelector(\"tbody\"));\n      } // Remove the handlers of `mousemove` and `mouseup`\n\n\n      document.removeEventListener('mousemove', this._mouseMove);\n      document.removeEventListener('mouseup', this._mouseUp);\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      this._table = document.getElementById(this._tableSelector);\n\n      this._table.querySelectorAll('tr').forEach(function (row, index) {\n        // Ignore the header\n        // We don't want user to change the order of header\n        if (index === 0) {\n          return;\n        }\n\n        var firstCell = row.firstElementChild;\n        firstCell.classList.add('draggable');\n        this._mouseHandlers[index] = this._mouseDownHandler.bind(this);\n        firstCell.addEventListener('mousedown', this._mouseHandlers[index]);\n      }, this);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._table = document.getElementById(this._tableSelector);\n\n      this._table.querySelectorAll('tr:not(.row-new)').forEach(function (row, index) {\n        // Ignore the header\n        // We don't want user to change the order of header\n        if (index === 0) {\n          return;\n        }\n\n        var firstCell = row.firstElementChild;\n        firstCell.classList.remove('draggable');\n        firstCell.removeEventListener('mousedown', this._mouseHandlers[index]);\n      }, this);\n    }\n  }]);\n\n  return DraggableTable;\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./assets/js/classes/draggableTable.js\n");

/***/ }),

/***/ "./assets/js/ui/bootstrap.js":
/*!***********************************!*\
  !*** ./assets/js/ui/bootstrap.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! htmx.org */ \"./node_modules/htmx.org/dist/htmx.min.js\");\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(htmx_org__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var bootstrap_native_dist_bootstrap_native_v4__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bootstrap.native/dist/bootstrap-native-v4 */ \"./node_modules/bootstrap.native/dist/bootstrap-native-v4.js\");\n/* harmony import */ var bootstrap_native_dist_bootstrap_native_v4__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(bootstrap_native_dist_bootstrap_native_v4__WEBPACK_IMPORTED_MODULE_1__);\n\n\n/**\n * Initialize Bootstrap Native after HTMX has settled the DOM.\n *\n * When HTMX is executed, the updated parts of the DOM won't be\n * registered with Bootstrap Native. Elements like i.e. popovers,\n * alerts, tooltips,... won't work passed via HTMX won't work.\n * This function re-initializes Bootstrap Native on the updated DOM.\n */\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  htmx_org__WEBPACK_IMPORTED_MODULE_0___default().on(\"htmx:afterSettle\", function (evt) {\n    bootstrap_native_dist_bootstrap_native_v4__WEBPACK_IMPORTED_MODULE_1___default().initCallback();\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvdWkvYm9vdHN0cmFwLmpzPzFlZTMiXSwibmFtZXMiOlsiaHRteCIsImV2dCIsIkJTTiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSw2QkFBZSxzQ0FBVztBQUN0QkEsb0RBQUEsQ0FBUSxrQkFBUixFQUE0QixVQUFTQyxHQUFULEVBQWM7QUFDdENDLGlHQUFBO0FBQ0gsR0FGRDtBQUdIIiwiZmlsZSI6Ii4vYXNzZXRzL2pzL3VpL2Jvb3RzdHJhcC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBodG14IGZyb20gJ2h0bXgub3JnJztcbmltcG9ydCBCU04gZnJvbSBcImJvb3RzdHJhcC5uYXRpdmUvZGlzdC9ib290c3RyYXAtbmF0aXZlLXY0XCI7XG5cbi8qKlxuICogSW5pdGlhbGl6ZSBCb290c3RyYXAgTmF0aXZlIGFmdGVyIEhUTVggaGFzIHNldHRsZWQgdGhlIERPTS5cbiAqXG4gKiBXaGVuIEhUTVggaXMgZXhlY3V0ZWQsIHRoZSB1cGRhdGVkIHBhcnRzIG9mIHRoZSBET00gd29uJ3QgYmVcbiAqIHJlZ2lzdGVyZWQgd2l0aCBCb290c3RyYXAgTmF0aXZlLiBFbGVtZW50cyBsaWtlIGkuZS4gcG9wb3ZlcnMsXG4gKiBhbGVydHMsIHRvb2x0aXBzLC4uLiB3b24ndCB3b3JrIHBhc3NlZCB2aWEgSFRNWCB3b24ndCB3b3JrLlxuICogVGhpcyBmdW5jdGlvbiByZS1pbml0aWFsaXplcyBCb290c3RyYXAgTmF0aXZlIG9uIHRoZSB1cGRhdGVkIERPTS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gICAgaHRteC5vbihcImh0bXg6YWZ0ZXJTZXR0bGVcIiwgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgIEJTTi5pbml0Q2FsbGJhY2soKVxuICAgIH0pO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./assets/js/ui/bootstrap.js\n");

/***/ }),

/***/ "./assets/js/ui/check.js":
/*!*******************************!*\
  !*** ./assets/js/ui/check.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var formCheckAll = function formCheckAll(evt) {\n    var form = evt.target.closest(\"form\");\n    var chks = form.querySelectorAll(\"input[type='checkbox']\");\n    chks.forEach(function (el) {\n      return el.checked = true;\n    });\n  };\n\n  document.querySelectorAll(\"button.form-check-all\").forEach(function (el) {\n    return el.addEventListener(\"click\", formCheckAll);\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvdWkvY2hlY2suanM/MDI1NSJdLCJuYW1lcyI6WyJmb3JtQ2hlY2tBbGwiLCJldnQiLCJmb3JtIiwidGFyZ2V0IiwiY2xvc2VzdCIsImNoa3MiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsImVsIiwiY2hlY2tlZCIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLDZCQUFlLHNDQUFXO0FBQ3RCLE1BQUlBLFlBQVksR0FBRyxTQUFmQSxZQUFlLENBQVVDLEdBQVYsRUFBZTtBQUM5QixRQUFJQyxJQUFJLEdBQUdELEdBQUcsQ0FBQ0UsTUFBSixDQUFXQyxPQUFYLENBQW1CLE1BQW5CLENBQVg7QUFDQSxRQUFJQyxJQUFJLEdBQUdILElBQUksQ0FBQ0ksZ0JBQUwsQ0FBc0Isd0JBQXRCLENBQVg7QUFDQUQsUUFBSSxDQUFDRSxPQUFMLENBQWEsVUFBQUMsRUFBRTtBQUFBLGFBQ1hBLEVBQUUsQ0FBQ0MsT0FBSCxHQUFhLElBREY7QUFBQSxLQUFmO0FBR0gsR0FORDs7QUFRQUMsVUFBUSxDQUFDSixnQkFBVCxDQUEwQix1QkFBMUIsRUFBbURDLE9BQW5ELENBQTJELFVBQUFDLEVBQUU7QUFBQSxXQUN6REEsRUFBRSxDQUFDRyxnQkFBSCxDQUFvQixPQUFwQixFQUE2QlgsWUFBN0IsQ0FEeUQ7QUFBQSxHQUE3RDtBQUdIIiwiZmlsZSI6Ii4vYXNzZXRzL2pzL3VpL2NoZWNrLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gICAgbGV0IGZvcm1DaGVja0FsbCA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgbGV0IGZvcm0gPSBldnQudGFyZ2V0LmNsb3Nlc3QoXCJmb3JtXCIpXG4gICAgICAgIGxldCBjaGtzID0gZm9ybS5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbdHlwZT0nY2hlY2tib3gnXVwiKVxuICAgICAgICBjaGtzLmZvckVhY2goZWwgPT5cbiAgICAgICAgICAgIGVsLmNoZWNrZWQgPSB0cnVlXG4gICAgICAgIClcbiAgICB9XG5cbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiYnV0dG9uLmZvcm0tY2hlY2stYWxsXCIpLmZvckVhY2goZWwgPT5cbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZvcm1DaGVja0FsbClcbiAgICApXG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./assets/js/ui/check.js\n");

/***/ }),

/***/ "./assets/js/ui/draggable.js":
/*!***********************************!*\
  !*** ./assets/js/ui/draggable.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"draggable\": () => (/* binding */ draggable)\n/* harmony export */ });\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! htmx.org */ \"./node_modules/htmx.org/dist/htmx.min.js\");\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(htmx_org__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _classes_draggableTable_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../classes/draggableTable.js */ \"./assets/js/classes/draggableTable.js\");\n\n // TODO: We likely want to turn this into a separate class too.\n//  we just want to set the callback and ensure everything gets hooked\n//  to specific DOM elements, rather then generic selectors as we do now.\n\nfunction draggable() {\n  // Disable buttons when we edit / add a row.\n  var disableRowButtons = function disableRowButtons(evt) {\n    var rows = document.querySelector('table.inline-editing tbody').children;\n\n    for (var i = 0; i < rows.length; i++) {\n      var row = rows[i];\n\n      if (!row.classList.contains(\"row-new\") && !row.classList.contains(\"row-edit\")) {\n        var buttons = row.getElementsByTagName(\"button\");\n        Array.from(buttons).forEach(function (button) {\n          button.classList.add(\"d-none\");\n        });\n      }\n    }\n  }; // Compose a spinner element\n\n\n  var createSpinner = function createSpinner() {\n    var spinner = document.createElement(\"div\");\n    spinner.classList.add('spinner-border');\n    var text = document.createElement(\"span\");\n    text.classList.add(\"sr-only\");\n    var cta = document.createTextNode(\"Loading...\");\n    text.appendChild(cta);\n    spinner.appendChild(text);\n    return spinner;\n  };\n\n  var currentUrl = new URL(window.location.href);\n  var callback = \"\";\n  var tableSelector; // Generate the callback for the authors\n  // TODO: Turn the pattern matching into something that incorporates the basePath of the Go app.\n\n  if (currentUrl.pathname.match(new RegExp(\"^.*/publication/[0-9]*$\", 'gm'))) {\n    callback = currentUrl.pathname + \"/htmx/authors/order/:start/:end\";\n    tableSelector = \"authors-table\";\n  }\n\n  if (tableSelector !== undefined && document.getElementById(tableSelector)) {\n    // Init the Draggable table\n    var table = new _classes_draggableTable_js__WEBPACK_IMPORTED_MODULE_1__.DraggableTable({\n      tableSelector: tableSelector,\n      callback: callback\n    });\n    table.init(); // Init the addAuthor button\n\n    var addAuthor = document.querySelector(\"button.btn-outline-primary.add-author\"); // Init a spinner (loading...) object\n\n    var spinner; // ... This is where the magic starts to happen ...\n    // After the table is refreshed\n\n    htmx_org__WEBPACK_IMPORTED_MODULE_0___default().on(\"ITListAfterSwap\", function (evt) {\n      // Make the table draggable again.\n      table.init(); // We can click the 'add author' button from the top menu.\n\n      addAuthor.removeAttribute(\"disabled\"); // We remove the spinner if there is any active\n\n      if (spinner !== undefined) {\n        spinner.remove();\n      }\n    }); // After the order was changed thru drag n' droppin'\n\n    htmx_org__WEBPACK_IMPORTED_MODULE_0___default().on(\"ITOrderAuthorsAfterSwap\", function (evt) {\n      table.init();\n    }); // A new empty row form was added. Disable all add / edit / delete buttons\n\n    htmx_org__WEBPACK_IMPORTED_MODULE_0___default().on(\"ITAddRowAfterSwap\", function (evt) {\n      // Make the table static non-draggable.\n      table.reset(); // Disable the 'Add author' button from the top menu.\n\n      addAuthor.setAttribute(\"disabled\", \"true\"); // Remove all buttons except the one's on the active form.\n\n      disableRowButtons(evt); // Add spinner handler to the 'create' button.\n\n      var updateButton = document.querySelector(\"table#authors-table button.create-author\");\n      updateButton.addEventListener(\"click\", function (e) {\n        spinner = createSpinner();\n        addAuthor.after(spinner);\n      });\n    }); // An row is being edited. Disable all add / edit / delete buttons\n\n    htmx_org__WEBPACK_IMPORTED_MODULE_0___default().on(\"ITEditRowAfterSwap\", function (evt) {\n      table.reset();\n      addAuthor.setAttribute(\"disabled\", \"true\");\n      disableRowButtons(evt);\n      var createButton = document.querySelector(\"table#authors-table button.update-author\");\n      createButton.addEventListener(\"click\", function (e) {\n        spinner = createSpinner();\n        addAuthor.after(spinner);\n      });\n    }); // A row is being deleted. Show a spinner next to the 'delete' button in the popup\n\n    htmx_org__WEBPACK_IMPORTED_MODULE_0___default().on(\"ITConfirmRemoveFromPublicationAfterSwap\", function (evt) {\n      var removeButton = document.querySelector(\"div.modal-confirm-author-removal button.delete-author\");\n      removeButton.addEventListener(\"click\", function (e) {\n        spinner = createSpinner();\n        removeButton.after(spinner);\n      });\n    });\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./assets/js/ui/draggable.js\n");

/***/ }),

/***/ "./assets/js/ui/form_change_submit.js":
/*!********************************************!*\
  !*** ./assets/js/ui/form_change_submit.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  document.querySelectorAll(\"form.form-change-submit\").forEach(function (el) {\n    return el.addEventListener(\"change\", function (evt) {\n      return el.submit();\n    });\n  });\n  document.querySelectorAll(\"form .form-change-submit\").forEach(function (el) {\n    return el.addEventListener(\"change\", function (evt) {\n      return evt.target.closest(\"form\").submit();\n    });\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvdWkvZm9ybV9jaGFuZ2Vfc3VibWl0LmpzPzhmMjYiXSwibmFtZXMiOlsiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsImVsIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2dCIsInN1Ym1pdCIsInRhcmdldCIsImNsb3Nlc3QiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSw2QkFBZSxzQ0FBVztBQUN0QkEsVUFBUSxDQUFDQyxnQkFBVCxDQUEwQix5QkFBMUIsRUFBcURDLE9BQXJELENBQTZELFVBQUFDLEVBQUU7QUFBQSxXQUMzREEsRUFBRSxDQUFDQyxnQkFBSCxDQUFvQixRQUFwQixFQUE4QixVQUFBQyxHQUFHO0FBQUEsYUFDN0JGLEVBQUUsQ0FBQ0csTUFBSCxFQUQ2QjtBQUFBLEtBQWpDLENBRDJEO0FBQUEsR0FBL0Q7QUFLQU4sVUFBUSxDQUFDQyxnQkFBVCxDQUEwQiwwQkFBMUIsRUFBc0RDLE9BQXRELENBQThELFVBQUFDLEVBQUU7QUFBQSxXQUM1REEsRUFBRSxDQUFDQyxnQkFBSCxDQUFvQixRQUFwQixFQUE4QixVQUFBQyxHQUFHO0FBQUEsYUFDN0JBLEdBQUcsQ0FBQ0UsTUFBSixDQUFXQyxPQUFYLENBQW1CLE1BQW5CLEVBQTJCRixNQUEzQixFQUQ2QjtBQUFBLEtBQWpDLENBRDREO0FBQUEsR0FBaEU7QUFLSCIsImZpbGUiOiIuL2Fzc2V0cy9qcy91aS9mb3JtX2NoYW5nZV9zdWJtaXQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiZm9ybS5mb3JtLWNoYW5nZS1zdWJtaXRcIikuZm9yRWFjaChlbCA9PlxuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIGV2dCA9PlxuICAgICAgICAgICAgZWwuc3VibWl0KClcbiAgICAgICAgKVxuICAgIClcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiZm9ybSAuZm9ybS1jaGFuZ2Utc3VibWl0XCIpLmZvckVhY2goZWwgPT5cbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBldnQgPT5cbiAgICAgICAgICAgIGV2dC50YXJnZXQuY2xvc2VzdChcImZvcm1cIikuc3VibWl0KClcbiAgICAgICAgKVxuICAgIClcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./assets/js/ui/form_change_submit.js\n");

/***/ }),

/***/ "./assets/js/ui/form_submit.js":
/*!*************************************!*\
  !*** ./assets/js/ui/form_submit.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! htmx.org */ \"./node_modules/htmx.org/dist/htmx.min.js\");\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(htmx_org__WEBPACK_IMPORTED_MODULE_0__);\n // import BSN from \"bootstrap.native/dist/bootstrap-native-v4\";\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  // Compose a spinner element\n  function createSpinner() {\n    var spinner = document.createElement(\"div\");\n    spinner.classList.add('spinner-border');\n    var text = document.createElement(\"span\");\n    text.classList.add(\"sr-only\");\n    var cta = document.createTextNode(\"Loading...\");\n    text.appendChild(cta);\n    spinner.appendChild(text);\n    return spinner;\n  } // On submit, disable the cancel / save buttons & set the spinner\n\n\n  function formSubmit(form) {\n    var submitButton = form.querySelector('.btn-save');\n    var cancelButton = form.querySelector('.btn-cancel'); // Load the spinner when the button is clicked\n\n    if (submitButton !== null) {\n      htmx_org__WEBPACK_IMPORTED_MODULE_0___default().on(submitButton, \"click\", function (evt) {\n        var spinner = createSpinner();\n        submitButton.after(spinner);\n      });\n    } // Disable the buttons after HTMX has started, but before the XHR request is\n    // dispatched. Doing this on the 'click' event blocks triggering the HTMX lifecycle.\n    //\n    // See: https://github.com/bigskysoftware/htmx/issues/394\n\n\n    htmx_org__WEBPACK_IMPORTED_MODULE_0___default().on(\"htmx:beforeRequest\", function (evt) {\n      submitButton.setAttribute(\"disabled\", \"\");\n      cancelButton.setAttribute(\"disabled\", \"\");\n    });\n  } // After submission, auto-dismiss all alerts after 10 seconds.\n  // TODO: if 2 consecutive save actions happen within the 10 second interval,\n  //    the first displayed alert will be destroyed by HTMX, causing the setTimeout\n  //    to trigger a runtime error as it tries to apply a BSN.alert on a non-existing\n  //    element.\n  // function closeAlerts() {\n  //     let alerts = document.querySelectorAll('.alert')\n  //     alerts.forEach((el) => {\n  //         setTimeout(() => {\n  //             let alert = new BSN.Alert(el)\n  //             alert.close()\n  //         }, 10000)\n  //     })\n  // }\n  // Init event listeners whenever HTMX swaps in a card-collapsible having a form element.\n\n\n  htmx_org__WEBPACK_IMPORTED_MODULE_0___default().on(\"htmx:afterSettle\", function (evt) {\n    var item = evt.detail.target.children.item(0);\n\n    if (item && item.nodeName && item.nodeName.toLowerCase() == \"form\") {\n      formSubmit(item);\n    } else {// closeAlerts()\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvdWkvZm9ybV9zdWJtaXQuanM/ZDg3OSJdLCJuYW1lcyI6WyJjcmVhdGVTcGlubmVyIiwic3Bpbm5lciIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsInRleHQiLCJjdGEiLCJjcmVhdGVUZXh0Tm9kZSIsImFwcGVuZENoaWxkIiwiZm9ybVN1Ym1pdCIsImZvcm0iLCJzdWJtaXRCdXR0b24iLCJxdWVyeVNlbGVjdG9yIiwiY2FuY2VsQnV0dG9uIiwiaHRteCIsImV2dCIsImFmdGVyIiwic2V0QXR0cmlidXRlIiwiaXRlbSIsImRldGFpbCIsInRhcmdldCIsImNoaWxkcmVuIiwibm9kZU5hbWUiLCJ0b0xvd2VyQ2FzZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0NBQ0E7O0FBRUEsNkJBQWUsc0NBQVc7QUFFdEI7QUFDQSxXQUFTQSxhQUFULEdBQXlCO0FBQ3JCLFFBQU1DLE9BQU8sR0FBR0MsUUFBUSxDQUFDQyxhQUFULENBQXVCLEtBQXZCLENBQWhCO0FBQ0FGLFdBQU8sQ0FBQ0csU0FBUixDQUFrQkMsR0FBbEIsQ0FBc0IsZ0JBQXRCO0FBRUEsUUFBTUMsSUFBSSxHQUFHSixRQUFRLENBQUNDLGFBQVQsQ0FBdUIsTUFBdkIsQ0FBYjtBQUNBRyxRQUFJLENBQUNGLFNBQUwsQ0FBZUMsR0FBZixDQUFtQixTQUFuQjtBQUNBLFFBQUlFLEdBQUcsR0FBR0wsUUFBUSxDQUFDTSxjQUFULENBQXdCLFlBQXhCLENBQVY7QUFDQUYsUUFBSSxDQUFDRyxXQUFMLENBQWlCRixHQUFqQjtBQUVBTixXQUFPLENBQUNRLFdBQVIsQ0FBb0JILElBQXBCO0FBRUEsV0FBT0wsT0FBUDtBQUNILEdBZnFCLENBaUJ0Qjs7O0FBQ0EsV0FBU1MsVUFBVCxDQUFvQkMsSUFBcEIsRUFBMEI7QUFDdEIsUUFBTUMsWUFBWSxHQUFHRCxJQUFJLENBQUNFLGFBQUwsQ0FBbUIsV0FBbkIsQ0FBckI7QUFDQSxRQUFNQyxZQUFZLEdBQUdILElBQUksQ0FBQ0UsYUFBTCxDQUFtQixhQUFuQixDQUFyQixDQUZzQixDQUl0Qjs7QUFDQSxRQUFJRCxZQUFZLEtBQUssSUFBckIsRUFBMkI7QUFDdkJHLHdEQUFBLENBQVFILFlBQVIsRUFBc0IsT0FBdEIsRUFBK0IsVUFBU0ksR0FBVCxFQUFjO0FBQ3pDLFlBQU1mLE9BQU8sR0FBR0QsYUFBYSxFQUE3QjtBQUNBWSxvQkFBWSxDQUFDSyxLQUFiLENBQW1CaEIsT0FBbkI7QUFDSCxPQUhEO0FBSUgsS0FWcUIsQ0FZdEI7QUFDQTtBQUNBO0FBQ0E7OztBQUNBYyxzREFBQSxDQUFRLG9CQUFSLEVBQThCLFVBQVNDLEdBQVQsRUFBYztBQUN4Q0osa0JBQVksQ0FBQ00sWUFBYixDQUEwQixVQUExQixFQUFzQyxFQUF0QztBQUNBSixrQkFBWSxDQUFDSSxZQUFiLENBQTBCLFVBQTFCLEVBQXNDLEVBQXRDO0FBQ0gsS0FIRDtBQUlILEdBdENxQixDQXdDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOzs7QUFDQUgsb0RBQUEsQ0FBUSxrQkFBUixFQUE0QixVQUFTQyxHQUFULEVBQWM7QUFDdEMsUUFBSUcsSUFBSSxHQUFHSCxHQUFHLENBQUNJLE1BQUosQ0FBV0MsTUFBWCxDQUFrQkMsUUFBbEIsQ0FBMkJILElBQTNCLENBQWdDLENBQWhDLENBQVg7O0FBQ0EsUUFBSUEsSUFBSSxJQUFJQSxJQUFJLENBQUNJLFFBQWIsSUFBMEJKLElBQUksQ0FBQ0ksUUFBTCxDQUFjQyxXQUFkLE1BQStCLE1BQTdELEVBQXNFO0FBQ2xFZCxnQkFBVSxDQUFDUyxJQUFELENBQVY7QUFDSCxLQUZELE1BRU8sQ0FDSDtBQUNIO0FBQ0osR0FQRDtBQVFIIiwiZmlsZSI6Ii4vYXNzZXRzL2pzL3VpL2Zvcm1fc3VibWl0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGh0bXggZnJvbSAnaHRteC5vcmcnO1xuLy8gaW1wb3J0IEJTTiBmcm9tIFwiYm9vdHN0cmFwLm5hdGl2ZS9kaXN0L2Jvb3RzdHJhcC1uYXRpdmUtdjRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG5cbiAgICAvLyBDb21wb3NlIGEgc3Bpbm5lciBlbGVtZW50XG4gICAgZnVuY3Rpb24gY3JlYXRlU3Bpbm5lcigpIHtcbiAgICAgICAgY29uc3Qgc3Bpbm5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIilcbiAgICAgICAgc3Bpbm5lci5jbGFzc0xpc3QuYWRkKCdzcGlubmVyLWJvcmRlcicpXG5cbiAgICAgICAgY29uc3QgdGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpXG4gICAgICAgIHRleHQuY2xhc3NMaXN0LmFkZChcInNyLW9ubHlcIilcbiAgICAgICAgbGV0IGN0YSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiTG9hZGluZy4uLlwiKVxuICAgICAgICB0ZXh0LmFwcGVuZENoaWxkKGN0YSlcblxuICAgICAgICBzcGlubmVyLmFwcGVuZENoaWxkKHRleHQpXG5cbiAgICAgICAgcmV0dXJuIHNwaW5uZXJcbiAgICB9XG5cbiAgICAvLyBPbiBzdWJtaXQsIGRpc2FibGUgdGhlIGNhbmNlbCAvIHNhdmUgYnV0dG9ucyAmIHNldCB0aGUgc3Bpbm5lclxuICAgIGZ1bmN0aW9uIGZvcm1TdWJtaXQoZm9ybSkge1xuICAgICAgICBjb25zdCBzdWJtaXRCdXR0b24gPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJy5idG4tc2F2ZScpXG4gICAgICAgIGNvbnN0IGNhbmNlbEJ1dHRvbiA9IGZvcm0ucXVlcnlTZWxlY3RvcignLmJ0bi1jYW5jZWwnKVxuXG4gICAgICAgIC8vIExvYWQgdGhlIHNwaW5uZXIgd2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWRcbiAgICAgICAgaWYgKHN1Ym1pdEJ1dHRvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaHRteC5vbihzdWJtaXRCdXR0b24sIFwiY2xpY2tcIiwgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3Bpbm5lciA9IGNyZWF0ZVNwaW5uZXIoKVxuICAgICAgICAgICAgICAgIHN1Ym1pdEJ1dHRvbi5hZnRlcihzcGlubmVyKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERpc2FibGUgdGhlIGJ1dHRvbnMgYWZ0ZXIgSFRNWCBoYXMgc3RhcnRlZCwgYnV0IGJlZm9yZSB0aGUgWEhSIHJlcXVlc3QgaXNcbiAgICAgICAgLy8gZGlzcGF0Y2hlZC4gRG9pbmcgdGhpcyBvbiB0aGUgJ2NsaWNrJyBldmVudCBibG9ja3MgdHJpZ2dlcmluZyB0aGUgSFRNWCBsaWZlY3ljbGUuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JpZ3NreXNvZnR3YXJlL2h0bXgvaXNzdWVzLzM5NFxuICAgICAgICBodG14Lm9uKFwiaHRteDpiZWZvcmVSZXF1ZXN0XCIsIGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICAgICAgc3VibWl0QnV0dG9uLnNldEF0dHJpYnV0ZShcImRpc2FibGVkXCIsIFwiXCIpXG4gICAgICAgICAgICBjYW5jZWxCdXR0b24uc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgXCJcIilcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvLyBBZnRlciBzdWJtaXNzaW9uLCBhdXRvLWRpc21pc3MgYWxsIGFsZXJ0cyBhZnRlciAxMCBzZWNvbmRzLlxuICAgIC8vIFRPRE86IGlmIDIgY29uc2VjdXRpdmUgc2F2ZSBhY3Rpb25zIGhhcHBlbiB3aXRoaW4gdGhlIDEwIHNlY29uZCBpbnRlcnZhbCxcbiAgICAvLyAgICB0aGUgZmlyc3QgZGlzcGxheWVkIGFsZXJ0IHdpbGwgYmUgZGVzdHJveWVkIGJ5IEhUTVgsIGNhdXNpbmcgdGhlIHNldFRpbWVvdXRcbiAgICAvLyAgICB0byB0cmlnZ2VyIGEgcnVudGltZSBlcnJvciBhcyBpdCB0cmllcyB0byBhcHBseSBhIEJTTi5hbGVydCBvbiBhIG5vbi1leGlzdGluZ1xuICAgIC8vICAgIGVsZW1lbnQuXG4gICAgLy8gZnVuY3Rpb24gY2xvc2VBbGVydHMoKSB7XG4gICAgLy8gICAgIGxldCBhbGVydHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYWxlcnQnKVxuICAgIC8vICAgICBhbGVydHMuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAvLyAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIC8vICAgICAgICAgICAgIGxldCBhbGVydCA9IG5ldyBCU04uQWxlcnQoZWwpXG4gICAgLy8gICAgICAgICAgICAgYWxlcnQuY2xvc2UoKVxuICAgIC8vICAgICAgICAgfSwgMTAwMDApXG4gICAgLy8gICAgIH0pXG4gICAgLy8gfVxuXG4gICAgLy8gSW5pdCBldmVudCBsaXN0ZW5lcnMgd2hlbmV2ZXIgSFRNWCBzd2FwcyBpbiBhIGNhcmQtY29sbGFwc2libGUgaGF2aW5nIGEgZm9ybSBlbGVtZW50LlxuICAgIGh0bXgub24oXCJodG14OmFmdGVyU2V0dGxlXCIsIGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICBsZXQgaXRlbSA9IGV2dC5kZXRhaWwudGFyZ2V0LmNoaWxkcmVuLml0ZW0oMClcbiAgICAgICAgaWYgKGl0ZW0gJiYgaXRlbS5ub2RlTmFtZSAmJiAoaXRlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09IFwiZm9ybVwiKSkge1xuICAgICAgICAgICAgZm9ybVN1Ym1pdChpdGVtKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gY2xvc2VBbGVydHMoKVxuICAgICAgICB9XG4gICAgfSk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./assets/js/ui/form_submit.js\n");

/***/ }),

/***/ "./assets/js/ui/modal_close.js":
/*!*************************************!*\
  !*** ./assets/js/ui/modal_close.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! htmx.org */ \"./node_modules/htmx.org/dist/htmx.min.js\");\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(htmx_org__WEBPACK_IMPORTED_MODULE_0__);\n // Set an event handler on any buttons that have the 'modal-close' class.\n// This ensures that any and all modals can be closed via 'close', 'cancel', etc. buttons.\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var modalClose = function modalClose(e) {\n    var modal = document.querySelectorAll(\".modal\").item(0);\n    var backdrop = document.querySelectorAll(\".modal-backdrop\").item(0);\n\n    if (modal) {\n      modal.classList.remove(\"show\");\n    }\n\n    if (backdrop) {\n      backdrop.classList.remove(\"show\");\n    } // Timeout gives us a fluid animation\n\n\n    setTimeout(function () {\n      if (backdrop) {\n        backdrop.remove();\n      }\n\n      if (modal) {\n        modal.remove();\n      }\n    }, 100);\n  }; // Close the modal after the item was deleted from the backend.\n  //\n  // If we tried to add the modal-close class directly to the \"confirm\" button\n  // on a confirmation button, the modal would be removed from the DOM before\n  // the itemDeleted event could be triggered. Without the modal nodes present\n  // in the DOM, the event won't be registered correctly by HTMX. As a result,\n  // other triggers listening for the event won't execute. Instead, we\n  // use the event itself as a trigger for the modal to close.\n\n\n  htmx_org__WEBPACK_IMPORTED_MODULE_0___default().on(\"ITRemoveItem\", function (evt) {\n    modalClose();\n  });\n  htmx_org__WEBPACK_IMPORTED_MODULE_0___default().on(\"PublicationCreateAbstract\", function (evt) {\n    modalClose();\n  });\n  htmx_org__WEBPACK_IMPORTED_MODULE_0___default().on(\"PublicationUpdateAbstract\", function (evt) {\n    modalClose();\n  });\n  htmx_org__WEBPACK_IMPORTED_MODULE_0___default().on(\"PublicationRemoveAbstract\", function (evt) {\n    modalClose();\n  });\n  htmx_org__WEBPACK_IMPORTED_MODULE_0___default().on(\"PublicationCreateLink\", function (evt) {\n    modalClose();\n  });\n  htmx_org__WEBPACK_IMPORTED_MODULE_0___default().on(\"PublicationUpdateLink\", function (evt) {\n    modalClose();\n  });\n  htmx_org__WEBPACK_IMPORTED_MODULE_0___default().on(\"PublicationRemoveLink\", function (evt) {\n    modalClose();\n  });\n  htmx_org__WEBPACK_IMPORTED_MODULE_0___default().on(\"htmx:afterSettle\", function (evt) {\n    var container = evt.detail.target;\n\n    if (container.classList.contains(\"modals\")) {\n      container.querySelectorAll(\".modal-close\").forEach(function (el) {\n        el.addEventListener(\"click\", modalClose);\n      });\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvdWkvbW9kYWxfY2xvc2UuanM/ZmZkYyJdLCJuYW1lcyI6WyJtb2RhbENsb3NlIiwiZSIsIm1vZGFsIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaXRlbSIsImJhY2tkcm9wIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwic2V0VGltZW91dCIsImh0bXgiLCJldnQiLCJjb250YWluZXIiLCJkZXRhaWwiLCJ0YXJnZXQiLCJjb250YWlucyIsImZvckVhY2giLCJlbCIsImFkZEV2ZW50TGlzdGVuZXIiXSwibWFwcGluZ3MiOiI7Ozs7OztDQUVBO0FBQ0E7O0FBQ0EsNkJBQWUsc0NBQVc7QUFDdEIsTUFBSUEsVUFBVSxHQUFHLFNBQWJBLFVBQWEsQ0FBU0MsQ0FBVCxFQUFZO0FBQ3pCLFFBQUlDLEtBQUssR0FBR0MsUUFBUSxDQUFDQyxnQkFBVCxDQUEwQixRQUExQixFQUFvQ0MsSUFBcEMsQ0FBeUMsQ0FBekMsQ0FBWjtBQUNBLFFBQUlDLFFBQVEsR0FBR0gsUUFBUSxDQUFDQyxnQkFBVCxDQUEwQixpQkFBMUIsRUFBNkNDLElBQTdDLENBQWtELENBQWxELENBQWY7O0FBRUEsUUFBSUgsS0FBSixFQUFXO0FBQ1BBLFdBQUssQ0FBQ0ssU0FBTixDQUFnQkMsTUFBaEIsQ0FBdUIsTUFBdkI7QUFDSDs7QUFFRCxRQUFJRixRQUFKLEVBQWM7QUFDVkEsY0FBUSxDQUFDQyxTQUFULENBQW1CQyxNQUFuQixDQUEwQixNQUExQjtBQUNILEtBVndCLENBWXpCOzs7QUFDQUMsY0FBVSxDQUFDLFlBQVc7QUFDbEIsVUFBSUgsUUFBSixFQUFjO0FBQ1ZBLGdCQUFRLENBQUNFLE1BQVQ7QUFDSDs7QUFFRCxVQUFJTixLQUFKLEVBQVc7QUFDUEEsYUFBSyxDQUFDTSxNQUFOO0FBQ0g7QUFDSixLQVJTLEVBUVAsR0FSTyxDQUFWO0FBU0gsR0F0QkQsQ0FEc0IsQ0F5QnRCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBRSxvREFBQSxDQUFRLGNBQVIsRUFBd0IsVUFBU0MsR0FBVCxFQUFjO0FBQ2xDWCxjQUFVO0FBQ2IsR0FGRDtBQUlBVSxvREFBQSxDQUFRLDJCQUFSLEVBQXFDLFVBQVNDLEdBQVQsRUFBYztBQUMvQ1gsY0FBVTtBQUNiLEdBRkQ7QUFJQVUsb0RBQUEsQ0FBUSwyQkFBUixFQUFxQyxVQUFTQyxHQUFULEVBQWM7QUFDL0NYLGNBQVU7QUFDYixHQUZEO0FBSUFVLG9EQUFBLENBQVEsMkJBQVIsRUFBcUMsVUFBU0MsR0FBVCxFQUFjO0FBQy9DWCxjQUFVO0FBQ2IsR0FGRDtBQUlBVSxvREFBQSxDQUFRLHVCQUFSLEVBQWlDLFVBQVNDLEdBQVQsRUFBYztBQUMzQ1gsY0FBVTtBQUNiLEdBRkQ7QUFJQVUsb0RBQUEsQ0FBUSx1QkFBUixFQUFpQyxVQUFTQyxHQUFULEVBQWM7QUFDM0NYLGNBQVU7QUFDYixHQUZEO0FBSUFVLG9EQUFBLENBQVEsdUJBQVIsRUFBaUMsVUFBU0MsR0FBVCxFQUFjO0FBQzNDWCxjQUFVO0FBQ2IsR0FGRDtBQUlBVSxvREFBQSxDQUFRLGtCQUFSLEVBQTRCLFVBQVNDLEdBQVQsRUFBYztBQUN0QyxRQUFJQyxTQUFTLEdBQUdELEdBQUcsQ0FBQ0UsTUFBSixDQUFXQyxNQUEzQjs7QUFDQSxRQUFJRixTQUFTLENBQUNMLFNBQVYsQ0FBb0JRLFFBQXBCLENBQTZCLFFBQTdCLENBQUosRUFBNEM7QUFDeENILGVBQVMsQ0FBQ1IsZ0JBQVYsQ0FBMkIsY0FBM0IsRUFBMkNZLE9BQTNDLENBQW9ELFVBQVVDLEVBQVYsRUFBYztBQUM5REEsVUFBRSxDQUFDQyxnQkFBSCxDQUFvQixPQUFwQixFQUE2QmxCLFVBQTdCO0FBQ0gsT0FGRDtBQUdIO0FBQ0osR0FQRDtBQVFIIiwiZmlsZSI6Ii4vYXNzZXRzL2pzL3VpL21vZGFsX2Nsb3NlLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGh0bXggZnJvbSAnaHRteC5vcmcnO1xuXG4vLyBTZXQgYW4gZXZlbnQgaGFuZGxlciBvbiBhbnkgYnV0dG9ucyB0aGF0IGhhdmUgdGhlICdtb2RhbC1jbG9zZScgY2xhc3MuXG4vLyBUaGlzIGVuc3VyZXMgdGhhdCBhbnkgYW5kIGFsbCBtb2RhbHMgY2FuIGJlIGNsb3NlZCB2aWEgJ2Nsb3NlJywgJ2NhbmNlbCcsIGV0Yy4gYnV0dG9ucy5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICAgIGxldCBtb2RhbENsb3NlID0gZnVuY3Rpb24oZSkge1xuICAgICAgICBsZXQgbW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm1vZGFsXCIpLml0ZW0oMClcbiAgICAgICAgbGV0IGJhY2tkcm9wID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5tb2RhbC1iYWNrZHJvcFwiKS5pdGVtKDApXG5cbiAgICAgICAgaWYgKG1vZGFsKSB7XG4gICAgICAgICAgICBtb2RhbC5jbGFzc0xpc3QucmVtb3ZlKFwic2hvd1wiKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJhY2tkcm9wKSB7XG4gICAgICAgICAgICBiYWNrZHJvcC5jbGFzc0xpc3QucmVtb3ZlKFwic2hvd1wiKVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGltZW91dCBnaXZlcyB1cyBhIGZsdWlkIGFuaW1hdGlvblxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKGJhY2tkcm9wKSB7XG4gICAgICAgICAgICAgICAgYmFja2Ryb3AucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtb2RhbCkge1xuICAgICAgICAgICAgICAgIG1vZGFsLnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCAxMDApXG4gICAgfVxuXG4gICAgLy8gQ2xvc2UgdGhlIG1vZGFsIGFmdGVyIHRoZSBpdGVtIHdhcyBkZWxldGVkIGZyb20gdGhlIGJhY2tlbmQuXG4gICAgLy9cbiAgICAvLyBJZiB3ZSB0cmllZCB0byBhZGQgdGhlIG1vZGFsLWNsb3NlIGNsYXNzIGRpcmVjdGx5IHRvIHRoZSBcImNvbmZpcm1cIiBidXR0b25cbiAgICAvLyBvbiBhIGNvbmZpcm1hdGlvbiBidXR0b24sIHRoZSBtb2RhbCB3b3VsZCBiZSByZW1vdmVkIGZyb20gdGhlIERPTSBiZWZvcmVcbiAgICAvLyB0aGUgaXRlbURlbGV0ZWQgZXZlbnQgY291bGQgYmUgdHJpZ2dlcmVkLiBXaXRob3V0IHRoZSBtb2RhbCBub2RlcyBwcmVzZW50XG4gICAgLy8gaW4gdGhlIERPTSwgdGhlIGV2ZW50IHdvbid0IGJlIHJlZ2lzdGVyZWQgY29ycmVjdGx5IGJ5IEhUTVguIEFzIGEgcmVzdWx0LFxuICAgIC8vIG90aGVyIHRyaWdnZXJzIGxpc3RlbmluZyBmb3IgdGhlIGV2ZW50IHdvbid0IGV4ZWN1dGUuIEluc3RlYWQsIHdlXG4gICAgLy8gdXNlIHRoZSBldmVudCBpdHNlbGYgYXMgYSB0cmlnZ2VyIGZvciB0aGUgbW9kYWwgdG8gY2xvc2UuXG4gICAgaHRteC5vbihcIklUUmVtb3ZlSXRlbVwiLCBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgbW9kYWxDbG9zZSgpO1xuICAgIH0pO1xuXG4gICAgaHRteC5vbihcIlB1YmxpY2F0aW9uQ3JlYXRlQWJzdHJhY3RcIiwgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgIG1vZGFsQ2xvc2UoKTtcbiAgICB9KTtcblxuICAgIGh0bXgub24oXCJQdWJsaWNhdGlvblVwZGF0ZUFic3RyYWN0XCIsIGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICBtb2RhbENsb3NlKCk7XG4gICAgfSk7XG5cbiAgICBodG14Lm9uKFwiUHVibGljYXRpb25SZW1vdmVBYnN0cmFjdFwiLCBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgbW9kYWxDbG9zZSgpO1xuICAgIH0pO1xuXG4gICAgaHRteC5vbihcIlB1YmxpY2F0aW9uQ3JlYXRlTGlua1wiLCBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgbW9kYWxDbG9zZSgpO1xuICAgIH0pO1xuXG4gICAgaHRteC5vbihcIlB1YmxpY2F0aW9uVXBkYXRlTGlua1wiLCBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgbW9kYWxDbG9zZSgpO1xuICAgIH0pO1xuXG4gICAgaHRteC5vbihcIlB1YmxpY2F0aW9uUmVtb3ZlTGlua1wiLCBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgbW9kYWxDbG9zZSgpO1xuICAgIH0pO1xuXG4gICAgaHRteC5vbihcImh0bXg6YWZ0ZXJTZXR0bGVcIiwgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgIGxldCBjb250YWluZXIgPSBldnQuZGV0YWlsLnRhcmdldFxuICAgICAgICBpZiAoY29udGFpbmVyLmNsYXNzTGlzdC5jb250YWlucyhcIm1vZGFsc1wiKSkge1xuICAgICAgICAgICAgY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoXCIubW9kYWwtY2xvc2VcIikuZm9yRWFjaCggZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIG1vZGFsQ2xvc2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./assets/js/ui/modal_close.js\n");

/***/ }),

/***/ "./assets/js/ui/modal_popper.js":
/*!**************************************!*\
  !*** ./assets/js/ui/modal_popper.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var popper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! popper.js */ \"./node_modules/popper.js/dist/esm/popper.js\");\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! htmx.org */ \"./node_modules/htmx.org/dist/htmx.min.js\");\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(htmx_org__WEBPACK_IMPORTED_MODULE_0__);\n\n // Wire in popper.js support. This ensure popups stay within the viewport.\n//\n// Bootstrap Native doesn't incorporate Popper.js. We have to wire everything ourselves.\n// See: https://github.com/thednp/bootstrap.native/issues/211\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var popper = function popper() {\n    document.querySelectorAll(\"div.dropdown > button\").forEach(function (button) {\n      button.addEventListener(\"click\", function (evt) {\n        var menu = button.parentElement.children.item(1);\n\n        if (menu.classList.contains(\"show\")) {\n          menu.removeAttribute(\"x-placement\");\n          menu.removeAttribute(\"style\");\n\n          var _popper = new popper_js__WEBPACK_IMPORTED_MODULE_1__.default(button, menu, {\n            modifiers: {\n              preventOverflow: {\n                enabled: true\n              },\n              flip: {\n                enabled: true\n              },\n              hide: {\n                enabled: false\n              }\n            }\n          });\n        }\n      });\n    });\n  };\n\n  popper();\n  htmx_org__WEBPACK_IMPORTED_MODULE_0___default().on(\"htmx:afterSettle\", function (evt) {\n    popper();\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvdWkvbW9kYWxfcG9wcGVyLmpzP2U1ZWEiXSwibmFtZXMiOlsicG9wcGVyIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsImJ1dHRvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJldnQiLCJtZW51IiwicGFyZW50RWxlbWVudCIsImNoaWxkcmVuIiwiaXRlbSIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwicmVtb3ZlQXR0cmlidXRlIiwiUG9wcGVyIiwibW9kaWZpZXJzIiwicHJldmVudE92ZXJmbG93IiwiZW5hYmxlZCIsImZsaXAiLCJoaWRlIiwiaHRteCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0NBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsNkJBQWUsc0NBQVc7QUFDdEIsTUFBSUEsTUFBTSxHQUFHLFNBQVRBLE1BQVMsR0FBVztBQUNwQkMsWUFBUSxDQUFDQyxnQkFBVCxDQUEwQix1QkFBMUIsRUFBbURDLE9BQW5ELENBQTJELFVBQVNDLE1BQVQsRUFBaUI7QUFDeEVBLFlBQU0sQ0FBQ0MsZ0JBQVAsQ0FBd0IsT0FBeEIsRUFBaUMsVUFBU0MsR0FBVCxFQUFjO0FBQzNDLFlBQUlDLElBQUksR0FBR0gsTUFBTSxDQUFDSSxhQUFQLENBQXFCQyxRQUFyQixDQUE4QkMsSUFBOUIsQ0FBbUMsQ0FBbkMsQ0FBWDs7QUFFQSxZQUFJSCxJQUFJLENBQUNJLFNBQUwsQ0FBZUMsUUFBZixDQUF3QixNQUF4QixDQUFKLEVBQXFDO0FBQ2pDTCxjQUFJLENBQUNNLGVBQUwsQ0FBcUIsYUFBckI7QUFDQU4sY0FBSSxDQUFDTSxlQUFMLENBQXFCLE9BQXJCOztBQUVBLGNBQUliLE9BQU0sR0FBRyxJQUFJYyw4Q0FBSixDQUFXVixNQUFYLEVBQW1CRyxJQUFuQixFQUF5QjtBQUNsQ1EscUJBQVMsRUFBRTtBQUNQQyw2QkFBZSxFQUFFO0FBQUVDLHVCQUFPLEVBQUU7QUFBWCxlQURWO0FBRVBDLGtCQUFJLEVBQUU7QUFBRUQsdUJBQU8sRUFBRTtBQUFYLGVBRkM7QUFHUEUsa0JBQUksRUFBRTtBQUFFRix1QkFBTyxFQUFFO0FBQVg7QUFIQztBQUR1QixXQUF6QixDQUFiO0FBT0g7QUFDSixPQWZEO0FBZ0JILEtBakJEO0FBa0JILEdBbkJEOztBQXFCQWpCLFFBQU07QUFFTm9CLG9EQUFBLENBQVEsa0JBQVIsRUFBNEIsVUFBU2QsR0FBVCxFQUFjO0FBQ3RDTixVQUFNO0FBQ1QsR0FGRDtBQUlIIiwiZmlsZSI6Ii4vYXNzZXRzL2pzL3VpL21vZGFsX3BvcHBlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQb3BwZXIgZnJvbSAncG9wcGVyLmpzJ1xuaW1wb3J0IGh0bXggZnJvbSAnaHRteC5vcmcnO1xuXG4vLyBXaXJlIGluIHBvcHBlci5qcyBzdXBwb3J0LiBUaGlzIGVuc3VyZSBwb3B1cHMgc3RheSB3aXRoaW4gdGhlIHZpZXdwb3J0LlxuLy9cbi8vIEJvb3RzdHJhcCBOYXRpdmUgZG9lc24ndCBpbmNvcnBvcmF0ZSBQb3BwZXIuanMuIFdlIGhhdmUgdG8gd2lyZSBldmVyeXRoaW5nIG91cnNlbHZlcy5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3RoZWRucC9ib290c3RyYXAubmF0aXZlL2lzc3Vlcy8yMTFcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICAgIGxldCBwb3BwZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcImRpdi5kcm9wZG93biA+IGJ1dHRvblwiKS5mb3JFYWNoKGZ1bmN0aW9uKGJ1dHRvbikge1xuICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgICAgICAgICBsZXQgbWVudSA9IGJ1dHRvbi5wYXJlbnRFbGVtZW50LmNoaWxkcmVuLml0ZW0oMSk7XG5cbiAgICAgICAgICAgICAgICBpZiAobWVudS5jbGFzc0xpc3QuY29udGFpbnMoXCJzaG93XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lbnUucmVtb3ZlQXR0cmlidXRlKFwieC1wbGFjZW1lbnRcIik7XG4gICAgICAgICAgICAgICAgICAgIG1lbnUucmVtb3ZlQXR0cmlidXRlKFwic3R5bGVcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IHBvcHBlciA9IG5ldyBQb3BwZXIoYnV0dG9uLCBtZW51LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RpZmllcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2ZW50T3ZlcmZsb3c6IHsgZW5hYmxlZDogdHJ1ZSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsaXA6IHsgZW5hYmxlZDogdHJ1ZX0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlkZTogeyBlbmFibGVkOiBmYWxzZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcG9wcGVyKCk7XG5cbiAgICBodG14Lm9uKFwiaHRteDphZnRlclNldHRsZVwiLCBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgcG9wcGVyKCk7XG4gICAgfSk7XG5cbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./assets/js/ui/modal_popper.js\n");

/***/ }),

/***/ "./assets/js/ui/multi_select.js":
/*!**************************************!*\
  !*** ./assets/js/ui/multi_select.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! htmx.org */ \"./node_modules/htmx.org/dist/htmx.min.js\");\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(htmx_org__WEBPACK_IMPORTED_MODULE_0__);\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*!\n * IconicMultiSelect v0.7.0\n * Licence:  MIT\n * (c) 2021 Sidney Wimart.\n *\n * See: https://github.com/sidneywm/iconic-multiselect\n *\n * This is plugin is installed manually since no package on NPM exists.\n */\n\n/**\n * @version IconicMultiSelect v0.7.0\n * @licence  MIT\n */\n\nvar IconicMultiSelect = /*#__PURE__*/function () {\n  /**\n   * Iconic Multiselect constructor.\n   * @param { Object[] } data - Array of objects.\n   * @param { string } noData - Defines the message when there is no data input.\n   * @param { string } noResults - Defines the message when there is no result if options are filtered.\n   * @param { string } placeholder -  Defines the placeholder's text.\n   * @param { string } select - DOM element to be selected. It must be a HTML Select tag - https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select\n   * @param { string } textField - Field to select in the object for the text.\n   * @param { string } valueField - Field to select in the object for the value.\n   */\n  function IconicMultiSelect(_ref) {\n    var data = _ref.data,\n        itemTemplate = _ref.itemTemplate,\n        noData = _ref.noData,\n        noResults = _ref.noResults,\n        placeholder = _ref.placeholder,\n        select = _ref.select,\n        tagTemplate = _ref.tagTemplate,\n        textField = _ref.textField,\n        valueField = _ref.valueField;\n\n    _classCallCheck(this, IconicMultiSelect);\n\n    _defineProperty(this, \"_data\", void 0);\n\n    _defineProperty(this, \"_domElements\", void 0);\n\n    _defineProperty(this, \"_event\", function () {});\n\n    _defineProperty(this, \"_itemTemplate\", void 0);\n\n    _defineProperty(this, \"_multiselect\", void 0);\n\n    _defineProperty(this, \"_noData\", void 0);\n\n    _defineProperty(this, \"_noResults\", void 0);\n\n    _defineProperty(this, \"_options\", []);\n\n    _defineProperty(this, \"_placeholder\", void 0);\n\n    _defineProperty(this, \"_select\", void 0);\n\n    _defineProperty(this, \"_selectContainer\", void 0);\n\n    _defineProperty(this, \"_selectedOptions\", []);\n\n    _defineProperty(this, \"_tagTemplate\", void 0);\n\n    _defineProperty(this, \"_textField\", void 0);\n\n    _defineProperty(this, \"_valueField\", void 0);\n\n    _defineProperty(this, \"_cross\", \"\\n      <svg\\n        width=\\\"24\\\"\\n        height=\\\"24\\\"\\n        viewBox=\\\"0 0 24 24\\\"\\n        fill=\\\"none\\\"\\n        xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n      >\\n        <path\\n          d=\\\"M6.2253 4.81108C5.83477 4.42056 5.20161 4.42056 4.81108 4.81108C4.42056 5.20161 4.42056 5.83477 4.81108 6.2253L10.5858 12L4.81114 17.7747C4.42062 18.1652 4.42062 18.7984 4.81114 19.1889C5.20167 19.5794 5.83483 19.5794 6.22535 19.1889L12 13.4142L17.7747 19.1889C18.1652 19.5794 18.7984 19.5794 19.1889 19.1889C19.5794 18.7984 19.5794 18.1652 19.1889 17.7747L13.4142 12L19.189 6.2253C19.5795 5.83477 19.5795 5.20161 19.189 4.81108C18.7985 4.42056 18.1653 4.42056 17.7748 4.81108L12 10.5858L6.2253 4.81108Z\\\"\\n          fill=\\\"currentColor\\\"\\n        />\\n      </svg>\\n      \");\n\n    this._data = data !== null && data !== void 0 ? data : [];\n    this._itemTemplate = itemTemplate !== null && itemTemplate !== void 0 ? itemTemplate : null;\n    this._noData = noData !== null && noData !== void 0 ? noData : \"No data found.\";\n    this._noResults = noResults !== null && noResults !== void 0 ? noResults : \"No results found.\";\n    this._placeholder = placeholder !== null && placeholder !== void 0 ? placeholder : \"Select...\";\n    this._select = select;\n    this._selectContainer = document.querySelector(select);\n    this._tagTemplate = tagTemplate !== null && tagTemplate !== void 0 ? tagTemplate : null;\n    this._textField = textField !== null && textField !== void 0 ? textField : null;\n    this._valueField = valueField !== null && valueField !== void 0 ? valueField : null;\n  }\n  /**\n   * Initialize the Iconic Multiselect component.\n   * @public\n   */\n\n\n  _createClass(IconicMultiSelect, [{\n    key: \"init\",\n    value: function init() {\n      if (this._selectContainer && this._selectContainer.nodeName === \"SELECT\") {\n        if (this._itemTemplate && this._data.length === 0) throw new Error(\"itemTemplate must be initialized with data from the component settings\");\n        if (this._tagTemplate && this._data.length === 0) throw new Error(\"tagTemplate must be initialized with data from the component settings\");\n        this._options = this._data.length > 0 ? this._getDataFromSettings() : this._getDataFromSelectTag();\n\n        this._renderMultiselect();\n\n        this._renderOptionsList();\n\n        this._domElements = {\n          clear: this._multiselect.querySelector(\".multiselect__clear-btn\"),\n          input: this._multiselect.querySelector(\".multiselect__input\"),\n          optionsContainer: this._multiselect.querySelector(\".multiselect__options\"),\n          optionsContainerList: this._multiselect.querySelector(\".multiselect__options > ul\"),\n          options: {\n            list: this._multiselect.querySelectorAll(\".multiselect__options > ul > li\"),\n            find: function find(callbackFn) {\n              for (var i = 0; i < this.list.length; i++) {\n                var node = this.list[i];\n                if (callbackFn(node)) return node;\n              }\n\n              return undefined;\n            },\n            some: function some(callbackFn) {\n              for (var i = 0; i < this.list.length; i++) {\n                var node = this.list[i];\n                if (callbackFn(node, i)) return true;\n              }\n\n              return false;\n            }\n          }\n        };\n\n        this._enableEventListenners();\n\n        this._initSelectedList();\n      } else {\n        throw new Error(\"The selector '\".concat(this._select, \"' did not select any valid select tag.\"));\n      }\n    }\n    /**\n     * Subscribes to the emitted events.\n     * @param { Function } callback - Callback function which emits a custom event object.\n     * @public\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(callback) {\n      if (typeof callback === \"function\") {\n        this._event = callback;\n      } else {\n        throw new Error(\"parameter in the subscribe method is not a function\");\n      }\n    }\n    /**\n     * Add an option to the selection list.\n     * @param { Object: { text: string; value: string; }} option\n     * @private\n     */\n\n  }, {\n    key: \"_addOptionToList\",\n    value: function _addOptionToList(option, index) {\n      var _this = this;\n\n      var html = \"<span class=\\\"multiselect__selected\\\" data-value=\\\"\".concat(option.value, \"\\\">\").concat(this._tagTemplate ? this._processTemplate(this._tagTemplate, index) : option.text, \"<span class=\\\"multiselect__remove-btn\\\">\").concat(this._cross, \"</span></span>\");\n\n      this._domElements.input.insertAdjacentHTML(\"beforebegin\", html);\n\n      var _this$_multiselect$qu = this._multiselect.querySelector(\"span[data-value=\\\"\".concat(option.value, \"\\\"]\")),\n          removeBtn = _this$_multiselect$qu.lastElementChild;\n\n      removeBtn.addEventListener(\"click\", function () {\n        var target = _this._domElements.options.find(function (el) {\n          return el.dataset.value == option.value;\n        });\n\n        _this._handleOption(target);\n      });\n    }\n    /**\n     * Clears all selected options.\n     * @private\n     */\n\n  }, {\n    key: \"_clearSelection\",\n    value: function _clearSelection() {\n      var _this2 = this;\n\n      var _loop = function _loop(i) {\n        var option = _this2._selectedOptions[i];\n\n        var target = _this2._domElements.options.find(function (el) {\n          return el.dataset.value == option.value;\n        });\n\n        target.classList.remove(\"multiselect__options--selected\");\n\n        _this2._removeOptionFromList(target.dataset.value);\n      };\n\n      for (var i = 0; i < this._selectedOptions.length; i++) {\n        _loop(i);\n      }\n\n      this._selectedOptions = [];\n\n      this._handleClearSelectionBtn();\n\n      this._handlePlaceholder();\n\n      this._dispatchEvent({\n        action: \"CLEAR_ALL_OPTIONS\",\n        selection: this._selectedOptions\n      });\n    }\n    /**\n     * Close the options container.\n     * @private\n     */\n\n  }, {\n    key: \"_closeList\",\n    value: function _closeList() {\n      this._domElements.input.value = \"\";\n\n      this._domElements.optionsContainer.classList.remove(\"visible\");\n\n      this._filterOptions(\"\");\n\n      this._removeAllArrowSelected();\n    }\n    /**\n     * Dispatches new events.\n     * @param { object : { action: string; selection: { option: string; text: string; }[]; value?: string; } } event\n     * @private\n     */\n\n  }, {\n    key: \"_dispatchEvent\",\n    value: function _dispatchEvent(event) {\n      this._event(event);\n    }\n    /**\n     * Enables all main event listenners.\n     * @private\n     */\n\n  }, {\n    key: \"_enableEventListenners\",\n    value: function _enableEventListenners() {\n      var _this3 = this;\n\n      document.addEventListener(\"mouseup\", function (_ref2) {\n        var target = _ref2.target;\n\n        if (!_this3._multiselect.contains(target)) {\n          _this3._filterOptions(\"\");\n\n          _this3._closeList();\n\n          _this3._handlePlaceholder();\n        }\n      });\n\n      this._domElements.clear.addEventListener(\"click\", function () {\n        _this3._clearSelection();\n      });\n\n      for (var i = 0; i < this._domElements.options.list.length; i++) {\n        var option = this._domElements.options.list[i];\n        option.addEventListener(\"click\", function (_ref3) {\n          var target = _ref3.target;\n\n          _this3._handleOption(target);\n\n          _this3._closeList();\n        });\n      }\n\n      this._domElements.input.addEventListener(\"focus\", function () {\n        _this3._domElements.optionsContainer.classList.add(\"visible\");\n\n        _this3._domElements.input.placeholder = \"\";\n      });\n\n      this._domElements.input.addEventListener(\"input\", function (_ref4) {\n        var value = _ref4.target.value;\n\n        if (_this3._domElements.options.list.length > 0) {\n          _this3._filterOptions(value);\n        }\n      });\n\n      this._domElements.input.addEventListener(\"keydown\", function (e) {\n        _this3._handleArrows(e);\n\n        _this3._handleBackspace(e);\n\n        _this3._handleEnter(e);\n      });\n    }\n    /**\n     * Filters user input.\n     * @param { string } value\n     * @private\n     */\n\n  }, {\n    key: \"_filterOptions\",\n    value: function _filterOptions(value) {\n      var _this4 = this;\n\n      var isOpen = this._domElements.optionsContainer.classList.contains(\"visible\");\n\n      var valueLowerCase = value.toLowerCase();\n\n      if (!isOpen && value.length > 0) {\n        this._domElements.optionsContainer.classList.add(\"visible\");\n      }\n\n      if (this._domElements.options.list.length > 0) {\n        for (var i = 0; i < this._domElements.options.list.length; i++) {\n          var el = this._domElements.options.list[i];\n          var text = this._itemTemplate ? this._data[i][this._textField] : el.textContent;\n\n          if (text.toLowerCase().substring(0, valueLowerCase.length) === valueLowerCase) {\n            this._domElements.optionsContainerList.appendChild(el);\n          } else {\n            el.parentNode && el.parentNode.removeChild(el);\n          }\n        }\n\n        var hasResults = this._domElements.options.some(function (el, index) {\n          return (_this4._itemTemplate ? _this4._data[index][_this4._textField] : el.textContent).toLowerCase().substring(0, valueLowerCase.length) === valueLowerCase;\n        });\n\n        this._showNoResults(!hasResults);\n      }\n    }\n  }, {\n    key: \"_generateId\",\n    value: function _generateId(length) {\n      var result = \"\";\n      var characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n      var charactersLength = characters.length;\n\n      for (var i = 0; i < length; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n      }\n\n      return result;\n    }\n    /**\n     * Gets data from select tag.\n     * @private\n     */\n\n  }, {\n    key: \"_getDataFromSelectTag\",\n    value: function _getDataFromSelectTag() {\n      var arr = [];\n      var options = this._selectContainer.options;\n\n      for (var i = 0; i < options.length; i++) {\n        var item = options[i];\n        arr.push({\n          text: item.text,\n          value: item.value,\n          selected: item.hasAttribute('selected')\n        });\n      }\n\n      return arr;\n    }\n    /**\n     * Gets data from settings.\n     * @private\n     */\n\n  }, {\n    key: \"_getDataFromSettings\",\n    value: function _getDataFromSettings() {\n      if (this._data.length > 0 && this._valueField && this._textField) {\n        var isValueFieldValid = typeof this._valueField === \"string\";\n        var isTextFieldValid = typeof this._textField === \"string\";\n        var arr = [];\n\n        if (!isValueFieldValid || !isTextFieldValid) {\n          throw new Error(\"textField and valueField must be of type string\");\n        }\n\n        for (var i = 0; i < this._data.length; i++) {\n          var item = this._data[i];\n          arr.push({\n            value: item[this._valueField],\n            text: item[this._textField],\n            selected: typeof item.selected === \"boolean\" ? item.selected : false\n          });\n        }\n\n        return arr;\n      } else {\n        return null;\n      }\n    }\n    /**\n     * Handles Arrow up & Down. Selection of an option is also possible with these keys.\n     * @param { Event } event\n     * @private\n     */\n\n  }, {\n    key: \"_handleArrows\",\n    value: function _handleArrows(event) {\n      if (event.keyCode === 40 || event.keyCode === 38) {\n        event.preventDefault();\n\n        var isOpen = this._domElements.optionsContainer.classList.contains(\"visible\"); // An updated view of the container is needed because of the filtering option\n\n\n        var optionsContainerList = this._multiselect.querySelector(\".multiselect__options > ul\");\n\n        if (!isOpen) {\n          this._domElements.optionsContainer.classList.add(\"visible\");\n\n          optionsContainerList.firstElementChild.classList.add(\"arrow-selected\");\n          optionsContainerList.firstElementChild.scrollIntoView(false);\n        } else {\n          var selected = this._multiselect.querySelector(\".multiselect__options ul li.arrow-selected\");\n\n          var action = {\n            ArrowUp: \"previous\",\n            Up: \"previous\",\n            ArrowDown: \"next\",\n            Down: \"next\"\n          };\n\n          if (!selected) {\n            optionsContainerList.firstElementChild.classList.add(\"arrow-selected\");\n            optionsContainerList.firstElementChild.scrollIntoView(false);\n            return;\n          }\n\n          selected.classList.remove(\"arrow-selected\");\n          selected = selected[action[event.key] + \"ElementSibling\"]; // Go to start or end of the popup list\n\n          if (!selected) {\n            selected = optionsContainerList.children[action[event.key] === \"next\" ? 0 : optionsContainerList.children.length - 1];\n            selected.classList.add(\"arrow-selected\");\n\n            this._scrollIntoView(optionsContainerList, selected);\n\n            return;\n          }\n\n          selected.classList.add(\"arrow-selected\");\n\n          this._scrollIntoView(optionsContainerList, selected);\n        }\n      }\n    }\n    /**\n     * Handles the backspace key event - Deletes the preceding option in the selection list.\n     * @param { Event } e\n     * @private\n     */\n\n  }, {\n    key: \"_handleBackspace\",\n    value: function _handleBackspace(e) {\n      if (e.keyCode === 8 && e.target.value === \"\") {\n        var lastSelectedOption = this._selectedOptions.length > 0 ? this._selectedOptions[this._selectedOptions.length - 1] : null;\n\n        if (lastSelectedOption) {\n          var targetLastSelectedOption = this._multiselect.querySelector(\"li[data-value=\\\"\".concat(lastSelectedOption.value, \"\\\"]\"));\n\n          this._handleOption(targetLastSelectedOption);\n\n          if (this._selectedOptions.length === 0) {\n            this._domElements.optionsContainer.classList.remove(\"visible\");\n          }\n        }\n      }\n    }\n    /**\n     * Shows clear selection button if some options are selected.\n     * @private\n     */\n\n  }, {\n    key: \"_handleClearSelectionBtn\",\n    value: function _handleClearSelectionBtn() {\n      if (this._selectedOptions.length > 0) {\n        this._domElements.clear.style.display = \"flex\";\n      } else {\n        this._domElements.clear.style.display = \"none\";\n      }\n    }\n    /**\n     * Handles the enter key event.\n     * @param { Event } event\n     * @private\n     */\n\n  }, {\n    key: \"_handleEnter\",\n    value: function _handleEnter(event) {\n      if (event.keyCode === 13) {\n        var selected = this._multiselect.querySelector(\".multiselect__options ul li.arrow-selected\");\n\n        if (selected) {\n          this._handleOption(selected);\n\n          this._closeList();\n        }\n      }\n    }\n  }, {\n    key: \"_handleOption\",\n    value: function _handleOption(target) {\n      var dispatchEvent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      // Remove\n      for (var i = 0; i < this._selectedOptions.length; i++) {\n        var el = this._selectedOptions[i];\n\n        if (el.value == target.dataset.value) {\n          target.classList.remove(\"multiselect__options--selected\");\n\n          this._selectedOptions.splice(i, 1);\n\n          this._removeOptionFromList(target.dataset.value);\n\n          this._handleClearSelectionBtn();\n\n          this._handlePlaceholder();\n\n          return dispatchEvent && this._dispatchEvent({\n            action: \"REMOVE_OPTION\",\n            value: target.dataset.value,\n            selection: this._selectedOptions\n          });\n        }\n      } // Add\n\n\n      for (var _i = 0; _i < this._options.length; _i++) {\n        var option = this._options[_i];\n\n        if (option.value == target.dataset.value) {\n          target.classList.add(\"multiselect__options--selected\");\n          this._selectedOptions = [].concat(_toConsumableArray(this._selectedOptions), [option]);\n\n          this._addOptionToList(option, _i);\n\n          this._handleClearSelectionBtn();\n\n          this._handlePlaceholder();\n\n          return dispatchEvent && this._dispatchEvent({\n            action: \"ADD_OPTION\",\n            value: target.dataset.value,\n            selection: this._selectedOptions\n          });\n        }\n      }\n    }\n    /**\n     * Shows the placeholder if no options are selected.\n     * @private\n     */\n\n  }, {\n    key: \"_handlePlaceholder\",\n    value: function _handlePlaceholder() {\n      if (this._selectedOptions.length > 0) {\n        this._domElements.input.placeholder = \"\";\n      } else {\n        this._domElements.input.placeholder = this._placeholder;\n      }\n    }\n  }, {\n    key: \"_initSelectedList\",\n    value: function _initSelectedList() {\n      var _this5 = this;\n\n      var hasItemsSelected = false;\n\n      var _loop2 = function _loop2(i) {\n        var option = _this5._options[i];\n\n        if (option.selected) {\n          hasItemsSelected = true;\n\n          var target = _this5._domElements.options.find(function (el) {\n            return el.dataset.value == option.value;\n          });\n\n          target.classList.add(\"multiselect__options--selected\");\n          _this5._selectedOptions = [].concat(_toConsumableArray(_this5._selectedOptions), [option]);\n\n          _this5._addOptionToList(option, i);\n        }\n      };\n\n      for (var i = 0; i < this._options.length; i++) {\n        _loop2(i);\n      }\n\n      if (hasItemsSelected) this._handleClearSelectionBtn();\n\n      this._handlePlaceholder();\n    }\n    /**\n     * Process the custom template.\n     * @param { string } template\n     * @private\n     */\n\n  }, {\n    key: \"_processTemplate\",\n    value: function _processTemplate(template, index) {\n      var processedTemplate = template;\n      var objAttr = template.match(/\\$\\{(\\w+)\\}/g).map(function (e) {\n        return e.replace(/\\$\\{|\\}/g, \"\");\n      });\n\n      for (var i = 0; i < objAttr.length; i++) {\n        var _this$_data$index$att;\n\n        var attr = objAttr[i];\n        processedTemplate = processedTemplate.replace(\"${\".concat(attr, \"}\"), (_this$_data$index$att = this._data[index][attr]) !== null && _this$_data$index$att !== void 0 ? _this$_data$index$att : \"\");\n      }\n\n      return processedTemplate;\n    }\n  }, {\n    key: \"_removeAllArrowSelected\",\n    value: function _removeAllArrowSelected() {\n      var className = \"arrow-selected\";\n\n      var target = this._domElements.options.find(function (el) {\n        return el.classList.contains(className);\n      });\n\n      target && target.classList.remove(className);\n    }\n    /**\n     * Removes an option from the list.\n     * @param { string } value\n     * @private\n     */\n\n  }, {\n    key: \"_removeOptionFromList\",\n    value: function _removeOptionFromList(value) {\n      var optionDom = this._multiselect.querySelector(\"span[data-value=\\\"\".concat(value, \"\\\"]\"));\n\n      optionDom && optionDom.parentNode && optionDom.parentNode.removeChild(optionDom);\n    }\n    /**\n     * Renders the multiselect options list view.\n     * @private\n     */\n\n  }, {\n    key: \"_renderOptionsList\",\n    value: function _renderOptionsList() {\n      var _this6 = this;\n\n      var html = \"\\n          <div class=\\\"multiselect__options\\\">\\n            <ul>\\n            \".concat(this._options.length > 0 && !this._itemTemplate ? this._options.map(function (option) {\n        return \"\\n                <li data-value=\\\"\".concat(option.value, \"\\\">\").concat(option.text, \"</li>\\n              \");\n      }).join(\"\") : \"\", \"\\n\\n            \").concat(this._options.length > 0 && this._itemTemplate ? this._options.map(function (option, index) {\n        return \"\\n                <li data-value=\\\"\".concat(option.value, \"\\\">\").concat(_this6._processTemplate(_this6._itemTemplate, index), \"</li>\\n              \");\n      }).join(\"\") : \"\", \"\\n            \").concat(this._showNoData(this._options.length === 0), \"\\n            </ul>\\n          </div>\\n        \");\n\n      this._multiselect.insertAdjacentHTML(\"beforeend\", html);\n    }\n    /**\n     * Renders the multiselect view.\n     * @private\n     */\n\n  }, {\n    key: \"_renderMultiselect\",\n    value: function _renderMultiselect() {\n      this._selectContainer.style.display = \"none\";\n\n      var id = \"iconic-\" + this._generateId(20);\n\n      var html = \"\\n        <div id=\\\"\".concat(id, \"\\\" class=\\\"multiselect__container\\\">\\n          <div class=\\\"multiselect__wrapper\\\">\\n            <input class=\\\"multiselect__input\\\" placeholder=\\\"\").concat(this._placeholder, \"\\\" />\\n          </div>\\n          <span style=\\\"display: none;\\\" class=\\\"multiselect__clear-btn\\\">\").concat(this._cross, \"</span>\\n        </div>\\n      \");\n\n      this._selectContainer.insertAdjacentHTML(\"afterend\", html);\n\n      this._multiselect = document.querySelector(\"#\".concat(id));\n    }\n    /**\n     * ScrollIntoView - This small utility reproduces the behavior of .scrollIntoView({ block: \"nearest\", inline: \"nearest\" })\n     * This is for IE compatibility without a need of a polyfill\n     * @private\n     */\n\n  }, {\n    key: \"_scrollIntoView\",\n    value: function _scrollIntoView(parent, child) {\n      var rectParent = parent.getBoundingClientRect();\n      var rectChild = child.getBoundingClientRect(); // Detect if not visible at top and then scroll to the top\n\n      if (!(rectParent.top < rectChild.bottom - child.offsetHeight)) {\n        parent.scrollTop = child.clientHeight + (child.offsetTop - child.offsetHeight);\n      } // Detect if not visible at bottom and then scroll to the bottom\n\n\n      if (!(rectParent.bottom > rectChild.top + child.offsetHeight)) {\n        parent.scrollTop = child.clientHeight + (child.offsetTop - child.offsetHeight) - (parent.offsetHeight - (child.offsetHeight + (child.offsetHeight - child.clientHeight)));\n      }\n    }\n    /**\n     * Shows a no data message.\n     * @param { boolean } condition\n     * @private\n     */\n\n  }, {\n    key: \"_showNoData\",\n    value: function _showNoData(condition) {\n      return condition ? \"<p class=\\\"multiselect__options--no-data\\\">\".concat(this._noData, \"</p>\") : \"\";\n    }\n    /**\n     * Shows a no results message.\n     * @param { boolean } condition\n     * @private\n     */\n\n  }, {\n    key: \"_showNoResults\",\n    value: function _showNoResults(condition) {\n      var dom = this._multiselect.querySelector(\".multiselect__options--no-results\");\n\n      if (condition) {\n        var html = \"<p class=\\\"multiselect__options--no-results\\\">\".concat(this._noResults, \"</p>\");\n        !dom && this._domElements.optionsContainerList.insertAdjacentHTML(\"beforeend\", html);\n      } else {\n        dom && dom.parentNode && dom.parentNode.removeChild(dom);\n      }\n    }\n  }]);\n\n  return IconicMultiSelect;\n}();\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  function setMultiSelect() {\n    document.querySelectorAll(\".custom-multi-select\").forEach(function (el) {\n      var iconicMultiSelectElement = new IconicMultiSelect({\n        select: \"#\" + el.id\n      }); // See: https://github.com/sidneywm/iconic-multiselect/issues/10\n\n      iconicMultiSelectElement.subscribe(function (evt) {\n        switch (evt.action) {\n          case 'ADD_OPTION':\n            for (var i = 0; i < iconicMultiSelectElement._selectContainer.options.length; i++) {\n              if (iconicMultiSelectElement._selectContainer.options[i].value == evt.value) {\n                iconicMultiSelectElement._selectContainer.options[i].selected = true;\n\n                iconicMultiSelectElement._selectContainer.options[i].setAttribute(\"selected\", \"\");\n              }\n            }\n\n            break;\n\n          case 'REMOVE_OPTION':\n            for (var _i2 = 0; _i2 < iconicMultiSelectElement._selectContainer.options.length; _i2++) {\n              if (iconicMultiSelectElement._selectContainer.options[_i2].value == evt.value) {\n                iconicMultiSelectElement._selectContainer.options[_i2].selected = false;\n\n                iconicMultiSelectElement._selectContainer.options[_i2].removeAttribute(\"selected\", \"\");\n              }\n            }\n\n            break;\n        }\n      });\n      iconicMultiSelectElement.init();\n    });\n  } // TODO\n  //   Disable the IconicMultiSelect for now. We're not allt hat\n  // setMultiSelect()\n  // htmx.on(\"htmx:afterSettle\", function(evt) {\n  //     setMultiSelect()\n  // });\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./assets/js/ui/multi_select.js\n");

/***/ }),

/***/ "./assets/js/ui/multiple.js":
/*!**********************************!*\
  !*** ./assets/js/ui/multiple.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! htmx.org */ \"./node_modules/htmx.org/dist/htmx.min.js\");\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(htmx_org__WEBPACK_IMPORTED_MODULE_0__);\n // Handles fields with multiple values\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var multiple = function multiple() {\n    // Delete a value from the field\n    var deleteFormValue = function deleteFormValue(e) {\n      var formField = e.target.closest(\"div.form-values\");\n      e.target.closest(\"div.form-value\").remove();\n      var length = Array.from(formField.children).length;\n\n      for (var i = 0; i < length; i++) {\n        var input = formField.children[i].querySelector(\".form-control\");\n        var name = input.getAttribute(\"name\");\n        name = name.replace(/\\[.*\\]/, \"\");\n        input.setAttribute(\"name\", name + \"[\" + i + \"]\");\n      }\n    }; // Add a new value to the field\n\n\n    var addFormValue = function addFormValue(e) {\n      var formField = e.target.closest(\"div.form-values\");\n      var formValue = formField.lastElementChild;\n      var length = Array.from(formField.children).length;\n      var node = formValue.cloneNode(true);\n      formValue.querySelector(\".form-control\").value = \"\";\n      var input = formValue.querySelector(\".form-control\");\n      var inputName = input.getAttribute(\"name\");\n      inputName = inputName.replace(/\\[.*\\]/, \"\");\n      input.setAttribute(\"name\", inputName + \"[\" + length + \"]\");\n      var classList = node.querySelector(\"button.form-value-add\").classList;\n      classList.remove(\"form-value-add\");\n      classList.remove(\"btn-outline-primary\");\n      classList.add(\"btn-link-muted\");\n      classList.add(\"form-value-delete\");\n      classList = node.querySelector(\"i.if-add\").classList;\n      classList.remove(\"if-add\");\n      classList.add(\"if-delete\");\n      node.querySelector(\"div.sr-only\").textContent = \"Delete\";\n      node.querySelector(\"button.form-value-delete\").addEventListener(\"click\", deleteFormValue);\n      var nodes = node.querySelectorAll(\".is-invalid\");\n      nodes.forEach(function (item) {\n        item.classList.remove(\"is-invalid\");\n      });\n      formValue.before(node);\n    };\n\n    document.querySelectorAll(\"button.form-value-delete\").forEach(function (el) {\n      return el.addEventListener(\"click\", deleteFormValue);\n    });\n    document.querySelectorAll(\"button.form-value-add\").forEach(function (el) {\n      return el.addEventListener(\"click\", addFormValue);\n    });\n  }; // Init event listeners whenever HTMX swaps in a card-collapsible having a form element.\n\n\n  htmx_org__WEBPACK_IMPORTED_MODULE_0___default().on(\"htmx:afterSettle\", function (evt) {\n    var item = evt.detail.target.children.item(0);\n\n    if (item && item.nodeName && item.nodeName.toLowerCase() == \"form\") {\n      multiple();\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./assets/js/ui/multiple.js\n");

/***/ }),

/***/ "./assets/js/ui/radio_card.js":
/*!************************************!*\
  !*** ./assets/js/ui/radio_card.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! htmx.org */ \"./node_modules/htmx.org/dist/htmx.min.js\");\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(htmx_org__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var toggleSelected = function toggleSelected(evt) {\n    var group = evt.currentTarget.closest('.radio-card-group');\n    var cards = group.querySelectorAll('.c-radio-card');\n    cards.forEach(function (card) {\n      card.setAttribute('aria-selected', 'false');\n      card.classList.remove('c-radio-card--selected');\n    });\n    evt.currentTarget.setAttribute('aria-selected', 'true');\n    evt.currentTarget.classList.add('c-radio-card--selected');\n  };\n\n  var addEvents = function addEvents() {\n    document.querySelectorAll('.radio-card-group .c-radio-card').forEach(function (card) {\n      return card.addEventListener('click', toggleSelected);\n    });\n  };\n\n  addEvents(); // TODO don't use afterSettle\n\n  htmx_org__WEBPACK_IMPORTED_MODULE_0___default().on(\"htmx:afterSettle\", function (evt) {\n    addEvents();\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvdWkvcmFkaW9fY2FyZC5qcz83MTc5Il0sIm5hbWVzIjpbInRvZ2dsZVNlbGVjdGVkIiwiZXZ0IiwiZ3JvdXAiLCJjdXJyZW50VGFyZ2V0IiwiY2xvc2VzdCIsImNhcmRzIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJjYXJkIiwic2V0QXR0cmlidXRlIiwiY2xhc3NMaXN0IiwicmVtb3ZlIiwiYWRkIiwiYWRkRXZlbnRzIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiaHRteCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFFQSw2QkFBZSxzQ0FBWTtBQUN2QixNQUFJQSxjQUFjLEdBQUcsU0FBakJBLGNBQWlCLENBQVNDLEdBQVQsRUFBYztBQUMvQixRQUFJQyxLQUFLLEdBQUdELEdBQUcsQ0FBQ0UsYUFBSixDQUFrQkMsT0FBbEIsQ0FBMEIsbUJBQTFCLENBQVo7QUFDQSxRQUFJQyxLQUFLLEdBQUdILEtBQUssQ0FBQ0ksZ0JBQU4sQ0FBdUIsZUFBdkIsQ0FBWjtBQUNBRCxTQUFLLENBQUNFLE9BQU4sQ0FBYyxVQUFTQyxJQUFULEVBQWU7QUFDekJBLFVBQUksQ0FBQ0MsWUFBTCxDQUFrQixlQUFsQixFQUFtQyxPQUFuQztBQUNBRCxVQUFJLENBQUNFLFNBQUwsQ0FBZUMsTUFBZixDQUFzQix3QkFBdEI7QUFDSCxLQUhEO0FBSUFWLE9BQUcsQ0FBQ0UsYUFBSixDQUFrQk0sWUFBbEIsQ0FBK0IsZUFBL0IsRUFBZ0QsTUFBaEQ7QUFDQVIsT0FBRyxDQUFDRSxhQUFKLENBQWtCTyxTQUFsQixDQUE0QkUsR0FBNUIsQ0FBZ0Msd0JBQWhDO0FBQ0gsR0FURDs7QUFXQSxNQUFJQyxTQUFTLEdBQUcsU0FBWkEsU0FBWSxHQUFXO0FBQ3ZCQyxZQUFRLENBQUNSLGdCQUFULENBQTBCLGlDQUExQixFQUE2REMsT0FBN0QsQ0FBcUUsVUFBQUMsSUFBSTtBQUFBLGFBQ3JFQSxJQUFJLENBQUNPLGdCQUFMLENBQXNCLE9BQXRCLEVBQStCZixjQUEvQixDQURxRTtBQUFBLEtBQXpFO0FBR0gsR0FKRDs7QUFNQWEsV0FBUyxHQWxCYyxDQW9CdkI7O0FBQ0FHLG9EQUFBLENBQVEsa0JBQVIsRUFBNEIsVUFBU2YsR0FBVCxFQUFjO0FBQ3RDWSxhQUFTO0FBQ1osR0FGRDtBQUdIIiwiZmlsZSI6Ii4vYXNzZXRzL2pzL3VpL3JhZGlvX2NhcmQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaHRteCBmcm9tICdodG14Lm9yZyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgdG9nZ2xlU2VsZWN0ZWQgPSBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgbGV0IGdyb3VwID0gZXZ0LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLnJhZGlvLWNhcmQtZ3JvdXAnKVxuICAgICAgICBsZXQgY2FyZHMgPSBncm91cC5xdWVyeVNlbGVjdG9yQWxsKCcuYy1yYWRpby1jYXJkJylcbiAgICAgICAgY2FyZHMuZm9yRWFjaChmdW5jdGlvbihjYXJkKSB7XG4gICAgICAgICAgICBjYXJkLnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsICdmYWxzZScpO1xuICAgICAgICAgICAgY2FyZC5jbGFzc0xpc3QucmVtb3ZlKCdjLXJhZGlvLWNhcmQtLXNlbGVjdGVkJyk7XG4gICAgICAgIH0pXG4gICAgICAgIGV2dC5jdXJyZW50VGFyZ2V0LnNldEF0dHJpYnV0ZSgnYXJpYS1zZWxlY3RlZCcsICd0cnVlJyk7XG4gICAgICAgIGV2dC5jdXJyZW50VGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2MtcmFkaW8tY2FyZC0tc2VsZWN0ZWQnKTtcbiAgICB9XG5cbiAgICBsZXQgYWRkRXZlbnRzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5yYWRpby1jYXJkLWdyb3VwIC5jLXJhZGlvLWNhcmQnKS5mb3JFYWNoKGNhcmQgPT5cbiAgICAgICAgICAgIGNhcmQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0b2dnbGVTZWxlY3RlZClcbiAgICAgICAgKVxuICAgIH1cblxuICAgIGFkZEV2ZW50cygpXG5cbiAgICAvLyBUT0RPIGRvbid0IHVzZSBhZnRlclNldHRsZVxuICAgIGh0bXgub24oXCJodG14OmFmdGVyU2V0dGxlXCIsIGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICBhZGRFdmVudHMoKVxuICAgIH0pO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./assets/js/ui/radio_card.js\n");

/***/ }),

/***/ "./assets/js/ui/tabs.js":
/*!******************************!*\
  !*** ./assets/js/ui/tabs.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var tabs = document.querySelectorAll(\".bc-toolbar ul a\"); // Set the anchor in the browser nav to the active tab.\n\n  Array.from(tabs).forEach(function (link) {\n    link.addEventListener('show.bs.tab', function (evt) {\n      window.location.hash = evt.target.hash;\n    });\n  }); // Read the hash from browser nav and show the active tab.\n\n  var hash = location.hash.replace(/^#/, \"\");\n\n  if (hash) {\n    var activeTab = document.querySelector('a[href=\"#' + hash + '\"]');\n    activeTab.Tab.show();\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvdWkvdGFicy5qcz8yZDRmIl0sIm5hbWVzIjpbInRhYnMiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJBcnJheSIsImZyb20iLCJmb3JFYWNoIiwibGluayIsImFkZEV2ZW50TGlzdGVuZXIiLCJldnQiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhhc2giLCJ0YXJnZXQiLCJyZXBsYWNlIiwiYWN0aXZlVGFiIiwicXVlcnlTZWxlY3RvciIsIlRhYiIsInNob3ciXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSw2QkFBZSxzQ0FBWTtBQUN2QixNQUFJQSxJQUFJLEdBQUdDLFFBQVEsQ0FBQ0MsZ0JBQVQsQ0FBMEIsa0JBQTFCLENBQVgsQ0FEdUIsQ0FHdkI7O0FBQ0FDLE9BQUssQ0FBQ0MsSUFBTixDQUFXSixJQUFYLEVBQWlCSyxPQUFqQixDQUF5QixVQUFVQyxJQUFWLEVBQWdCO0FBQ3JDQSxRQUFJLENBQUNDLGdCQUFMLENBQXNCLGFBQXRCLEVBQXFDLFVBQVVDLEdBQVYsRUFBZTtBQUNoREMsWUFBTSxDQUFDQyxRQUFQLENBQWdCQyxJQUFoQixHQUF1QkgsR0FBRyxDQUFDSSxNQUFKLENBQVdELElBQWxDO0FBQ0gsS0FGRDtBQUdILEdBSkQsRUFKdUIsQ0FVdkI7O0FBQ0EsTUFBSUEsSUFBSSxHQUFHRCxRQUFRLENBQUNDLElBQVQsQ0FBY0UsT0FBZCxDQUFzQixJQUF0QixFQUE0QixFQUE1QixDQUFYOztBQUNBLE1BQUlGLElBQUosRUFBVTtBQUNOLFFBQUlHLFNBQVMsR0FBSWIsUUFBUSxDQUFDYyxhQUFULENBQXVCLGNBQWNKLElBQWQsR0FBcUIsSUFBNUMsQ0FBakI7QUFDQUcsYUFBUyxDQUFDRSxHQUFWLENBQWNDLElBQWQ7QUFDSDtBQUNKIiwiZmlsZSI6Ii4vYXNzZXRzL2pzL3VpL3RhYnMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IHRhYnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLmJjLXRvb2xiYXIgdWwgYVwiKVxuXG4gICAgLy8gU2V0IHRoZSBhbmNob3IgaW4gdGhlIGJyb3dzZXIgbmF2IHRvIHRoZSBhY3RpdmUgdGFiLlxuICAgIEFycmF5LmZyb20odGFicykuZm9yRWFjaChmdW5jdGlvbiAobGluaykge1xuICAgICAgICBsaW5rLmFkZEV2ZW50TGlzdGVuZXIoJ3Nob3cuYnMudGFiJywgZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBldnQudGFyZ2V0Lmhhc2g7XG4gICAgICAgIH0pXG4gICAgfSlcblxuICAgIC8vIFJlYWQgdGhlIGhhc2ggZnJvbSBicm93c2VyIG5hdiBhbmQgc2hvdyB0aGUgYWN0aXZlIHRhYi5cbiAgICBsZXQgaGFzaCA9IGxvY2F0aW9uLmhhc2gucmVwbGFjZSgvXiMvLCBcIlwiKVxuICAgIGlmIChoYXNoKSB7XG4gICAgICAgIGxldCBhY3RpdmVUYWIgPSAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYVtocmVmPVwiIycgKyBoYXNoICsgJ1wiXScpO1xuICAgICAgICBhY3RpdmVUYWIuVGFiLnNob3coKTtcbiAgICB9XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./assets/js/ui/tabs.js\n");

/***/ }),

/***/ "./assets/js/ui/toast.js":
/*!*******************************!*\
  !*** ./assets/js/ui/toast.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! htmx.org */ \"./node_modules/htmx.org/dist/htmx.min.js\");\n/* harmony import */ var htmx_org__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(htmx_org__WEBPACK_IMPORTED_MODULE_0__);\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var dismissToast = function dismissToast(evt) {\n    evt.currentTarget.closest('.bc-toast').classList.add('d-none');\n  };\n\n  var addEvents = function addEvents() {\n    document.querySelectorAll('.bc-toast .toast-dismiss').forEach(function (btn) {\n      return btn.addEventListener('click', dismissToast);\n    });\n  };\n\n  addEvents(); // TODO don't use afterSettle\n\n  htmx_org__WEBPACK_IMPORTED_MODULE_0___default().on(\"htmx:afterSettle\", function (evt) {\n    addEvents();\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvdWkvdG9hc3QuanM/MDY0YiJdLCJuYW1lcyI6WyJkaXNtaXNzVG9hc3QiLCJldnQiLCJjdXJyZW50VGFyZ2V0IiwiY2xvc2VzdCIsImNsYXNzTGlzdCIsImFkZCIsImFkZEV2ZW50cyIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJidG4iLCJhZGRFdmVudExpc3RlbmVyIiwiaHRteCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFFQSw2QkFBZSxzQ0FBWTtBQUN2QixNQUFJQSxZQUFZLEdBQUcsU0FBZkEsWUFBZSxDQUFTQyxHQUFULEVBQWM7QUFDN0JBLE9BQUcsQ0FBQ0MsYUFBSixDQUFrQkMsT0FBbEIsQ0FBMEIsV0FBMUIsRUFBdUNDLFNBQXZDLENBQWlEQyxHQUFqRCxDQUFxRCxRQUFyRDtBQUNILEdBRkQ7O0FBSUEsTUFBSUMsU0FBUyxHQUFHLFNBQVpBLFNBQVksR0FBVztBQUN2QkMsWUFBUSxDQUFDQyxnQkFBVCxDQUEwQiwwQkFBMUIsRUFBc0RDLE9BQXRELENBQThELFVBQUFDLEdBQUc7QUFBQSxhQUM3REEsR0FBRyxDQUFDQyxnQkFBSixDQUFxQixPQUFyQixFQUE4QlgsWUFBOUIsQ0FENkQ7QUFBQSxLQUFqRTtBQUdILEdBSkQ7O0FBTUFNLFdBQVMsR0FYYyxDQWF2Qjs7QUFDQU0sb0RBQUEsQ0FBUSxrQkFBUixFQUE0QixVQUFTWCxHQUFULEVBQWM7QUFDdENLLGFBQVM7QUFDWixHQUZEO0FBR0giLCJmaWxlIjoiLi9hc3NldHMvanMvdWkvdG9hc3QuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgaHRteCBmcm9tICdodG14Lm9yZyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgZGlzbWlzc1RvYXN0ID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgIGV2dC5jdXJyZW50VGFyZ2V0LmNsb3Nlc3QoJy5iYy10b2FzdCcpLmNsYXNzTGlzdC5hZGQoJ2Qtbm9uZScpXG4gICAgfVxuXG4gICAgbGV0IGFkZEV2ZW50cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYmMtdG9hc3QgLnRvYXN0LWRpc21pc3MnKS5mb3JFYWNoKGJ0biA9PlxuICAgICAgICAgICAgYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZGlzbWlzc1RvYXN0KVxuICAgICAgICApXG4gICAgfVxuXG4gICAgYWRkRXZlbnRzKClcblxuICAgIC8vIFRPRE8gZG9uJ3QgdXNlIGFmdGVyU2V0dGxlXG4gICAgaHRteC5vbihcImh0bXg6YWZ0ZXJTZXR0bGVcIiwgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgIGFkZEV2ZW50cygpXG4gICAgfSk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./assets/js/ui/toast.js\n");

/***/ }),

/***/ "./node_modules/bootstrap.native/dist/bootstrap-native-v4.js":
/*!*******************************************************************!*\
  !*** ./node_modules/bootstrap.native/dist/bootstrap-native-v4.js ***!
  \*******************************************************************/
/***/ (function(module) {

eval("/*!\n  * Native JavaScript for Bootstrap v4.0.6 (https://thednp.github.io/bootstrap.native/)\n  * Copyright 2015-2021 © dnp_theme\n  * Licensed under MIT (https://github.com/thednp/bootstrap.native/blob/master/LICENSE)\n  */\n(function (global, factory) {\n   true ? module.exports = factory() :\n  0;\n}(this, (function () { 'use strict';\n\n  var transitionEndEvent = 'webkitTransition' in document.head.style ? 'webkitTransitionEnd' : 'transitionend';\n\n  var supportTransition = 'webkitTransition' in document.head.style || 'transition' in document.head.style;\n\n  var transitionDuration = 'webkitTransition' in document.head.style ? 'webkitTransitionDuration' : 'transitionDuration';\n\n  var transitionProperty = 'webkitTransition' in document.head.style ? 'webkitTransitionProperty' : 'transitionProperty';\n\n  function getElementTransitionDuration(element) {\n    var computedStyle = getComputedStyle(element);\n    var propertyValue = computedStyle[transitionProperty];\n    var durationValue = computedStyle[transitionDuration];\n    var durationScale = durationValue.includes('ms') ? 1 : 1000;\n    var duration = supportTransition && propertyValue && propertyValue !== 'none'\n      ? parseFloat(durationValue) * durationScale : 0;\n\n    return !Number.isNaN(duration) ? duration : 0;\n  }\n\n  function emulateTransitionEnd(element, handler) {\n    var called = 0;\n    var endEvent = new Event(transitionEndEvent);\n    var duration = getElementTransitionDuration(element);\n\n    if (duration) {\n      element.addEventListener(transitionEndEvent, function transitionEndWrapper(e) {\n        if (e.target === element) {\n          handler.apply(element, [e]);\n          element.removeEventListener(transitionEndEvent, transitionEndWrapper);\n          called = 1;\n        }\n      });\n      setTimeout(function () {\n        if (!called) { element.dispatchEvent(endEvent); }\n      }, duration + 17);\n    } else {\n      handler.apply(element, [endEvent]);\n    }\n  }\n\n  function queryElement(selector, parent) {\n    var lookUp = parent && parent instanceof Element ? parent : document;\n    return selector instanceof Element ? selector : lookUp.querySelector(selector);\n  }\n\n  function bootstrapCustomEvent(eventType, componentName, eventProperties) {\n    var OriginalCustomEvent = new CustomEvent((eventType + \".bs.\" + componentName), { cancelable: true });\n\n    if (typeof eventProperties !== 'undefined') {\n      Object.keys(eventProperties).forEach(function (key) {\n        Object.defineProperty(OriginalCustomEvent, key, {\n          value: eventProperties[key],\n        });\n      });\n    }\n    return OriginalCustomEvent;\n  }\n\n  function dispatchCustomEvent(customEvent) {\n    if (this) { this.dispatchEvent(customEvent); }\n  }\n\n  /* Native JavaScript for Bootstrap 4 | Alert\n  -------------------------------------------- */\n\n  // ALERT DEFINITION\n  // ================\n\n  function Alert(elem) {\n    var element;\n\n    // bind\n    var self = this;\n\n    // the target alert\n    var alert;\n\n    // custom events\n    var closeCustomEvent = bootstrapCustomEvent('close', 'alert');\n    var closedCustomEvent = bootstrapCustomEvent('closed', 'alert');\n\n    // private methods\n    function triggerHandler() {\n      if (alert.classList.contains('fade')) { emulateTransitionEnd(alert, transitionEndHandler); }\n      else { transitionEndHandler(); }\n    }\n    function toggleEvents(add) {\n      var action = add ? 'addEventListener' : 'removeEventListener';\n      element[action]('click', clickHandler, false);\n    }\n\n    // event handlers\n    function clickHandler(e) {\n      alert = e && e.target.closest('.alert');\n      element = queryElement('[data-dismiss=\"alert\"]', alert);\n      if (element && alert && (element === e.target || element.contains(e.target))) { self.close(); }\n    }\n    function transitionEndHandler() {\n      toggleEvents();\n      alert.parentNode.removeChild(alert);\n      dispatchCustomEvent.call(alert, closedCustomEvent);\n    }\n\n    // PUBLIC METHODS\n    self.close = function () {\n      if (alert && element && alert.classList.contains('show')) {\n        dispatchCustomEvent.call(alert, closeCustomEvent);\n        if (closeCustomEvent.defaultPrevented) { return; }\n        self.dispose();\n        alert.classList.remove('show');\n        triggerHandler();\n      }\n    };\n\n    self.dispose = function () {\n      toggleEvents();\n      delete element.Alert;\n    };\n\n    // INIT\n    // initialization element\n    element = queryElement(elem);\n\n    // find the target alert\n    alert = element.closest('.alert');\n\n    // reset on re-init\n    if (element.Alert) { element.Alert.dispose(); }\n\n    // prevent adding event handlers twice\n    if (!element.Alert) { toggleEvents(1); }\n\n    // store init object within target element\n    self.element = element;\n    element.Alert = self;\n  }\n\n  /* Native JavaScript for Bootstrap 4 | Button\n  ---------------------------------------------*/\n\n  // BUTTON DEFINITION\n  // =================\n\n  function Button(elem) {\n    var element;\n\n    // bind and labels\n    var self = this;\n    var labels;\n\n    // changeEvent\n    var changeCustomEvent = bootstrapCustomEvent('change', 'button');\n\n    // private methods\n    function toggle(e) {\n      var eTarget = e.target;\n      var parentLabel = eTarget.closest('LABEL'); // the .btn label\n      var label = null;\n\n      if (eTarget.tagName === 'LABEL') {\n        label = eTarget;\n      } else if (parentLabel) {\n        label = parentLabel;\n      }\n\n      // current input\n      var input = label && label.getElementsByTagName('INPUT')[0];\n\n      // invalidate if no input\n      if (!input) { return; }\n\n      dispatchCustomEvent.call(input, changeCustomEvent); // trigger the change for the input\n      dispatchCustomEvent.call(element, changeCustomEvent); // trigger the change for the btn-group\n\n      // manage the dom manipulation\n      if (input.type === 'checkbox') { // checkboxes\n        if (changeCustomEvent.defaultPrevented) { return; } // discontinue when defaultPrevented is true\n\n        if (!input.checked) {\n          label.classList.add('active');\n          input.getAttribute('checked');\n          input.setAttribute('checked', 'checked');\n          input.checked = true;\n        } else {\n          label.classList.remove('active');\n          input.getAttribute('checked');\n          input.removeAttribute('checked');\n          input.checked = false;\n        }\n\n        if (!element.toggled) { // prevent triggering the event twice\n          element.toggled = true;\n        }\n      }\n\n      if (input.type === 'radio' && !element.toggled) { // radio buttons\n        if (changeCustomEvent.defaultPrevented) { return; }\n        // don't trigger if already active\n        // (the OR condition is a hack to check if the buttons were selected\n        // with key press and NOT mouse click)\n        if (!input.checked || (e.screenX === 0 && e.screenY === 0)) {\n          label.classList.add('active');\n          label.classList.add('focus');\n          input.setAttribute('checked', 'checked');\n          input.checked = true;\n\n          element.toggled = true;\n          Array.from(labels).forEach(function (otherLabel) {\n            var otherInput = otherLabel.getElementsByTagName('INPUT')[0];\n            if (otherLabel !== label && otherLabel.classList.contains('active')) {\n              dispatchCustomEvent.call(otherInput, changeCustomEvent); // trigger the change\n              otherLabel.classList.remove('active');\n              otherInput.removeAttribute('checked');\n              otherInput.checked = false;\n            }\n          });\n        }\n      }\n      setTimeout(function () { element.toggled = false; }, 50);\n    }\n\n    // handlers\n    function keyHandler(e) {\n      var key = e.which || e.keyCode;\n      if (key === 32 && e.target === document.activeElement) { toggle(e); }\n    }\n    function preventScroll(e) {\n      var key = e.which || e.keyCode;\n      if (key === 32) { e.preventDefault(); }\n    }\n    function focusToggle(e) {\n      if (e.target.tagName === 'INPUT') {\n        var action = e.type === 'focusin' ? 'add' : 'remove';\n        e.target.closest('.btn').classList[action]('focus');\n      }\n    }\n    function toggleEvents(add) {\n      var action = add ? 'addEventListener' : 'removeEventListener';\n      element[action]('click', toggle, false);\n      element[action]('keyup', keyHandler, false);\n      element[action]('keydown', preventScroll, false);\n      element[action]('focusin', focusToggle, false);\n      element[action]('focusout', focusToggle, false);\n    }\n\n    // public method\n    self.dispose = function () {\n      toggleEvents();\n      delete element.Button;\n    };\n\n    // init\n    // initialization element\n    element = queryElement(elem);\n\n    // reset on re-init\n    if (element.Button) { element.Button.dispose(); }\n\n    labels = element.getElementsByClassName('btn');\n\n    // invalidate\n    if (!labels.length) { return; }\n\n    // prevent adding event handlers twice\n    if (!element.Button) { toggleEvents(1); }\n\n    // set initial toggled state\n    // toggled makes sure to prevent triggering twice the change.bs.button events\n    element.toggled = false;\n\n    // associate target with init object\n    element.Button = self;\n\n    // activate items on load\n    Array.from(labels).forEach(function (btn) {\n      var hasChecked = queryElement('input:checked', btn);\n      if (!btn.classList.contains('active') && hasChecked) {\n        btn.classList.add('active');\n      }\n      if (btn.classList.contains('active') && !hasChecked) {\n        btn.classList.remove('active');\n      }\n    });\n  }\n\n  var mouseHoverEvents = ('onmouseleave' in document) ? ['mouseenter', 'mouseleave'] : ['mouseover', 'mouseout'];\n\n  var addEventListener = 'addEventListener';\n\n  var removeEventListener = 'removeEventListener';\n\n  var supportPassive = (function () {\n    var result = false;\n    try {\n      var opts = Object.defineProperty({}, 'passive', {\n        get: function get() {\n          result = true;\n          return result;\n        },\n      });\n      document[addEventListener]('DOMContentLoaded', function wrap() {\n        document[removeEventListener]('DOMContentLoaded', wrap, opts);\n      }, opts);\n    } catch (e) {\n      throw Error('Passive events are not supported');\n    }\n\n    return result;\n  })();\n\n  // general event options\n\n  var passiveHandler = supportPassive ? { passive: true } : false;\n\n  function isElementInScrollRange(element) {\n    var bcr = element.getBoundingClientRect();\n    var viewportHeight = window.innerHeight || document.documentElement.clientHeight;\n    return bcr.top <= viewportHeight && bcr.bottom >= 0; // bottom && top\n  }\n\n  function reflow(element) {\n    return element.offsetHeight;\n  }\n\n  /* Native JavaScript for Bootstrap 4 | Carousel\n  ----------------------------------------------- */\n\n  // CAROUSEL DEFINITION\n  // ===================\n\n  function Carousel(elem, opsInput) {\n    var assign, assign$1, assign$2;\n\n    var element;\n\n    // set options\n    var options = opsInput || {};\n\n    // bind\n    var self = this;\n\n    // internal variables\n    var vars;\n    var ops;\n\n    // custom events\n    var slideCustomEvent;\n    var slidCustomEvent;\n\n    // carousel elements\n    var slides;\n    var leftArrow;\n    var rightArrow;\n    var indicator;\n    var indicators;\n\n    // handlers\n    function pauseHandler() {\n      if (ops.interval !== false && !element.classList.contains('paused')) {\n        element.classList.add('paused');\n        if (!vars.isSliding) {\n          clearInterval(vars.timer);\n          vars.timer = null;\n        }\n      }\n    }\n    function resumeHandler() {\n      if (ops.interval !== false && element.classList.contains('paused')) {\n        element.classList.remove('paused');\n        if (!vars.isSliding) {\n          clearInterval(vars.timer);\n          vars.timer = null;\n          self.cycle();\n        }\n      }\n    }\n    function indicatorHandler(e) {\n      e.preventDefault();\n      if (vars.isSliding) { return; }\n\n      var eventTarget = e.target; // event target | the current active item\n\n      if (eventTarget && !eventTarget.classList.contains('active') && eventTarget.getAttribute('data-slide-to')) {\n        vars.index = +(eventTarget.getAttribute('data-slide-to'));\n      } else { return; }\n\n      self.slideTo(vars.index); // Do the slide\n    }\n    function controlsHandler(e) {\n      e.preventDefault();\n      if (vars.isSliding) { return; }\n\n      var eventTarget = e.currentTarget || e.srcElement;\n\n      if (eventTarget === rightArrow) {\n        vars.index += 1;\n      } else if (eventTarget === leftArrow) {\n        vars.index -= 1;\n      }\n\n      self.slideTo(vars.index); // Do the slide\n    }\n    function keyHandler(ref) {\n      var which = ref.which;\n\n      if (vars.isSliding) { return; }\n      switch (which) {\n        case 39:\n          vars.index += 1;\n          break;\n        case 37:\n          vars.index -= 1;\n          break;\n        default: return;\n      }\n      self.slideTo(vars.index); // Do the slide\n    }\n    function toggleEvents(add) {\n      var action = add ? 'addEventListener' : 'removeEventListener';\n      if (ops.pause && ops.interval) {\n        element[action](mouseHoverEvents[0], pauseHandler, false);\n        element[action](mouseHoverEvents[1], resumeHandler, false);\n        element[action]('touchstart', pauseHandler, passiveHandler);\n        element[action]('touchend', resumeHandler, passiveHandler);\n      }\n\n      if (ops.touch && slides.length > 1) { element[action]('touchstart', touchDownHandler, passiveHandler); }\n\n      if (rightArrow) { rightArrow[action]('click', controlsHandler, false); }\n      if (leftArrow) { leftArrow[action]('click', controlsHandler, false); }\n\n      if (indicator) { indicator[action]('click', indicatorHandler, false); }\n      if (ops.keyboard) { window[action]('keydown', keyHandler, false); }\n    }\n    // touch events\n    function toggleTouchEvents(add) {\n      var action = add ? 'addEventListener' : 'removeEventListener';\n      element[action]('touchmove', touchMoveHandler, passiveHandler);\n      element[action]('touchend', touchEndHandler, passiveHandler);\n    }\n    function touchDownHandler(e) {\n      if (vars.isTouch) { return; }\n\n      vars.touchPosition.startX = e.changedTouches[0].pageX;\n\n      if (element.contains(e.target)) {\n        vars.isTouch = true;\n        toggleTouchEvents(1);\n      }\n    }\n    function touchMoveHandler(e) {\n      if (!vars.isTouch) { e.preventDefault(); return; }\n\n      vars.touchPosition.currentX = e.changedTouches[0].pageX;\n\n      // cancel touch if more than one changedTouches detected\n      if (e.type === 'touchmove' && e.changedTouches.length > 1) {\n        e.preventDefault();\n      }\n    }\n    function touchEndHandler(e) {\n      if (!vars.isTouch || vars.isSliding) { return; }\n\n      vars.touchPosition.endX = vars.touchPosition.currentX || e.changedTouches[0].pageX;\n\n      if (vars.isTouch) {\n        if ((!element.contains(e.target) || !element.contains(e.relatedTarget))\n            && Math.abs(vars.touchPosition.startX - vars.touchPosition.endX) < 75) {\n          return;\n        }\n        if (vars.touchPosition.currentX < vars.touchPosition.startX) {\n          vars.index += 1;\n        } else if (vars.touchPosition.currentX > vars.touchPosition.startX) {\n          vars.index -= 1;\n        }\n        vars.isTouch = false;\n        self.slideTo(vars.index);\n\n        toggleTouchEvents(); // remove\n      }\n    }\n    // private methods\n    function setActivePage(pageIndex) { // indicators\n      Array.from(indicators).forEach(function (x) { return x.classList.remove('active'); });\n      if (indicators[pageIndex]) { indicators[pageIndex].classList.add('active'); }\n    }\n    function transitionEndHandler(e) {\n      if (vars.touchPosition) {\n        var next = vars.index;\n        var timeout = e && e.target !== slides[next] ? e.elapsedTime * 1000 + 100 : 20;\n        var activeItem = self.getActiveIndex();\n        var orientation = vars.direction === 'left' ? 'next' : 'prev';\n\n        if (vars.isSliding) {\n          setTimeout(function () {\n            if (vars.touchPosition) {\n              vars.isSliding = false;\n\n              slides[next].classList.add('active');\n              slides[activeItem].classList.remove('active');\n\n              slides[next].classList.remove((\"carousel-item-\" + orientation));\n              slides[next].classList.remove((\"carousel-item-\" + (vars.direction)));\n              slides[activeItem].classList.remove((\"carousel-item-\" + (vars.direction)));\n\n              dispatchCustomEvent.call(element, slidCustomEvent);\n              // check for element, might have been disposed\n              if (!document.hidden && ops.interval && !element.classList.contains('paused')) {\n                self.cycle();\n              }\n            }\n          }, timeout);\n        }\n      }\n    }\n\n    // public methods\n    self.cycle = function () {\n      if (vars.timer) {\n        clearInterval(vars.timer);\n        vars.timer = null;\n      }\n\n      vars.timer = setInterval(function () {\n        var idx = vars.index || self.getActiveIndex();\n        if (isElementInScrollRange(element)) {\n          idx += 1;\n          self.slideTo(idx);\n        }\n      }, ops.interval);\n    };\n    self.slideTo = function (idx) {\n      if (vars.isSliding) { return; } // when controled via methods, make sure to check again\n\n      // the current active, orientation, event eventProperties\n      var activeItem = self.getActiveIndex();\n      var next = idx;\n\n      // first return if we're on the same item #227\n      if (activeItem === next) {\n        return;\n      // or determine slide direction\n      } if ((activeItem < next) || (activeItem === 0 && next === slides.length - 1)) {\n        vars.direction = 'left'; // next\n      } else if ((activeItem > next) || (activeItem === slides.length - 1 && next === 0)) {\n        vars.direction = 'right'; // prev\n      }\n\n      // find the right next index\n      if (next < 0) { next = slides.length - 1; }\n      else if (next >= slides.length) { next = 0; }\n\n      var orientation = vars.direction === 'left' ? 'next' : 'prev'; // determine type\n\n      var eventProperties = {\n        relatedTarget: slides[next], direction: vars.direction, from: activeItem, to: next,\n      };\n      slideCustomEvent = bootstrapCustomEvent('slide', 'carousel', eventProperties);\n      slidCustomEvent = bootstrapCustomEvent('slid', 'carousel', eventProperties);\n      dispatchCustomEvent.call(element, slideCustomEvent); // here we go with the slide\n      if (slideCustomEvent.defaultPrevented) { return; } // discontinue when prevented\n\n      // update index\n      vars.index = next;\n\n      vars.isSliding = true;\n      clearInterval(vars.timer);\n      vars.timer = null;\n      setActivePage(next);\n\n      if (getElementTransitionDuration(slides[next]) && element.classList.contains('slide')) {\n        slides[next].classList.add((\"carousel-item-\" + orientation));\n        reflow(slides[next]);\n        slides[next].classList.add((\"carousel-item-\" + (vars.direction)));\n        slides[activeItem].classList.add((\"carousel-item-\" + (vars.direction)));\n\n        emulateTransitionEnd(slides[next], transitionEndHandler);\n      } else {\n        slides[next].classList.add('active');\n        reflow(slides[next]);\n        slides[activeItem].classList.remove('active');\n        setTimeout(function () {\n          vars.isSliding = false;\n          // check for element, might have been disposed\n          if (ops.interval && element && !element.classList.contains('paused')) {\n            self.cycle();\n          }\n          dispatchCustomEvent.call(element, slidCustomEvent);\n        }, 100);\n      }\n    };\n\n    self.getActiveIndex = function () { return Array.from(slides).indexOf(element.getElementsByClassName('carousel-item active')[0]) || 0; };\n\n    self.dispose = function () {\n      var itemClasses = ['left', 'right', 'prev', 'next'];\n\n      Array.from(slides).forEach(function (slide, idx) {\n        if (slide.classList.contains('active')) { setActivePage(idx); }\n        itemClasses.forEach(function (cls) { return slide.classList.remove((\"carousel-item-\" + cls)); });\n      });\n      clearInterval(vars.timer);\n\n      toggleEvents();\n      vars = {};\n      ops = {};\n      delete element.Carousel;\n    };\n\n    // init\n\n    // initialization element\n    element = queryElement(elem);\n\n    // reset on re-init\n    if (element.Carousel) { element.Carousel.dispose(); }\n\n    // carousel elements\n    slides = element.getElementsByClassName('carousel-item');\n    (assign = element.getElementsByClassName('carousel-control-prev'), leftArrow = assign[0]);\n    (assign$1 = element.getElementsByClassName('carousel-control-next'), rightArrow = assign$1[0]);\n    (assign$2 = element.getElementsByClassName('carousel-indicators'), indicator = assign$2[0]);\n    indicators = (indicator && indicator.getElementsByTagName('LI')) || [];\n\n    // invalidate when not enough items\n    if (slides.length < 2) { return; }\n\n    // check options\n    // DATA API\n    var intervalAttribute = element.getAttribute('data-interval');\n    var intervalData = intervalAttribute === 'false' ? 0 : +(intervalAttribute);\n    var touchData = element.getAttribute('data-touch') === 'false' ? 0 : 1;\n    var pauseData = element.getAttribute('data-pause') === 'hover' || false;\n    var keyboardData = element.getAttribute('data-keyboard') === 'true' || false;\n\n    // JS options\n    var intervalOption = options.interval;\n    var touchOption = options.touch;\n\n    // set instance options\n    ops = {};\n    ops.keyboard = options.keyboard === true || keyboardData;\n    ops.pause = (options.pause === 'hover' || pauseData) ? 'hover' : false; // false / hover\n    ops.touch = touchOption || touchData;\n\n    ops.interval = 5000; // bootstrap carousel default interval\n\n    if (typeof intervalOption === 'number') { ops.interval = intervalOption; }\n    else if (intervalOption === false || intervalData === 0 || intervalData === false) {\n      ops.interval = 0;\n    } else if (!Number.isNaN(intervalData)) { ops.interval = intervalData; }\n\n    // set first slide active if none\n    if (self.getActiveIndex() < 0) {\n      if (slides.length) { slides[0].classList.add('active'); }\n      if (indicators.length) { setActivePage(0); }\n    }\n\n    // set initial state\n    vars = {};\n    vars.direction = 'left';\n    vars.index = 0;\n    vars.timer = null;\n    vars.isSliding = false;\n    vars.isTouch = false;\n    vars.touchPosition = {\n      startX: 0,\n      currentX: 0,\n      endX: 0,\n    };\n\n    // attach event handlers\n    toggleEvents(1);\n\n    // start to cycle if interval is set\n    if (ops.interval) { self.cycle(); }\n\n    // associate init object to target\n    element.Carousel = self;\n  }\n\n  /* Native JavaScript for Bootstrap 4 | Collapse\n  ----------------------------------------------- */\n\n  // COLLAPSE DEFINITION\n  // ===================\n\n  function Collapse(elem, opsInput) {\n    var element;\n    // set options\n    var options = opsInput || {};\n\n    // bind\n    var self = this;\n\n    // target practice\n    var accordion = null;\n    var collapse = null;\n    var activeCollapse;\n    var activeElement;\n    // custom events\n    var showCustomEvent;\n    var shownCustomEvent;\n    var hideCustomEvent;\n    var hiddenCustomEvent;\n\n    // private methods\n    function openAction(collapseElement, toggle) {\n      dispatchCustomEvent.call(collapseElement, showCustomEvent);\n      if (showCustomEvent.defaultPrevented) { return; }\n      collapseElement.isAnimating = true;\n      collapseElement.classList.add('collapsing');\n      collapseElement.classList.remove('collapse');\n      collapseElement.style.height = (collapseElement.scrollHeight) + \"px\";\n\n      emulateTransitionEnd(collapseElement, function () {\n        collapseElement.isAnimating = false;\n        collapseElement.setAttribute('aria-expanded', 'true');\n        toggle.setAttribute('aria-expanded', 'true');\n        collapseElement.classList.remove('collapsing');\n        collapseElement.classList.add('collapse');\n        collapseElement.classList.add('show');\n        collapseElement.style.height = '';\n        dispatchCustomEvent.call(collapseElement, shownCustomEvent);\n      });\n    }\n    function closeAction(collapseElement, toggle) {\n      dispatchCustomEvent.call(collapseElement, hideCustomEvent);\n      if (hideCustomEvent.defaultPrevented) { return; }\n      collapseElement.isAnimating = true;\n      collapseElement.style.height = (collapseElement.scrollHeight) + \"px\"; // set height first\n      collapseElement.classList.remove('collapse');\n      collapseElement.classList.remove('show');\n      collapseElement.classList.add('collapsing');\n      reflow(collapseElement); // force reflow to enable transition\n      collapseElement.style.height = '0px';\n\n      emulateTransitionEnd(collapseElement, function () {\n        collapseElement.isAnimating = false;\n        collapseElement.setAttribute('aria-expanded', 'false');\n        toggle.setAttribute('aria-expanded', 'false');\n        collapseElement.classList.remove('collapsing');\n        collapseElement.classList.add('collapse');\n        collapseElement.style.height = '';\n        dispatchCustomEvent.call(collapseElement, hiddenCustomEvent);\n      });\n    }\n\n    // public methods\n    self.toggle = function (e) {\n      if ((e && e.target.tagName === 'A') || element.tagName === 'A') { e.preventDefault(); }\n      if (element.contains(e.target) || e.target === element) {\n        if (!collapse.classList.contains('show')) { self.show(); }\n        else { self.hide(); }\n      }\n    };\n    self.hide = function () {\n      if (collapse.isAnimating) { return; }\n      closeAction(collapse, element);\n      element.classList.add('collapsed');\n    };\n    self.show = function () {\n      var assign;\n\n      if (accordion) {\n        (assign = accordion.getElementsByClassName('collapse show'), activeCollapse = assign[0]);\n        activeElement = activeCollapse && (queryElement((\"[data-target=\\\"#\" + (activeCollapse.id) + \"\\\"]\"), accordion)\n                      || queryElement((\"[href=\\\"#\" + (activeCollapse.id) + \"\\\"]\"), accordion));\n      }\n\n      if (!collapse.isAnimating) {\n        if (activeElement && activeCollapse !== collapse) {\n          closeAction(activeCollapse, activeElement);\n          activeElement.classList.add('collapsed');\n        }\n        openAction(collapse, element);\n        element.classList.remove('collapsed');\n      }\n    };\n    self.dispose = function () {\n      element.removeEventListener('click', self.toggle, false);\n      delete element.Collapse;\n    };\n\n    // init\n\n    // initialization element\n    element = queryElement(elem);\n\n    // reset on re-init\n    if (element.Collapse) { element.Collapse.dispose(); }\n\n    // DATA API\n    var accordionData = element.getAttribute('data-parent');\n\n    // custom events\n    showCustomEvent = bootstrapCustomEvent('show', 'collapse');\n    shownCustomEvent = bootstrapCustomEvent('shown', 'collapse');\n    hideCustomEvent = bootstrapCustomEvent('hide', 'collapse');\n    hiddenCustomEvent = bootstrapCustomEvent('hidden', 'collapse');\n\n    // determine targets\n    collapse = queryElement(options.target || element.getAttribute('data-target') || element.getAttribute('href'));\n\n    if (collapse !== null) { collapse.isAnimating = false; }\n    var accordionSelector = options.parent || accordionData;\n    if (accordionSelector) {\n      accordion = element.closest(accordionSelector);\n    } else {\n      accordion = null;\n    }\n\n    // prevent adding event handlers twice\n    if (!element.Collapse) {\n      element.addEventListener('click', self.toggle, false);\n    }\n\n    // associate target to init object\n    element.Collapse = self;\n  }\n\n  function setFocus(element) {\n    element.focus();\n  }\n\n  /* Native JavaScript for Bootstrap 4 | Dropdown\n  ----------------------------------------------- */\n\n  // DROPDOWN DEFINITION\n  // ===================\n\n  function Dropdown(elem, option) {\n    var element;\n\n    // bind\n    var self = this;\n\n    // custom events\n    var showCustomEvent;\n    var shownCustomEvent;\n    var hideCustomEvent;\n    var hiddenCustomEvent;\n    // targets\n    var relatedTarget = null;\n    var parent; var menu; var menuItems = [];\n    // option\n    var persist;\n\n    // preventDefault on empty anchor links\n    function preventEmptyAnchor(anchor) {\n      if ((anchor.href && anchor.href.slice(-1) === '#') || (anchor.parentNode && anchor.parentNode.href\n        && anchor.parentNode.href.slice(-1) === '#')) { this.preventDefault(); }\n    }\n    // toggle dismissible events\n    function toggleDismiss() {\n      var action = element.open ? 'addEventListener' : 'removeEventListener';\n      document[action]('click', dismissHandler, false);\n      document[action]('keydown', preventScroll, false);\n      document[action]('keyup', keyHandler, false);\n      document[action]('focus', dismissHandler, false);\n    }\n    // handlers\n    function dismissHandler(e) {\n      var eventTarget = e.target;\n      if (!eventTarget.getAttribute) { return; } // some weird FF bug #409\n      var hasData = ((eventTarget && (eventTarget.getAttribute('data-toggle')))\n                                  || (eventTarget.parentNode && eventTarget.parentNode.getAttribute\n                                  && eventTarget.parentNode.getAttribute('data-toggle')));\n      if (e.type === 'focus' && (eventTarget === element || eventTarget === menu || menu.contains(eventTarget))) {\n        return;\n      }\n      if ((eventTarget === menu || menu.contains(eventTarget)) && (persist || hasData)) { return; }\n\n      relatedTarget = eventTarget === element || element.contains(eventTarget) ? element : null;\n      self.hide();\n\n      preventEmptyAnchor.call(e, eventTarget);\n    }\n    function clickHandler(e) {\n      relatedTarget = element;\n      self.show();\n      preventEmptyAnchor.call(e, e.target);\n    }\n    function preventScroll(e) {\n      var key = e.which || e.keyCode;\n      if (key === 38 || key === 40) { e.preventDefault(); }\n    }\n    function keyHandler(e) {\n      var key = e.which || e.keyCode;\n      var activeItem = document.activeElement;\n      var isSameElement = activeItem === element;\n      var isInsideMenu = menu.contains(activeItem);\n      var isMenuItem = activeItem.parentNode === menu || activeItem.parentNode.parentNode === menu;\n      var idx = menuItems.indexOf(activeItem);\n\n      if (isMenuItem) { // navigate up | down\n        if (isSameElement) {\n          idx = 0;\n        } else if (key === 38) {\n          idx = idx > 1 ? idx - 1 : 0;\n        } else if (key === 40) {\n          idx = idx < menuItems.length - 1 ? idx + 1 : idx;\n        }\n\n        if (menuItems[idx]) { setFocus(menuItems[idx]); }\n      }\n      if (((menuItems.length && isMenuItem) // menu has items\n            || (!menuItems.length && (isInsideMenu || isSameElement)) // menu might be a form\n            || !isInsideMenu) // or the focused element is not in the menu at all\n            && element.open && key === 27 // menu must be open\n      ) {\n        self.toggle();\n        relatedTarget = null;\n      }\n    }\n\n    // public methods\n    self.show = function () {\n      showCustomEvent = bootstrapCustomEvent('show', 'dropdown', { relatedTarget: relatedTarget });\n      dispatchCustomEvent.call(parent, showCustomEvent);\n      if (showCustomEvent.defaultPrevented) { return; }\n\n      menu.classList.add('show');\n      parent.classList.add('show');\n      element.setAttribute('aria-expanded', true);\n      element.open = true;\n      element.removeEventListener('click', clickHandler, false);\n      setTimeout(function () {\n        setFocus(menu.getElementsByTagName('INPUT')[0] || element); // focus the first input item | element\n        toggleDismiss();\n        shownCustomEvent = bootstrapCustomEvent('shown', 'dropdown', { relatedTarget: relatedTarget });\n        dispatchCustomEvent.call(parent, shownCustomEvent);\n      }, 1);\n    };\n    self.hide = function () {\n      hideCustomEvent = bootstrapCustomEvent('hide', 'dropdown', { relatedTarget: relatedTarget });\n      dispatchCustomEvent.call(parent, hideCustomEvent);\n      if (hideCustomEvent.defaultPrevented) { return; }\n\n      menu.classList.remove('show');\n      parent.classList.remove('show');\n      element.setAttribute('aria-expanded', false);\n      element.open = false;\n      toggleDismiss();\n      setFocus(element);\n      setTimeout(function () {\n        // only re-attach handler if the init is not disposed\n        if (element.Dropdown) { element.addEventListener('click', clickHandler, false); }\n      }, 1);\n\n      hiddenCustomEvent = bootstrapCustomEvent('hidden', 'dropdown', { relatedTarget: relatedTarget });\n      dispatchCustomEvent.call(parent, hiddenCustomEvent);\n    };\n    self.toggle = function () {\n      if (parent.classList.contains('show') && element.open) { self.hide(); } else { self.show(); }\n    };\n    self.dispose = function () {\n      if (parent.classList.contains('show') && element.open) { self.hide(); }\n      element.removeEventListener('click', clickHandler, false);\n      delete element.Dropdown;\n    };\n\n    // init\n\n    // initialization element\n    element = queryElement(elem);\n\n    // reset on re-init\n    if (element.Dropdown) { element.Dropdown.dispose(); }\n\n    // set  targets\n    parent = element.parentNode;\n    menu = queryElement('.dropdown-menu', parent);\n\n    Array.from(menu.children).forEach(function (child) {\n      if (child.children.length && child.children[0].tagName === 'A') {\n        menuItems.push(child.children[0]);\n      }\n      if (child.tagName === 'A') { menuItems.push(child); }\n    });\n\n    // prevent adding event handlers twice\n    if (!element.Dropdown) {\n      if (!('tabindex' in menu)) { menu.setAttribute('tabindex', '0'); } // Fix onblur on Chrome | Safari\n      element.addEventListener('click', clickHandler, false);\n    }\n\n    // set option\n    persist = option === true || element.getAttribute('data-persist') === 'true' || false;\n\n    // set initial state to closed\n    element.open = false;\n\n    // associate element with init object\n    element.Dropdown = self;\n  }\n\n  /* Native JavaScript for Bootstrap 4 | Modal\n  -------------------------------------------- */\n\n  // MODAL DEFINITION\n  // ================\n\n  function Modal(elem, opsInput) { // element can be the modal/triggering button\n    var element;\n\n    // set options\n    var options = opsInput || {};\n\n    // bind, modal\n    var self = this;\n    var modal;\n\n    // custom events\n    var showCustomEvent;\n    var shownCustomEvent;\n    var hideCustomEvent;\n    var hiddenCustomEvent;\n    // event targets and other\n    var relatedTarget = null;\n    var scrollBarWidth;\n    var overlay;\n    var overlayDelay;\n\n    // also find fixed-top / fixed-bottom items\n    var fixedItems;\n    var ops = {};\n\n    // private methods\n    function setScrollbar() {\n      var bodyClassList = document.body.classList;\n      var openModal = bodyClassList.contains('modal-open');\n      var bodyPad = parseInt(getComputedStyle(document.body).paddingRight, 10);\n      var docClientHeight = document.documentElement.clientHeight;\n      var docScrollHeight = document.documentElement.scrollHeight;\n      var bodyClientHeight = document.body.clientHeight;\n      var bodyScrollHeight = document.body.scrollHeight;\n      var bodyOverflow = docClientHeight !== docScrollHeight\n                      || bodyClientHeight !== bodyScrollHeight;\n      var modalOverflow = modal.clientHeight !== modal.scrollHeight;\n\n      scrollBarWidth = measureScrollbar();\n\n      modal.style.paddingRight = !modalOverflow && scrollBarWidth ? (scrollBarWidth + \"px\") : '';\n      document.body.style.paddingRight = modalOverflow || bodyOverflow\n        ? ((bodyPad + (openModal ? 0 : scrollBarWidth)) + \"px\") : '';\n\n      if (fixedItems.length) {\n        fixedItems.forEach(function (fixed) {\n          var itemPad = getComputedStyle(fixed).paddingRight;\n          fixed.style.paddingRight = modalOverflow || bodyOverflow\n            ? ((parseInt(itemPad, 10) + (openModal ? 0 : scrollBarWidth)) + \"px\")\n            : ((parseInt(itemPad, 10)) + \"px\");\n        });\n      }\n    }\n    function resetScrollbar() {\n      document.body.style.paddingRight = '';\n      modal.style.paddingRight = '';\n      if (fixedItems.length) {\n        fixedItems.forEach(function (fixed) {\n          fixed.style.paddingRight = '';\n        });\n      }\n    }\n    function measureScrollbar() {\n      var scrollDiv = document.createElement('div');\n      scrollDiv.className = 'modal-scrollbar-measure'; // this is here to stay\n      document.body.appendChild(scrollDiv);\n      var widthValue = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n      document.body.removeChild(scrollDiv);\n      return widthValue;\n    }\n    function createOverlay() {\n      var newOverlay = document.createElement('div');\n      overlay = queryElement('.modal-backdrop');\n\n      if (overlay === null) {\n        newOverlay.setAttribute('class', (\"modal-backdrop\" + (ops.animation ? ' fade' : '')));\n        overlay = newOverlay;\n        document.body.appendChild(overlay);\n      }\n      return overlay;\n    }\n    function removeOverlay() {\n      overlay = queryElement('.modal-backdrop');\n      if (overlay && !document.getElementsByClassName('modal show')[0]) {\n        document.body.removeChild(overlay); overlay = null;\n      }\n      if (overlay === null) {\n        document.body.classList.remove('modal-open');\n        resetScrollbar();\n      }\n    }\n    function toggleEvents(add) {\n      var action = add ? 'addEventListener' : 'removeEventListener';\n      window[action]('resize', self.update, passiveHandler);\n      modal[action]('click', dismissHandler, false);\n      document[action]('keydown', keyHandler, false);\n    }\n    // triggers\n    function beforeShow() {\n      modal.style.display = 'block';\n\n      setScrollbar();\n      if (!document.getElementsByClassName('modal show')[0]) { document.body.classList.add('modal-open'); }\n\n      modal.classList.add('show');\n      modal.setAttribute('aria-hidden', false);\n\n      if (modal.classList.contains('fade')) { emulateTransitionEnd(modal, triggerShow); }\n      else { triggerShow(); }\n    }\n    function triggerShow() {\n      setFocus(modal);\n      modal.isAnimating = false;\n\n      toggleEvents(1);\n\n      shownCustomEvent = bootstrapCustomEvent('shown', 'modal', { relatedTarget: relatedTarget });\n      dispatchCustomEvent.call(modal, shownCustomEvent);\n    }\n    function triggerHide(force) {\n      modal.style.display = '';\n      if (element) { setFocus(element); }\n\n      overlay = queryElement('.modal-backdrop');\n\n      // force can also be the transitionEvent object, we wanna make sure it's not\n      if (force !== 1 && overlay && overlay.classList.contains('show') && !document.getElementsByClassName('modal show')[0]) {\n        overlay.classList.remove('show');\n        emulateTransitionEnd(overlay, removeOverlay);\n      } else {\n        removeOverlay();\n      }\n\n      toggleEvents();\n\n      modal.isAnimating = false;\n\n      hiddenCustomEvent = bootstrapCustomEvent('hidden', 'modal');\n      dispatchCustomEvent.call(modal, hiddenCustomEvent);\n    }\n    // handlers\n    function clickHandler(e) {\n      if (modal.isAnimating) { return; }\n      var clickTarget = e.target;\n      var modalID = \"#\" + (modal.getAttribute('id'));\n      var targetAttrValue = clickTarget.getAttribute('data-target') || clickTarget.getAttribute('href');\n      var elemAttrValue = element.getAttribute('data-target') || element.getAttribute('href');\n\n      if (!modal.classList.contains('show')\n          && ((clickTarget === element && targetAttrValue === modalID)\n          || (element.contains(clickTarget) && elemAttrValue === modalID))) {\n        modal.modalTrigger = element;\n        relatedTarget = element;\n        self.show();\n        e.preventDefault();\n      }\n    }\n    function keyHandler(ref) {\n      var which = ref.which;\n\n      if (!modal.isAnimating && ops.keyboard && which === 27 && modal.classList.contains('show')) {\n        self.hide();\n      }\n    }\n    function dismissHandler(e) {\n      if (modal.isAnimating) { return; }\n      var clickTarget = e.target;\n      var hasData = clickTarget.getAttribute('data-dismiss') === 'modal';\n      var parentWithData = clickTarget.closest('[data-dismiss=\"modal\"]');\n\n      if (modal.classList.contains('show') && (parentWithData || hasData\n          || (clickTarget === modal && ops.backdrop !== 'static'))) {\n        self.hide(); relatedTarget = null;\n        e.preventDefault();\n      }\n    }\n\n    // public methods\n    self.toggle = function () {\n      if (modal.classList.contains('show')) { self.hide(); } else { self.show(); }\n    };\n    self.show = function () {\n      if (modal.classList.contains('show') && !!modal.isAnimating) { return; }\n\n      showCustomEvent = bootstrapCustomEvent('show', 'modal', { relatedTarget: relatedTarget });\n      dispatchCustomEvent.call(modal, showCustomEvent);\n\n      if (showCustomEvent.defaultPrevented) { return; }\n\n      modal.isAnimating = true;\n\n      // we elegantly hide any opened modal\n      var currentOpen = document.getElementsByClassName('modal show')[0];\n      if (currentOpen && currentOpen !== modal) {\n        if (currentOpen.modalTrigger) { currentOpen.modalTrigger.Modal.hide(); }\n        if (currentOpen.Modal) { currentOpen.Modal.hide(); }\n      }\n\n      if (ops.backdrop) { overlay = createOverlay(); }\n\n      if (overlay && !currentOpen && !overlay.classList.contains('show')) {\n        reflow(overlay);\n        overlayDelay = getElementTransitionDuration(overlay);\n        overlay.classList.add('show');\n      }\n\n      if (!currentOpen) { setTimeout(beforeShow, overlay && overlayDelay ? overlayDelay : 0); }\n      else { beforeShow(); }\n    };\n    self.hide = function (force) {\n      if (!modal.classList.contains('show')) { return; }\n\n      hideCustomEvent = bootstrapCustomEvent('hide', 'modal');\n      dispatchCustomEvent.call(modal, hideCustomEvent);\n      if (hideCustomEvent.defaultPrevented) { return; }\n\n      modal.isAnimating = true;\n\n      modal.classList.remove('show');\n      modal.setAttribute('aria-hidden', true);\n\n      if (modal.classList.contains('fade') && force !== 1) { emulateTransitionEnd(modal, triggerHide); }\n      else { triggerHide(); }\n    };\n    self.setContent = function (content) {\n      queryElement('.modal-content', modal).innerHTML = content;\n    };\n    self.update = function () {\n      if (modal.classList.contains('show')) {\n        setScrollbar();\n      }\n    };\n    self.dispose = function () {\n      self.hide(1);\n      if (element) { element.removeEventListener('click', clickHandler, false); delete element.Modal; } else { delete modal.Modal; }\n    };\n\n    // init\n\n    // the modal (both JavaScript / DATA API init) / triggering button element (DATA API)\n    element = queryElement(elem);\n\n    // determine modal, triggering element\n    var checkModal = queryElement(element.getAttribute('data-target') || element.getAttribute('href'));\n    modal = element.classList.contains('modal') ? element : checkModal;\n\n    // set fixed items\n    fixedItems = Array.from(document.getElementsByClassName('fixed-top'))\n      .concat(Array.from(document.getElementsByClassName('fixed-bottom')));\n\n    if (element.classList.contains('modal')) { element = null; } // modal is now independent of it's triggering element\n\n    // reset on re-init\n    if (element && element.Modal) { element.Modal.dispose(); }\n    if (modal && modal.Modal) { modal.Modal.dispose(); }\n\n    // set options\n    ops.keyboard = !(options.keyboard === false || modal.getAttribute('data-keyboard') === 'false');\n    ops.backdrop = options.backdrop === 'static' || modal.getAttribute('data-backdrop') === 'static' ? 'static' : true;\n    ops.backdrop = options.backdrop === false || modal.getAttribute('data-backdrop') === 'false' ? false : ops.backdrop;\n    ops.animation = !!modal.classList.contains('fade');\n    ops.content = options.content; // JavaScript only\n\n    // set an initial state of the modal\n    modal.isAnimating = false;\n\n    // prevent adding event handlers over and over\n    // modal is independent of a triggering element\n    if (element && !element.Modal) {\n      element.addEventListener('click', clickHandler, false);\n    }\n\n    if (ops.content) {\n      self.setContent(ops.content.trim());\n    }\n\n    // set associations\n    if (element) {\n      modal.modalTrigger = element;\n      element.Modal = self;\n    } else {\n      modal.Modal = self;\n    }\n  }\n\n  var mouseClickEvents = { down: 'mousedown', up: 'mouseup' };\n\n  // Popover, Tooltip & ScrollSpy\n  function getScroll() {\n    return {\n      y: window.pageYOffset || document.documentElement.scrollTop,\n      x: window.pageXOffset || document.documentElement.scrollLeft,\n    };\n  }\n\n  // both popovers and tooltips (target,tooltip,placement,elementToAppendTo)\n  function styleTip(link, element, originalPosition, parent) {\n    var tipPositions = /\\b(top|bottom|left|right)+/;\n    var elementDimensions = { w: element.offsetWidth, h: element.offsetHeight };\n    var windowWidth = (document.documentElement.clientWidth || document.body.clientWidth);\n    var windowHeight = (document.documentElement.clientHeight || document.body.clientHeight);\n    var rect = link.getBoundingClientRect();\n    var scroll = parent === document.body\n      ? getScroll()\n      : { x: parent.offsetLeft + parent.scrollLeft, y: parent.offsetTop + parent.scrollTop };\n    var linkDimensions = { w: rect.right - rect.left, h: rect.bottom - rect.top };\n    var isPopover = element.classList.contains('popover');\n    var arrow = element.getElementsByClassName('arrow')[0];\n    var halfTopExceed = rect.top + linkDimensions.h / 2 - elementDimensions.h / 2 < 0;\n    var halfLeftExceed = rect.left + linkDimensions.w / 2 - elementDimensions.w / 2 < 0;\n    var halfRightExceed = rect.left + elementDimensions.w / 2\n      + linkDimensions.w / 2 >= windowWidth;\n    var halfBottomExceed = rect.top + elementDimensions.h / 2\n      + linkDimensions.h / 2 >= windowHeight;\n    var topExceed = rect.top - elementDimensions.h < 0;\n    var leftExceed = rect.left - elementDimensions.w < 0;\n    var bottomExceed = rect.top + elementDimensions.h + linkDimensions.h >= windowHeight;\n    var rightExceed = rect.left + elementDimensions.w + linkDimensions.w >= windowWidth;\n    var position = originalPosition;\n\n    // recompute position\n    // first, when both left and right limits are exceeded, we fall back to top|bottom\n    position = (position === 'left' || position === 'right') && leftExceed && rightExceed ? 'top' : position;\n    position = position === 'top' && topExceed ? 'bottom' : position;\n    position = position === 'bottom' && bottomExceed ? 'top' : position;\n    position = position === 'left' && leftExceed ? 'right' : position;\n    position = position === 'right' && rightExceed ? 'left' : position;\n\n    var topPosition;\n    var leftPosition;\n    var arrowTop;\n    var arrowLeft;\n\n    // update tooltip/popover class\n    if (element.className.indexOf(position) === -1) {\n      element.className = element.className.replace(tipPositions, position);\n    }\n\n    // we check the computed width & height and update here\n    var arrowWidth = arrow.offsetWidth;\n    var arrowHeight = arrow.offsetHeight;\n\n    // apply styling to tooltip or popover\n    // secondary|side positions\n    if (position === 'left' || position === 'right') {\n      if (position === 'left') { // LEFT\n        leftPosition = rect.left + scroll.x - elementDimensions.w - (isPopover ? arrowWidth : 0);\n      } else { // RIGHT\n        leftPosition = rect.left + scroll.x + linkDimensions.w;\n      }\n\n      // adjust top and arrow\n      if (halfTopExceed) {\n        topPosition = rect.top + scroll.y;\n        arrowTop = linkDimensions.h / 2 - arrowWidth;\n      } else if (halfBottomExceed) {\n        topPosition = rect.top + scroll.y - elementDimensions.h + linkDimensions.h;\n        arrowTop = elementDimensions.h - linkDimensions.h / 2 - arrowWidth;\n      } else {\n        topPosition = rect.top + scroll.y - elementDimensions.h / 2 + linkDimensions.h / 2;\n        arrowTop = elementDimensions.h / 2 - (isPopover ? arrowHeight * 0.9 : arrowHeight / 2);\n      }\n    // primary|vertical positions\n    } else if (position === 'top' || position === 'bottom') {\n      if (position === 'top') { // TOP\n        topPosition = rect.top + scroll.y - elementDimensions.h - (isPopover ? arrowHeight : 0);\n      } else { // BOTTOM\n        topPosition = rect.top + scroll.y + linkDimensions.h;\n      }\n      // adjust left | right and also the arrow\n      if (halfLeftExceed) {\n        leftPosition = 0;\n        arrowLeft = rect.left + linkDimensions.w / 2 - arrowWidth;\n      } else if (halfRightExceed) {\n        leftPosition = windowWidth - elementDimensions.w * 1.01;\n        arrowLeft = elementDimensions.w - (windowWidth - rect.left)\n          + linkDimensions.w / 2 - arrowWidth / 2;\n      } else {\n        leftPosition = rect.left + scroll.x - elementDimensions.w / 2 + linkDimensions.w / 2;\n        arrowLeft = elementDimensions.w / 2 - (isPopover ? arrowWidth : arrowWidth / 2);\n      }\n    }\n\n    // apply style to tooltip/popover and its arrow\n    element.style.top = topPosition + \"px\";\n    element.style.left = leftPosition + \"px\";\n\n    if (arrowTop) { arrow.style.top = arrowTop + \"px\"; }\n    if (arrowLeft) { arrow.style.left = arrowLeft + \"px\"; }\n  }\n\n  /* Native JavaScript for Bootstrap 4 | Popover\n  ---------------------------------------------- */\n\n  // POPOVER DEFINITION\n  // ==================\n\n  function Popover(elem, opsInput) {\n    var element;\n    // set instance options\n    var options = opsInput || {};\n\n    // bind\n    var self = this;\n\n    // popover and timer\n    var popover = null;\n    var timer = 0;\n    var isIphone = /(iPhone|iPod|iPad)/.test(navigator.userAgent);\n    // title and content\n    var titleString;\n    var contentString;\n    var placementClass;\n\n    // options\n    var ops = {};\n\n    // close btn for dissmissible popover\n    var closeBtn;\n\n    // custom events\n    var showCustomEvent;\n    var shownCustomEvent;\n    var hideCustomEvent;\n    var hiddenCustomEvent;\n\n    // handlers\n    function dismissibleHandler(e) {\n      if (popover !== null && e.target === queryElement('.close', popover)) {\n        self.hide();\n      }\n    }\n    // private methods\n    function getAttr(att) {\n      return options[att] || element.dataset[att] || null;\n    }\n    function getTitle() {\n      return getAttr('title');\n    }\n    function getContent() {\n      return getAttr('content');\n    }\n    function removePopover() {\n      ops.container.removeChild(popover);\n      timer = null; popover = null;\n    }\n\n    function createPopover() {\n      titleString = getTitle();\n      contentString = getContent();\n      // fixing https://github.com/thednp/bootstrap.native/issues/233\n      contentString = contentString ? contentString.trim() : null;\n\n      popover = document.createElement('div');\n\n      // popover arrow\n      var popoverArrow = document.createElement('div');\n      popoverArrow.classList.add('arrow');\n      popover.appendChild(popoverArrow);\n\n      // create the popover from data attributes\n      if (contentString !== null && ops.template === null) {\n        popover.setAttribute('role', 'tooltip');\n\n        if (titleString !== null) {\n          var popoverTitle = document.createElement('h3');\n          popoverTitle.classList.add('popover-header');\n          popoverTitle.innerHTML = ops.dismissible ? titleString + closeBtn : titleString;\n          popover.appendChild(popoverTitle);\n        }\n\n        // set popover content\n        var popoverBodyMarkup = document.createElement('div');\n        popoverBodyMarkup.classList.add('popover-body');\n        popoverBodyMarkup.innerHTML = ops.dismissible && titleString === null\n          ? contentString + closeBtn\n          : contentString;\n        popover.appendChild(popoverBodyMarkup);\n      } else { // or create the popover from template\n        var popoverTemplate = document.createElement('div');\n        popoverTemplate.innerHTML = ops.template.trim();\n        popover.className = popoverTemplate.firstChild.className;\n        popover.innerHTML = popoverTemplate.firstChild.innerHTML;\n\n        var popoverHeader = queryElement('.popover-header', popover);\n        var popoverBody = queryElement('.popover-body', popover);\n\n        // fill the template with content from data attributes\n        if (titleString && popoverHeader) { popoverHeader.innerHTML = titleString.trim(); }\n        if (contentString && popoverBody) { popoverBody.innerHTML = contentString.trim(); }\n      }\n\n      // append to the container\n      ops.container.appendChild(popover);\n      popover.style.display = 'block';\n      if (!popover.classList.contains('popover')) { popover.classList.add('popover'); }\n      if (!popover.classList.contains(ops.animation)) { popover.classList.add(ops.animation); }\n      if (!popover.classList.contains(placementClass)) { popover.classList.add(placementClass); }\n    }\n    function showPopover() {\n      if (!popover.classList.contains('show')) { popover.classList.add('show'); }\n    }\n    function updatePopover() {\n      styleTip(element, popover, ops.placement, ops.container);\n    }\n    function forceFocus() {\n      if (popover === null) { element.focus(); }\n    }\n    function toggleEvents(add) {\n      var action = add ? 'addEventListener' : 'removeEventListener';\n      if (ops.trigger === 'hover') {\n        element[action](mouseClickEvents.down, self.show);\n        element[action](mouseHoverEvents[0], self.show);\n        // mouseHover = ('onmouseleave' in document)\n        //   ? [ 'mouseenter', 'mouseleave']\n        //   : [ 'mouseover', 'mouseout' ]\n        if (!ops.dismissible) { element[action](mouseHoverEvents[1], self.hide); }\n      } else if (ops.trigger === 'click') {\n        element[action](ops.trigger, self.toggle);\n      } else if (ops.trigger === 'focus') {\n        if (isIphone) { element[action]('click', forceFocus, false); }\n        element[action](ops.trigger, self.toggle);\n      }\n    }\n    function touchHandler(e) {\n      if ((popover && popover.contains(e.target))\n        || e.target === element || element.contains(e.target)) ; else {\n        self.hide();\n      }\n    }\n    // event toggle\n    function dismissHandlerToggle(add) {\n      var action = add ? 'addEventListener' : 'removeEventListener';\n      if (ops.dismissible) {\n        document[action]('click', dismissibleHandler, false);\n      } else {\n        if (ops.trigger === 'focus') { element[action]('blur', self.hide); }\n        if (ops.trigger === 'hover') { document[action]('touchstart', touchHandler, passiveHandler); }\n      }\n      window[action]('resize', self.hide, passiveHandler);\n    }\n    // triggers\n    function showTrigger() {\n      dismissHandlerToggle(1);\n      dispatchCustomEvent.call(element, shownCustomEvent);\n    }\n    function hideTrigger() {\n      dismissHandlerToggle();\n      removePopover();\n      dispatchCustomEvent.call(element, hiddenCustomEvent);\n    }\n\n    // public methods / handlers\n    self.toggle = function () {\n      if (popover === null) { self.show(); }\n      else { self.hide(); }\n    };\n    self.show = function () {\n      clearTimeout(timer);\n      timer = setTimeout(function () {\n        if (popover === null) {\n          dispatchCustomEvent.call(element, showCustomEvent);\n          if (showCustomEvent.defaultPrevented) { return; }\n\n          createPopover();\n          updatePopover();\n          showPopover();\n          if (ops.animation) { emulateTransitionEnd(popover, showTrigger); }\n          else { showTrigger(); }\n        }\n      }, 20);\n    };\n    self.hide = function () {\n      clearTimeout(timer);\n      timer = setTimeout(function () {\n        if (popover && popover !== null && popover.classList.contains('show')) {\n          dispatchCustomEvent.call(element, hideCustomEvent);\n          if (hideCustomEvent.defaultPrevented) { return; }\n          popover.classList.remove('show');\n          if (ops.animation) { emulateTransitionEnd(popover, hideTrigger); }\n          else { hideTrigger(); }\n        }\n      }, ops.delay);\n    };\n    self.dispose = function () {\n      self.hide();\n      toggleEvents();\n      delete element.Popover;\n    };\n\n    // INIT\n    // initialization element\n    element = queryElement(elem);\n\n    // reset on re-init\n    if (element.Popover) { element.Popover.dispose(); }\n\n    // DATA API\n    var triggerData = element.getAttribute('data-trigger'); // click / hover / focus\n    var animationData = element.getAttribute('data-animation'); // true / false\n\n    var placementData = element.getAttribute('data-placement');\n    var dismissibleData = element.getAttribute('data-dismissible');\n    var delayData = element.getAttribute('data-delay');\n    var containerData = element.getAttribute('data-container');\n\n    // close btn for dissmissible popover\n    closeBtn = '<button type=\"button\" class=\"close\">×</button>';\n\n    // custom events\n    showCustomEvent = bootstrapCustomEvent('show', 'popover');\n    shownCustomEvent = bootstrapCustomEvent('shown', 'popover');\n    hideCustomEvent = bootstrapCustomEvent('hide', 'popover');\n    hiddenCustomEvent = bootstrapCustomEvent('hidden', 'popover');\n\n    // check container\n    var containerElement = queryElement(options.container);\n    var containerDataElement = queryElement(containerData);\n\n    // maybe the element is inside a modal\n    var modal = element.closest('.modal');\n\n    // maybe the element is inside a fixed navbar\n    var navbarFixedTop = element.closest('.fixed-top');\n    var navbarFixedBottom = element.closest('.fixed-bottom');\n\n    // set instance options\n    ops.template = options.template ? options.template : null; // JavaScript only\n    ops.trigger = options.trigger ? options.trigger : triggerData || 'hover';\n    ops.animation = options.animation && options.animation !== 'fade' ? options.animation : animationData || 'fade';\n    ops.placement = options.placement ? options.placement : placementData || 'top';\n    ops.delay = parseInt((options.delay || delayData), 10) || 200;\n    ops.dismissible = !!(options.dismissible || dismissibleData === 'true');\n    ops.container = containerElement\n      || (containerDataElement\n        || (navbarFixedTop || (navbarFixedBottom || (modal || document.body))));\n\n    placementClass = \"bs-popover-\" + (ops.placement);\n\n    // invalidate\n    titleString = getTitle();\n    contentString = getContent();\n\n    if (!contentString && !ops.template) { return; }\n\n    // init\n    if (!element.Popover) { // prevent adding event handlers twice\n      toggleEvents(1);\n    }\n\n    // associate target to init object\n    element.Popover = self;\n  }\n\n  /* Native JavaScript for Bootstrap 5 | ScrollSpy\n  ------------------------------------------------ */\n\n  // SCROLLSPY DEFINITION\n  // ====================\n\n  function ScrollSpy(elem, opsInput) {\n    var element;\n\n    // set options\n    var options = opsInput || {};\n\n    // bind\n    var self = this;\n\n    // GC internals\n    var vars;\n    var links;\n\n    // targets\n    var spyTarget;\n    // determine which is the real scrollTarget\n    var scrollTarget;\n    // options\n    var ops = {};\n\n    // private methods\n    // populate items and targets\n    function updateTargets() {\n      links = spyTarget.getElementsByTagName('A');\n\n      vars.scrollTop = vars.isWindow ? getScroll().y : element.scrollTop;\n\n      // only update vars once or with each mutation\n      if (vars.length !== links.length || getScrollHeight() !== vars.scrollHeight) {\n        var href;\n        var targetItem;\n        var rect;\n\n        // reset arrays & update\n        vars.items = [];\n        vars.offsets = [];\n        vars.scrollHeight = getScrollHeight();\n        vars.maxScroll = vars.scrollHeight - getOffsetHeight();\n\n        Array.from(links).forEach(function (link) {\n          href = link.getAttribute('href');\n          targetItem = href && href.charAt(0) === '#' && href.slice(-1) !== '#' && queryElement(href);\n\n          if (targetItem) {\n            vars.items.push(link);\n            rect = targetItem.getBoundingClientRect();\n            vars.offsets.push((vars.isWindow\n              ? rect.top + vars.scrollTop\n              : targetItem.offsetTop) - ops.offset);\n          }\n        });\n        vars.length = vars.items.length;\n      }\n    }\n    // item update\n    function toggleEvents(add) {\n      var action = add ? 'addEventListener' : 'removeEventListener';\n      scrollTarget[action]('scroll', self.refresh, passiveHandler);\n      window[action]('resize', self.refresh, passiveHandler);\n    }\n    function getScrollHeight() {\n      return scrollTarget.scrollHeight || Math.max(\n        document.body.scrollHeight,\n        document.documentElement.scrollHeight\n      );\n    }\n    function getOffsetHeight() {\n      return !vars.isWindow ? element.getBoundingClientRect().height : window.innerHeight;\n    }\n    function clear() {\n      Array.from(links).map(function (item) { return item.classList.contains('active') && item.classList.remove('active'); });\n    }\n    function activate(input) {\n      var item = input;\n      var itemClassList;\n      clear();\n      vars.activeItem = item;\n      item.classList.add('active');\n\n      // activate all parents\n      var parents = [];\n      while (item.parentNode !== document.body) {\n        item = item.parentNode;\n        itemClassList = item.classList;\n\n        if (itemClassList.contains('dropdown-menu') || itemClassList.contains('nav')) { parents.push(item); }\n      }\n\n      parents.forEach(function (menuItem) {\n        var parentLink = menuItem.previousElementSibling;\n\n        if (parentLink && !parentLink.classList.contains('active')) {\n          parentLink.classList.add('active');\n        }\n      });\n\n      dispatchCustomEvent.call(element, bootstrapCustomEvent('activate', 'scrollspy', { relatedTarget: vars.activeItem }));\n    }\n\n    // public method\n    self.refresh = function () {\n      updateTargets();\n\n      if (vars.scrollTop >= vars.maxScroll) {\n        var newActiveItem = vars.items[vars.length - 1];\n\n        if (vars.activeItem !== newActiveItem) {\n          activate(newActiveItem);\n        }\n\n        return;\n      }\n\n      if (vars.activeItem && vars.scrollTop < vars.offsets[0] && vars.offsets[0] > 0) {\n        vars.activeItem = null;\n        clear();\n        return;\n      }\n\n      var i = vars.length;\n      while (i > -1) {\n        if (vars.activeItem !== vars.items[i] && vars.scrollTop >= vars.offsets[i]\n          && (typeof vars.offsets[i + 1] === 'undefined' || vars.scrollTop < vars.offsets[i + 1])) {\n          activate(vars.items[i]);\n        }\n        i -= 1;\n      }\n    };\n    self.dispose = function () {\n      toggleEvents();\n      delete element.ScrollSpy;\n    };\n\n    // init\n    // initialization element, the element we spy on\n    element = queryElement(elem);\n\n    // reset on re-init\n    if (element.ScrollSpy) { element.ScrollSpy.dispose(); }\n\n    // event targets, constants\n    // DATA API\n    var targetData = element.getAttribute('data-target');\n    var offsetData = element.getAttribute('data-offset');\n\n    // targets\n    spyTarget = queryElement(options.target || targetData);\n\n    // determine which is the real scrollTarget\n    scrollTarget = element.clientHeight < element.scrollHeight ? element : window;\n\n    if (!spyTarget) { return; }\n\n    // set instance option\n    ops.offset = +(options.offset || offsetData) || 10;\n\n    // set instance priority variables\n    vars = {};\n    vars.length = 0;\n    vars.items = [];\n    vars.offsets = [];\n    vars.isWindow = scrollTarget === window;\n    vars.activeItem = null;\n    vars.scrollHeight = 0;\n    vars.maxScroll = 0;\n\n    // prevent adding event handlers twice\n    if (!element.ScrollSpy) { toggleEvents(1); }\n\n    self.refresh();\n\n    // associate target with init object\n    element.ScrollSpy = self;\n  }\n\n  /* Native JavaScript for Bootstrap 4 | Tab\n  ------------------------------------------ */\n\n  // TAB DEFINITION\n  // ==============\n\n  function Tab(elem, opsInput) {\n    var element;\n    // set options\n    var options = opsInput || {};\n\n    // bind\n    var self = this;\n\n    // event targets\n    var tabs;\n    var dropdown;\n\n    // custom events\n    var showCustomEvent;\n    var shownCustomEvent;\n    var hideCustomEvent;\n    var hiddenCustomEvent;\n\n    // more GC material\n    var next;\n    var tabsContentContainer = false;\n    var activeTab;\n    var activeContent;\n    var nextContent;\n    var containerHeight;\n    var equalContents;\n    var nextHeight;\n\n    // triggers\n    function triggerEnd() {\n      tabsContentContainer.style.height = '';\n      tabsContentContainer.classList.remove('collapsing');\n      tabs.isAnimating = false;\n    }\n    function triggerShow() {\n      if (tabsContentContainer) { // height animation\n        if (equalContents) {\n          triggerEnd();\n        } else {\n          setTimeout(function () { // enables height animation\n            tabsContentContainer.style.height = nextHeight + \"px\"; // height animation\n            reflow(tabsContentContainer);\n            emulateTransitionEnd(tabsContentContainer, triggerEnd);\n          }, 50);\n        }\n      } else {\n        tabs.isAnimating = false;\n      }\n      shownCustomEvent = bootstrapCustomEvent('shown', 'tab', { relatedTarget: activeTab });\n      dispatchCustomEvent.call(next, shownCustomEvent);\n    }\n    function triggerHide() {\n      if (tabsContentContainer) {\n        activeContent.style.float = 'left';\n        nextContent.style.float = 'left';\n        containerHeight = activeContent.scrollHeight;\n      }\n\n      showCustomEvent = bootstrapCustomEvent('show', 'tab', { relatedTarget: activeTab });\n      hiddenCustomEvent = bootstrapCustomEvent('hidden', 'tab', { relatedTarget: next });\n\n      dispatchCustomEvent.call(next, showCustomEvent);\n      if (showCustomEvent.defaultPrevented) { return; }\n\n      nextContent.classList.add('active');\n\n      activeContent.classList.remove('active');\n\n      if (tabsContentContainer) {\n        nextHeight = nextContent.scrollHeight;\n        equalContents = nextHeight === containerHeight;\n        tabsContentContainer.classList.add('collapsing');\n        tabsContentContainer.style.height = containerHeight + \"px\"; // height animation\n        reflow(tabsContentContainer);\n        activeContent.style.float = '';\n        nextContent.style.float = '';\n      }\n\n      if (nextContent.classList.contains('fade')) {\n        setTimeout(function () {\n          nextContent.classList.add('show');\n          emulateTransitionEnd(nextContent, triggerShow);\n        }, 20);\n      } else { triggerShow(); }\n\n      dispatchCustomEvent.call(activeTab, hiddenCustomEvent);\n    }\n    // private methods\n    function getActiveTab() {\n      var assign;\n\n      var activeTabs = tabs.getElementsByClassName('active');\n\n      if (activeTabs.length === 1 && !activeTabs[0].parentNode.classList.contains('dropdown')) {\n        (assign = activeTabs, activeTab = assign[0]);\n      } else if (activeTabs.length > 1) {\n        activeTab = activeTabs[activeTabs.length - 1];\n      }\n      return activeTab;\n    }\n    function getActiveContent() { return queryElement(getActiveTab().getAttribute('href')); }\n    // handler\n    function clickHandler(e) {\n      e.preventDefault();\n      next = e.currentTarget;\n      if (!tabs.isAnimating) { self.show(); }\n    }\n\n    // public method\n    self.show = function () { // the tab we clicked is now the next tab\n      next = next || element;\n\n      if (!next.classList.contains('active')) {\n        nextContent = queryElement(next.getAttribute('href')); // this is the actual object, the next tab content to activate\n        activeTab = getActiveTab();\n        activeContent = getActiveContent();\n\n        hideCustomEvent = bootstrapCustomEvent('hide', 'tab', { relatedTarget: next });\n        dispatchCustomEvent.call(activeTab, hideCustomEvent);\n        if (hideCustomEvent.defaultPrevented) { return; }\n\n        tabs.isAnimating = true;\n        activeTab.classList.remove('active');\n        activeTab.setAttribute('aria-selected', 'false');\n        next.classList.add('active');\n        next.setAttribute('aria-selected', 'true');\n\n        if (dropdown) {\n          if (!element.parentNode.classList.contains('dropdown-menu')) {\n            if (dropdown.classList.contains('active')) { dropdown.classList.remove('active'); }\n          } else if (!dropdown.classList.contains('active')) { dropdown.classList.add('active'); }\n        }\n\n        if (activeContent.classList.contains('fade')) {\n          activeContent.classList.remove('show');\n          emulateTransitionEnd(activeContent, triggerHide);\n        } else { triggerHide(); }\n      }\n    };\n    self.dispose = function () {\n      element.removeEventListener('click', clickHandler, false);\n      delete element.Tab;\n    };\n\n    // INIT\n    // initialization element\n    element = queryElement(elem);\n\n    // reset on re-init\n    if (element.Tab) { element.Tab.dispose(); }\n\n    // DATA API\n    var heightData = element.getAttribute('data-height');\n    // event targets\n    tabs = element.closest('.nav');\n    dropdown = tabs && queryElement('.dropdown-toggle', tabs);\n\n    // instance options\n    var animateHeight = !(!supportTransition || (options.height === false || heightData === 'false'));\n\n    // set default animation state\n    tabs.isAnimating = false;\n\n    // init\n    if (!element.Tab) { // prevent adding event handlers twice\n      element.addEventListener('click', clickHandler, false);\n    }\n\n    if (animateHeight) { tabsContentContainer = getActiveContent().parentNode; }\n\n    // associate target with init object\n    element.Tab = self;\n  }\n\n  /* Native JavaScript for Bootstrap 4 | Toast\n  -------------------------------------------- */\n\n  // TOAST DEFINITION\n  // ==================\n\n  function Toast(elem, opsInput) {\n    var element;\n\n    // set options\n    var options = opsInput || {};\n\n    // bind\n    var self = this;\n\n    // toast, timer\n    var toast;\n    var timer = 0;\n\n    // custom events\n    var showCustomEvent;\n    var hideCustomEvent;\n    var shownCustomEvent;\n    var hiddenCustomEvent;\n    var ops = {};\n\n    // private methods\n    function showComplete() {\n      toast.classList.remove('showing');\n      toast.classList.add('show');\n      dispatchCustomEvent.call(toast, shownCustomEvent);\n      if (ops.autohide) { self.hide(); }\n    }\n    function hideComplete() {\n      toast.classList.add('hide');\n      dispatchCustomEvent.call(toast, hiddenCustomEvent);\n    }\n    function close() {\n      toast.classList.remove('show');\n      if (ops.animation) { emulateTransitionEnd(toast, hideComplete); }\n      else { hideComplete(); }\n    }\n    function disposeComplete() {\n      clearTimeout(timer);\n      element.removeEventListener('click', self.hide, false);\n\n      delete element.Toast;\n    }\n\n    // public methods\n    self.show = function () {\n      if (toast && !toast.classList.contains('show')) {\n        dispatchCustomEvent.call(toast, showCustomEvent);\n        if (showCustomEvent.defaultPrevented) { return; }\n        if (ops.animation) { toast.classList.add('fade'); }\n        toast.classList.remove('hide');\n        reflow(toast); // force reflow\n        toast.classList.add('showing');\n\n        if (ops.animation) { emulateTransitionEnd(toast, showComplete); }\n        else { showComplete(); }\n      }\n    };\n    self.hide = function (noTimer) {\n      if (toast && toast.classList.contains('show')) {\n        dispatchCustomEvent.call(toast, hideCustomEvent);\n        if (hideCustomEvent.defaultPrevented) { return; }\n\n        if (noTimer) { close(); }\n        else { timer = setTimeout(close, ops.delay); }\n      }\n    };\n    self.dispose = function () {\n      if (ops.animation) { emulateTransitionEnd(toast, disposeComplete); }\n      else { disposeComplete(); }\n    };\n\n    // init\n\n    // initialization element\n    element = queryElement(elem);\n\n    // reset on re-init\n    if (element.Toast) { element.Toast.dispose(); }\n\n    // toast, timer\n    toast = element.closest('.toast');\n\n    // DATA API\n    var animationData = element.getAttribute('data-animation');\n    var autohideData = element.getAttribute('data-autohide');\n    var delayData = element.getAttribute('data-delay');\n\n    // custom events\n    showCustomEvent = bootstrapCustomEvent('show', 'toast');\n    hideCustomEvent = bootstrapCustomEvent('hide', 'toast');\n    shownCustomEvent = bootstrapCustomEvent('shown', 'toast');\n    hiddenCustomEvent = bootstrapCustomEvent('hidden', 'toast');\n\n    // set instance options\n    ops.animation = options.animation === false || animationData === 'false' ? 0 : 1; // true by default\n    ops.autohide = options.autohide === false || autohideData === 'false' ? 0 : 1; // true by default\n    ops.delay = parseInt((options.delay || delayData), 10) || 500; // 500ms default\n\n    if (!element.Toast) { // prevent adding event handlers twice\n      element.addEventListener('click', self.hide, false);\n    }\n\n    // associate targets to init object\n    element.Toast = self;\n  }\n\n  /* Native JavaScript for Bootstrap 4 | Tooltip\n  ---------------------------------------------- */\n\n  // TOOLTIP DEFINITION\n  // ==================\n\n  function Tooltip(elem, opsInput) {\n    var element;\n    // set options\n    var options = opsInput || {};\n\n    // bind\n    var self = this;\n\n    // tooltip, timer, and title\n    var tooltip = null;\n    var timer = 0;\n    var titleString;\n    var placementClass;\n\n    // custom events\n    var showCustomEvent;\n    var shownCustomEvent;\n    var hideCustomEvent;\n    var hiddenCustomEvent;\n\n    var ops = {};\n\n    // private methods\n    function getTitle() {\n      return element.getAttribute('title')\n          || element.getAttribute('data-title')\n          || element.getAttribute('data-original-title');\n    }\n    function removeToolTip() {\n      ops.container.removeChild(tooltip);\n      tooltip = null; timer = null;\n    }\n    function createToolTip() {\n      titleString = getTitle(); // read the title again\n      if (titleString) { // invalidate, maybe markup changed\n        // create tooltip\n        tooltip = document.createElement('div');\n\n        // set markup\n        if (ops.template) {\n          var tooltipMarkup = document.createElement('div');\n          tooltipMarkup.innerHTML = ops.template.trim();\n\n          tooltip.className = tooltipMarkup.firstChild.className;\n          tooltip.innerHTML = tooltipMarkup.firstChild.innerHTML;\n\n          queryElement('.tooltip-inner', tooltip).innerHTML = titleString.trim();\n        } else {\n          // tooltip arrow\n          var tooltipArrow = document.createElement('div');\n          tooltipArrow.classList.add('arrow');\n          tooltip.appendChild(tooltipArrow);\n          // tooltip inner\n          var tooltipInner = document.createElement('div');\n          tooltipInner.classList.add('tooltip-inner');\n          tooltip.appendChild(tooltipInner);\n          tooltipInner.innerHTML = titleString;\n        }\n        // reset position\n        tooltip.style.left = '0';\n        tooltip.style.top = '0';\n        // set class and role attribute\n        tooltip.setAttribute('role', 'tooltip');\n        if (!tooltip.classList.contains('tooltip')) { tooltip.classList.add('tooltip'); }\n        if (!tooltip.classList.contains(ops.animation)) { tooltip.classList.add(ops.animation); }\n        if (!tooltip.classList.contains(placementClass)) { tooltip.classList.add(placementClass); }\n        // append to container\n        ops.container.appendChild(tooltip);\n      }\n    }\n    function updateTooltip() {\n      styleTip(element, tooltip, ops.placement, ops.container);\n    }\n    function showTooltip() {\n      if (!tooltip.classList.contains('show')) { tooltip.classList.add('show'); }\n    }\n    function touchHandler(e) {\n      if ((tooltip && tooltip.contains(e.target))\n        || e.target === element || element.contains(e.target)) ; else {\n        self.hide();\n      }\n    }\n    // triggers\n    function toggleAction(add) {\n      var action = add ? 'addEventListener' : 'removeEventListener';\n      document[action]('touchstart', touchHandler, passiveHandler);\n      window[action]('resize', self.hide, passiveHandler);\n    }\n    function showAction() {\n      toggleAction(1);\n      dispatchCustomEvent.call(element, shownCustomEvent);\n    }\n    function hideAction() {\n      toggleAction();\n      removeToolTip();\n      dispatchCustomEvent.call(element, hiddenCustomEvent);\n    }\n    function toggleEvents(add) {\n      var action = add ? 'addEventListener' : 'removeEventListener';\n      element[action](mouseClickEvents.down, self.show, false);\n      element[action](mouseHoverEvents[0], self.show, false);\n      element[action](mouseHoverEvents[1], self.hide, false);\n    }\n\n    // public methods\n    self.show = function () {\n      clearTimeout(timer);\n      timer = setTimeout(function () {\n        if (tooltip === null) {\n          dispatchCustomEvent.call(element, showCustomEvent);\n          if (showCustomEvent.defaultPrevented) { return; }\n          // if(createToolTip() == false) return;\n          if (createToolTip() !== false) {\n            updateTooltip();\n            showTooltip();\n            if (ops.animation) { emulateTransitionEnd(tooltip, showAction); }\n            else { showAction(); }\n          }\n        }\n      }, 20);\n    };\n    self.hide = function () {\n      clearTimeout(timer);\n      timer = setTimeout(function () {\n        if (tooltip && tooltip.classList.contains('show')) {\n          dispatchCustomEvent.call(element, hideCustomEvent);\n          if (hideCustomEvent.defaultPrevented) { return; }\n          tooltip.classList.remove('show');\n          if (ops.animation) { emulateTransitionEnd(tooltip, hideAction); }\n          else { hideAction(); }\n        }\n      }, ops.delay);\n    };\n    self.toggle = function () {\n      if (!tooltip) { self.show(); }\n      else { self.hide(); }\n    };\n    self.dispose = function () {\n      toggleEvents();\n      self.hide();\n      element.setAttribute('title', element.getAttribute('data-original-title'));\n      element.removeAttribute('data-original-title');\n      delete element.Tooltip;\n    };\n\n    // init\n    // initialization element\n    element = queryElement(elem);\n\n    // reset on re-init\n    if (element.Tooltip) { element.Tooltip.dispose(); }\n\n    // DATA API\n    var animationData = element.getAttribute('data-animation');\n    var placementData = element.getAttribute('data-placement');\n    var delayData = element.getAttribute('data-delay');\n    var containerData = element.getAttribute('data-container');\n\n    // check container\n    var containerElement = queryElement(options.container);\n    var containerDataElement = queryElement(containerData);\n\n    // maybe the element is inside a modal\n    var modal = element.closest('.modal');\n\n    // custom events\n    showCustomEvent = bootstrapCustomEvent('show', 'tooltip');\n    shownCustomEvent = bootstrapCustomEvent('shown', 'tooltip');\n    hideCustomEvent = bootstrapCustomEvent('hide', 'tooltip');\n    hiddenCustomEvent = bootstrapCustomEvent('hidden', 'tooltip');\n\n    // maybe the element is inside a fixed navbar\n    var navbarFixedTop = element.closest('.fixed-top');\n    var navbarFixedBottom = element.closest('.fixed-bottom');\n\n    // set instance options\n    ops.animation = options.animation && options.animation !== 'fade' ? options.animation : animationData || 'fade';\n    ops.placement = options.placement ? options.placement : placementData || 'top';\n    ops.template = options.template ? options.template : null; // JavaScript only\n    ops.delay = parseInt((options.delay || delayData), 10) || 200;\n    ops.container = containerElement\n      || (containerDataElement\n        || (navbarFixedTop || (navbarFixedBottom || (modal || document.body))));\n\n    // set placement class\n    placementClass = \"bs-tooltip-\" + (ops.placement);\n\n    // set tooltip content\n    titleString = getTitle();\n\n    // invalidate\n    if (!titleString) { return; }\n\n    // prevent adding event handlers twice\n    if (!element.Tooltip) {\n      element.setAttribute('data-original-title', titleString);\n      element.removeAttribute('title');\n      toggleEvents(1);\n    }\n\n    // associate target to init object\n    element.Tooltip = self;\n  }\n\n  var componentsInit = {};\n\n  /* Native JavaScript for Bootstrap | Initialize Data API\n  -------------------------------------------------------- */\n  function initializeDataAPI(Constructor, collection) {\n    Array.from(collection).map(function (x) { return new Constructor(x); });\n  }\n  function initCallback(context) {\n    var lookUp = context instanceof Element ? context : document;\n    Object.keys(componentsInit).forEach(function (component) {\n      initializeDataAPI(componentsInit[component][0],\n        lookUp.querySelectorAll(componentsInit[component][1]));\n    });\n  }\n\n  componentsInit.Alert = [Alert, '[data-dismiss=\"alert\"]'];\n  componentsInit.Button = [Button, '[data-toggle=\"buttons\"]'];\n  componentsInit.Carousel = [Carousel, '[data-ride=\"carousel\"]'];\n  componentsInit.Collapse = [Collapse, '[data-toggle=\"collapse\"]'];\n  componentsInit.Dropdown = [Dropdown, '[data-toggle=\"dropdown\"]'];\n  componentsInit.Modal = [Modal, '[data-toggle=\"modal\"]'];\n  componentsInit.Popover = [Popover, '[data-toggle=\"popover\"],[data-tip=\"popover\"]'];\n  componentsInit.ScrollSpy = [ScrollSpy, '[data-spy=\"scroll\"]'];\n  componentsInit.Tab = [Tab, '[data-toggle=\"tab\"]'];\n  componentsInit.Toast = [Toast, '[data-dismiss=\"toast\"]'];\n  componentsInit.Tooltip = [Tooltip, '[data-toggle=\"tooltip\"],[data-tip=\"tooltip\"]'];\n\n  // bulk initialize all components\n  if (document.body) { initCallback(); }\n  else {\n    document.addEventListener('DOMContentLoaded', function initWrapper() {\n      initCallback();\n      document.removeEventListener('DOMContentLoaded', initWrapper, false);\n    }, false);\n  }\n\n  /* Native JavaScript for Bootstrap | Remove Data API\n  ---------------------------------------------------- */\n  function removeElementDataAPI(ConstructorName, collection) {\n    Array.from(collection).map(function (x) { return x[ConstructorName].dispose(); });\n  }\n  function removeDataAPI(context) {\n    var lookUp = context instanceof Element ? context : document;\n    Object.keys(componentsInit).forEach(function (component) {\n      removeElementDataAPI(component, lookUp.querySelectorAll(componentsInit[component][1]));\n    });\n  }\n\n  var version = \"4.0.6\";\n\n  var indexV4 = {\n    Alert: Alert,\n    Button: Button,\n    Carousel: Carousel,\n    Collapse: Collapse,\n    Dropdown: Dropdown,\n    Modal: Modal,\n    Popover: Popover,\n    ScrollSpy: ScrollSpy,\n    Tab: Tab,\n    Toast: Toast,\n    Tooltip: Tooltip,\n\n    initCallback: initCallback,\n    removeDataAPI: removeDataAPI,\n    componentsInit: componentsInit,\n    Version: version,\n  };\n\n  return indexV4;\n\n})));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/bootstrap.native/dist/bootstrap-native-v4.js\n");

/***/ }),

/***/ "./node_modules/htmx.org/dist/htmx.min.js":
/*!************************************************!*\
  !*** ./node_modules/htmx.org/dist/htmx.min.js ***!
  \************************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(e,t){if(true){!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (t),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))}else{}})(typeof self!==\"undefined\"?self:this,function(){return function(){\"use strict\";var D={onLoad:t,process:rt,on:N,off:I,trigger:lt,ajax:$t,find:w,findAll:S,closest:O,values:function(e,t){var r=Ot(e,t||\"post\");return r.values},remove:E,addClass:C,removeClass:R,toggleClass:q,takeClass:L,defineExtension:Qt,removeExtension:er,logAll:b,logger:null,config:{historyEnabled:true,historyCacheSize:10,refreshOnHistoryMiss:false,defaultSwapStyle:\"innerHTML\",defaultSwapDelay:0,defaultSettleDelay:20,includeIndicatorStyles:true,indicatorClass:\"htmx-indicator\",requestClass:\"htmx-request\",addedClass:\"htmx-added\",settlingClass:\"htmx-settling\",swappingClass:\"htmx-swapping\",allowEval:true,attributesToSettle:[\"class\",\"style\",\"width\",\"height\"],withCredentials:false,timeout:0,wsReconnectDelay:\"full-jitter\",disableSelector:\"[hx-disable], [data-hx-disable]\",useTemplateFragments:false,scrollBehavior:\"smooth\"},parseInterval:h,_:e,createEventSource:function(e){return new EventSource(e,{withCredentials:true})},createWebSocket:function(e){return new WebSocket(e,[])},version:\"1.6.0\"};var r=[\"get\",\"post\",\"put\",\"delete\",\"patch\"];var n=r.map(function(e){return\"[hx-\"+e+\"], [data-hx-\"+e+\"]\"}).join(\", \");function h(e){if(e==undefined){return undefined}if(e.slice(-2)==\"ms\"){return parseFloat(e.slice(0,-2))||undefined}if(e.slice(-1)==\"s\"){return parseFloat(e.slice(0,-1))*1e3||undefined}return parseFloat(e)||undefined}function c(e,t){return e.getAttribute&&e.getAttribute(t)}function s(e,t){return e.hasAttribute&&(e.hasAttribute(t)||e.hasAttribute(\"data-\"+t))}function F(e,t){return c(e,t)||c(e,\"data-\"+t)}function l(e){return e.parentElement}function P(){return document}function d(e,t){if(t(e)){return e}else if(l(e)){return d(l(e),t)}else{return null}}function X(e,t){var r=null;d(e,function(e){return r=F(e,t)});if(r!==\"unset\"){return r}}function v(e,t){var r=e.matches||e.matchesSelector||e.msMatchesSelector||e.mozMatchesSelector||e.webkitMatchesSelector||e.oMatchesSelector;return r&&r.call(e,t)}function i(e){var t=/<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i;var r=t.exec(e);if(r){return r[1].toLowerCase()}else{return\"\"}}function o(e,t){var r=new DOMParser;var n=r.parseFromString(e,\"text/html\");var i=n.body;while(t>0){t--;i=i.firstChild}if(i==null){i=P().createDocumentFragment()}return i}function u(e){if(D.config.useTemplateFragments){var t=o(\"<body><template>\"+e+\"</template></body>\",0);return t.querySelector(\"template\").content}else{var r=i(e);switch(r){case\"thead\":case\"tbody\":case\"tfoot\":case\"colgroup\":case\"caption\":return o(\"<table>\"+e+\"</table>\",1);case\"col\":return o(\"<table><colgroup>\"+e+\"</colgroup></table>\",2);case\"tr\":return o(\"<table><tbody>\"+e+\"</tbody></table>\",2);case\"td\":case\"th\":return o(\"<table><tbody><tr>\"+e+\"</tr></tbody></table>\",3);case\"script\":return o(\"<div>\"+e+\"</div>\",1);default:return o(e,0)}}}function U(e){if(e){e()}}function a(e,t){return Object.prototype.toString.call(e)===\"[object \"+t+\"]\"}function f(e){return a(e,\"Function\")}function g(e){return a(e,\"Object\")}function j(e){var t=\"htmx-internal-data\";var r=e[t];if(!r){r=e[t]={}}return r}function p(e){var t=[];if(e){for(var r=0;r<e.length;r++){t.push(e[r])}}return t}function B(e,t){if(e){for(var r=0;r<e.length;r++){t(e[r])}}}function m(e){var t=e.getBoundingClientRect();var r=t.top;var n=t.bottom;return r<window.innerHeight&&n>=0}function z(e){return P().body.contains(e)}function y(e){return e.trim().split(/\\s+/)}function V(e,t){for(var r in t){if(t.hasOwnProperty(r)){e[r]=t[r]}}return e}function x(e){try{return JSON.parse(e)}catch(e){ut(e);return null}}function e(e){return Ut(P().body,function(){return eval(e)})}function t(t){var e=D.on(\"htmx:load\",function(e){t(e.detail.elt)});return e}function b(){D.logger=function(e,t,r){if(console){console.log(t,e,r)}}}function w(e,t){if(t){return e.querySelector(t)}else{return w(P(),e)}}function S(e,t){if(t){return e.querySelectorAll(t)}else{return S(P(),e)}}function E(e,t){e=H(e);if(t){setTimeout(function(){E(e)},t)}else{e.parentElement.removeChild(e)}}function C(e,t,r){e=H(e);if(r){setTimeout(function(){C(e,t)},r)}else{e.classList&&e.classList.add(t)}}function R(e,t,r){e=H(e);if(r){setTimeout(function(){R(e,t)},r)}else{if(e.classList){e.classList.remove(t);if(e.classList.length===0){e.removeAttribute(\"class\")}}}}function q(e,t){e=H(e);e.classList.toggle(t)}function L(e,t){e=H(e);B(e.parentElement.children,function(e){R(e,t)});C(e,t)}function O(e,t){e=H(e);if(e.closest){return e.closest(t)}else{do{if(e==null||v(e,t)){return e}}while(e=e&&l(e))}}function T(e,t){if(t.indexOf(\"closest \")===0){return[O(e,t.substr(8))]}else if(t.indexOf(\"find \")===0){return[w(e,t.substr(5))]}else if(t===\"document\"){return[document]}else if(t===\"window\"){return[window]}else{return P().querySelectorAll(t)}}function A(e,t){if(t){return T(e,t)[0]}else{return T(P().body,e)[0]}}function H(e){if(a(e,\"String\")){return w(e)}else{return e}}function k(e,t,r){if(f(t)){return{target:P().body,event:e,listener:t}}else{return{target:H(e),event:t,listener:r}}}function N(t,r,n){rr(function(){var e=k(t,r,n);e.target.addEventListener(e.event,e.listener)});var e=f(r);return e?r:n}function I(t,r,n){rr(function(){var e=k(t,r,n);e.target.removeEventListener(e.event,e.listener)});return f(r)?r:n}function _(e){var t=d(e,function(e){return F(e,\"hx-target\")!==null});if(t){var r=F(t,\"hx-target\");if(r===\"this\"){return t}else{return A(e,r)}}else{var n=j(e);if(n.boosted){return P().body}else{return e}}}function M(e){var t=D.config.attributesToSettle;for(var r=0;r<t.length;r++){if(e===t[r]){return true}}return false}function W(t,r){B(t.attributes,function(e){if(!r.hasAttribute(e.name)&&M(e.name)){t.removeAttribute(e.name)}});B(r.attributes,function(e){if(M(e.name)){t.setAttribute(e.name,e.value)}})}function $(e,t){var r=tr(t);for(var n=0;n<r.length;n++){var i=r[n];try{if(i.isInlineSwap(e)){return true}}catch(e){ut(e)}}return e===\"outerHTML\"}function J(e,t,r){var n=\"#\"+t.id;var i=\"outerHTML\";if(e===\"true\"){}else if(e.indexOf(\":\")>0){i=e.substr(0,e.indexOf(\":\"));n=e.substr(e.indexOf(\":\")+1,e.length)}else{i=e}var o=P().querySelector(n);if(o){var a;a=P().createDocumentFragment();a.appendChild(t);if(!$(i,o)){a=t}le(i,o,o,a,r)}else{t.parentNode.removeChild(t);ot(P().body,\"htmx:oobErrorNoTarget\",{content:t})}return e}function Z(e,r){B(S(e,\"[hx-swap-oob], [data-hx-swap-oob]\"),function(e){var t=F(e,\"hx-swap-oob\");if(t!=null){J(t,e,r)}})}function G(e){B(S(e,\"[hx-preserve], [data-hx-preserve]\"),function(e){var t=F(e,\"id\");var r=P().getElementById(t);if(r!=null){e.parentNode.replaceChild(r,e)}})}function K(n,e,i){B(e.querySelectorAll(\"[id]\"),function(e){if(e.id&&e.id.length>0){var t=n.querySelector(e.tagName+\"[id='\"+e.id+\"']\");if(t&&t!==n){var r=e.cloneNode();W(e,t);i.tasks.push(function(){W(e,r)})}}})}function Y(e){return function(){R(e,D.config.addedClass);rt(e);Ke(e);Q(e);lt(e,\"htmx:load\")}}function Q(e){var t=\"[autofocus]\";var r=v(e,t)?e:e.querySelector(t);if(r!=null){r.focus()}}function ee(e,t,r,n){K(e,r,n);while(r.childNodes.length>0){var i=r.firstChild;C(i,D.config.addedClass);e.insertBefore(i,t);if(i.nodeType!==Node.TEXT_NODE&&i.nodeType!==Node.COMMENT_NODE){n.tasks.push(Y(i))}}}function te(t){var e=j(t);if(e.webSocket){e.webSocket.close()}if(e.sseEventSource){e.sseEventSource.close()}if(e.listenerInfos){B(e.listenerInfos,function(e){if(t!==e.on){e.on.removeEventListener(e.trigger,e.listener)}})}if(t.children){B(t.children,function(e){te(e)})}}function re(e,t,r){if(e.tagName===\"BODY\"){return se(e,t,r)}else{var n=e.previousSibling;ee(l(e),e,t,r);if(n==null){var i=l(e).firstChild}else{var i=n.nextSibling}j(e).replacedWith=i;r.elts=[];while(i&&i!==e){if(i.nodeType===Node.ELEMENT_NODE){r.elts.push(i)}i=i.nextElementSibling}te(e);l(e).removeChild(e)}}function ne(e,t,r){return ee(e,e.firstChild,t,r)}function ie(e,t,r){return ee(l(e),e,t,r)}function oe(e,t,r){return ee(e,null,t,r)}function ae(e,t,r){return ee(l(e),e.nextSibling,t,r)}function se(e,t,r){var n=e.firstChild;ee(e,n,t,r);if(n){while(n.nextSibling){te(n.nextSibling);e.removeChild(n.nextSibling)}te(n);e.removeChild(n)}}function ue(e,t){var r=X(e,\"hx-select\");if(r){var n=P().createDocumentFragment();B(t.querySelectorAll(r),function(e){n.appendChild(e)});t=n}return t}function le(e,t,r,n,i){switch(e){case\"none\":return;case\"outerHTML\":re(r,n,i);return;case\"afterbegin\":ne(r,n,i);return;case\"beforebegin\":ie(r,n,i);return;case\"beforeend\":oe(r,n,i);return;case\"afterend\":ae(r,n,i);return;default:var o=tr(t);for(var a=0;a<o.length;a++){var s=o[a];try{var u=s.handleSwap(e,r,n,i);if(u){if(typeof u.length!==\"undefined\"){for(var l=0;l<u.length;l++){var f=u[l];if(f.nodeType!==Node.TEXT_NODE&&f.nodeType!==Node.COMMENT_NODE){i.tasks.push(Y(f))}}}return}}catch(e){ut(e)}}se(r,n,i)}}function fe(e){if(e.indexOf(\"<title\")>-1){var t=e.replace(/<svg(\\s[^>]*>|>)([\\s\\S]*?)<\\/svg>/gim,\"\");var r=t.match(/<title(\\s[^>]*>|>)([\\s\\S]*?)<\\/title>/im);if(r){return r[2]}}}function ce(e,t,r,n,i){var o=fe(n);if(o){var a=w(\"title\");if(a){a.innerHTML=o}else{window.document.title=o}}var s=u(n);if(s){Z(s,i);s=ue(r,s);G(s);return le(e,r,t,s,i)}}function he(e,t,r){var n=e.getResponseHeader(t);if(n.indexOf(\"{\")===0){var i=x(n);for(var o in i){if(i.hasOwnProperty(o)){var a=i[o];if(!g(a)){a={value:a}}lt(r,o,a)}}}else{lt(r,n,[])}}var de=/\\s/;var ve=/[\\s,]/;var ge=/[_$a-zA-Z]/;var pe=/[_$a-zA-Z0-9]/;var me=['\"',\"'\",\"/\"];var ye=/[^\\s]/;function xe(e){var t=[];var r=0;while(r<e.length){if(ge.exec(e.charAt(r))){var n=r;while(pe.exec(e.charAt(r+1))){r++}t.push(e.substr(n,r-n+1))}else if(me.indexOf(e.charAt(r))!==-1){var i=e.charAt(r);var n=r;r++;while(r<e.length&&e.charAt(r)!==i){if(e.charAt(r)===\"\\\\\"){r++}r++}t.push(e.substr(n,r-n+1))}else{var o=e.charAt(r);t.push(o)}r++}return t}function be(e,t,r){return ge.exec(e.charAt(0))&&e!==\"true\"&&e!==\"false\"&&e!==\"this\"&&e!==r&&t!==\".\"}function we(e,t,r){if(t[0]===\"[\"){t.shift();var n=1;var i=\" return (function(\"+r+\"){ return (\";var o=null;while(t.length>0){var a=t[0];if(a===\"]\"){n--;if(n===0){if(o===null){i=i+\"true\"}t.shift();i+=\")})\";try{var s=Ut(e,function(){return Function(i)()},function(){return true});s.source=i;return s}catch(e){ot(P().body,\"htmx:syntax:error\",{error:e,source:i});return null}}}else if(a===\"[\"){n++}if(be(a,o,r)){i+=\"((\"+r+\".\"+a+\") ? (\"+r+\".\"+a+\") : (window.\"+a+\"))\"}else{i=i+a}o=t.shift()}}}function Se(e,t){var r=\"\";while(e.length>0&&!e[0].match(t)){r+=e.shift()}return r}var Ee=\"input, textarea, select\";function Ce(e){var t=F(e,\"hx-trigger\");var r=[];if(t){var n=xe(t);do{Se(n,ye);var i=n.length;var o=Se(n,/[,\\[\\s]/);if(o!==\"\"){if(o===\"every\"){var a={trigger:\"every\"};Se(n,ye);a.pollInterval=h(Se(n,/[,\\[\\s]/));Se(n,ye);var s=we(e,n,\"event\");if(s){a.eventFilter=s}r.push(a)}else if(o.indexOf(\"sse:\")===0){r.push({trigger:\"sse\",sseEvent:o.substr(4)})}else{var u={trigger:o};var s=we(e,n,\"event\");if(s){u.eventFilter=s}while(n.length>0&&n[0]!==\",\"){Se(n,ye);var l=n.shift();if(l===\"changed\"){u.changed=true}else if(l===\"once\"){u.once=true}else if(l===\"consume\"){u.consume=true}else if(l===\"delay\"&&n[0]===\":\"){n.shift();u.delay=h(Se(n,ve))}else if(l===\"from\"&&n[0]===\":\"){n.shift();u.from=Se(n,ve)}else if(l===\"target\"&&n[0]===\":\"){n.shift();u.target=Se(n,ve)}else if(l===\"throttle\"&&n[0]===\":\"){n.shift();u.throttle=h(Se(n,ve))}else if(l===\"queue\"&&n[0]===\":\"){n.shift();u.queue=Se(n,ve)}else if((l===\"root\"||l===\"threshold\")&&n[0]===\":\"){n.shift();u[l]=Se(n,ve)}else{ot(e,\"htmx:syntax:error\",{token:n.shift()})}}r.push(u)}}if(n.length===i){ot(e,\"htmx:syntax:error\",{token:n.shift()})}Se(n,ye)}while(n[0]===\",\"&&n.shift())}if(r.length>0){return r}else if(v(e,\"form\")){return[{trigger:\"submit\"}]}else if(v(e,Ee)){return[{trigger:\"change\"}]}else{return[{trigger:\"click\"}]}}function Re(e){j(e).cancelled=true}function qe(e,t,r,n){var i=j(e);i.timeout=setTimeout(function(){if(z(e)&&i.cancelled!==true){if(!He(n,it(\"hx:poll:trigger\",{triggerSpec:n}))){Zt(t,r,e)}qe(e,t,F(e,\"hx-\"+t),n)}},n.pollInterval)}function Le(e){return location.hostname===e.hostname&&c(e,\"href\")&&c(e,\"href\").indexOf(\"#\")!==0}function Oe(t,r,e){if(t.tagName===\"A\"&&Le(t)||t.tagName===\"FORM\"){r.boosted=true;var n,i;if(t.tagName===\"A\"){n=\"get\";i=c(t,\"href\");r.pushURL=true}else{var o=c(t,\"method\");n=o?o.toLowerCase():\"get\";if(n===\"get\"){r.pushURL=true}i=c(t,\"action\")}e.forEach(function(e){ke(t,n,i,r,e,true)})}}function Te(e){return e.tagName===\"FORM\"||v(e,'input[type=\"submit\"], button')&&O(e,\"form\")!==null||e.tagName===\"A\"&&e.href&&(e.getAttribute(\"href\")===\"#\"||e.getAttribute(\"href\").indexOf(\"#\")!==0)}function Ae(e,t){return j(e).boosted&&e.tagName===\"A\"&&t.type===\"click\"&&(t.ctrlKey||t.metaKey)}function He(e,t){var r=e.eventFilter;if(r){try{return r(t)!==true}catch(e){ot(P().body,\"htmx:eventFilter:error\",{error:e,source:r.source});return true}}return false}function ke(o,a,s,e,u,l){var t;if(u.from){t=T(o,u.from)}else{t=[o]}B(t,function(n){var i=function(e){if(!z(o)){n.removeEventListener(u.trigger,i);return}if(Ae(o,e)){return}if(l||Te(o)){e.preventDefault()}if(He(u,e)){return}var t=j(e);t.triggerSpec=u;if(t.handledFor==null){t.handledFor=[]}var r=j(o);if(t.handledFor.indexOf(o)<0){t.handledFor.push(o);if(u.consume){e.stopPropagation()}if(u.target&&e.target){if(!v(e.target,u.target)){return}}if(u.once){if(r.triggeredOnce){return}else{r.triggeredOnce=true}}if(u.changed){if(r.lastValue===o.value){return}else{r.lastValue=o.value}}if(r.delayed){clearTimeout(r.delayed)}if(r.throttle){return}if(u.throttle){if(!r.throttle){Zt(a,s,o,e);r.throttle=setTimeout(function(){r.throttle=null},u.throttle)}}else if(u.delay){r.delayed=setTimeout(function(){Zt(a,s,o,e)},u.delay)}else{Zt(a,s,o,e)}}};if(e.listenerInfos==null){e.listenerInfos=[]}e.listenerInfos.push({trigger:u.trigger,listener:i,on:n});n.addEventListener(u.trigger,i)})}var Ne=false;var Ie=null;function Me(){if(!Ie){Ie=function(){Ne=true};window.addEventListener(\"scroll\",Ie);setInterval(function(){if(Ne){Ne=false;B(P().querySelectorAll(\"[hx-trigger='revealed'],[data-hx-trigger='revealed']\"),function(e){De(e)})}},200)}}function De(e){var t=j(e);if(!t.revealed&&m(e)){t.revealed=true;if(t.initialized){Zt(t.verb,t.path,e)}else{e.addEventListener(\"htmx:afterProcessNode\",function(){Zt(t.verb,t.path,e)},{once:true})}}}function Fe(e,t,r){var n=y(r);for(var i=0;i<n.length;i++){var o=n[i].split(/:(.+)/);if(o[0]===\"connect\"){Pe(e,o[1],0)}if(o[0]===\"send\"){Ue(e)}}}function Pe(s,r,n){if(!z(s)){return}if(r.indexOf(\"/\")==0){var e=location.hostname+(location.port?\":\"+location.port:\"\");if(location.protocol==\"https:\"){r=\"wss://\"+e+r}else if(location.protocol==\"http:\"){r=\"ws://\"+e+r}}var t=D.createWebSocket(r);t.onerror=function(e){ot(s,\"htmx:wsError\",{error:e,socket:t});Xe(s)};t.onclose=function(e){if([1006,1012,1013].indexOf(e.code)>=0){var t=je(n);setTimeout(function(){Pe(s,r,n+1)},t)}};t.onopen=function(e){n=0};j(s).webSocket=t;t.addEventListener(\"message\",function(e){if(Xe(s)){return}var t=e.data;st(s,function(e){t=e.transformResponse(t,null,s)});var r=Ft(s);var n=u(t);var i=p(n.children);for(var o=0;o<i.length;o++){var a=i[o];J(F(a,\"hx-swap-oob\")||\"true\",a,r)}mt(r.tasks)})}function Xe(e){if(!z(e)){j(e).webSocket.close();return true}}function Ue(l){var f=d(l,function(e){return j(e).webSocket!=null});if(f){l.addEventListener(Ce(l)[0].trigger,function(e){var t=j(f).webSocket;var r=kt(l,f);var n=Ot(l,\"post\");var i=n.errors;var o=n.values;var a=zt(l);var s=V(o,a);var u=Nt(s,l);u[\"HEADERS\"]=r;if(i&&i.length>0){lt(l,\"htmx:validation:halted\",i);return}t.send(JSON.stringify(u));if(Te(l)){e.preventDefault()}})}else{ot(l,\"htmx:noWebSocketSourceError\")}}function je(e){var t=D.config.wsReconnectDelay;if(typeof t===\"function\"){return t(e)}if(t===\"full-jitter\"){var r=Math.min(e,6);var n=1e3*Math.pow(2,r);return n*Math.random()}ut('htmx.config.wsReconnectDelay must either be a function or the string \"full-jitter\"')}function Be(e,t,r){var n=y(r);for(var i=0;i<n.length;i++){var o=n[i].split(/:(.+)/);if(o[0]===\"connect\"){ze(e,o[1])}if(o[0]===\"swap\"){Ve(e,o[1])}}}function ze(t,e){var r=D.createEventSource(e);r.onerror=function(e){ot(t,\"htmx:sseError\",{error:e,source:r});We(t)};j(t).sseEventSource=r}function Ve(o,a){var s=d(o,$e);if(s){var u=j(s).sseEventSource;var l=function(e){if(We(s)){u.removeEventListener(a,l);return}var t=e.data;st(o,function(e){t=e.transformResponse(t,null,o)});var r=Mt(o);var n=_(o);var i=Ft(o);ce(r.swapStyle,o,n,t,i);mt(i.tasks);lt(o,\"htmx:sseMessage\",e)};j(o).sseListener=l;u.addEventListener(a,l)}else{ot(o,\"htmx:noSSESourceError\")}}function _e(e,t,r,n){var i=d(e,$e);if(i){var o=j(i).sseEventSource;var a=function(){if(!We(i)){if(z(e)){Zt(t,r,e)}else{o.removeEventListener(n,a)}}};j(e).sseListener=a;o.addEventListener(n,a)}else{ot(e,\"htmx:noSSESourceError\")}}function We(e){if(!z(e)){j(e).sseEventSource.close();return true}}function $e(e){return j(e).sseEventSource!=null}function Je(e,t,r,n,i){var o=function(){if(!n.loaded){n.loaded=true;Zt(t,r,e)}};if(i){setTimeout(o,i)}else{o()}}function Ze(o,a,e){var t=false;B(r,function(n){if(s(o,\"hx-\"+n)){var i=F(o,\"hx-\"+n);t=true;a.path=i;a.verb=n;e.forEach(function(e){if(e.sseEvent){_e(o,n,i,e.sseEvent)}else if(e.trigger===\"revealed\"){Me();De(o)}else if(e.trigger===\"intersect\"){var t={};if(e.root){t.root=A(o,e.root)}if(e.threshold){t.threshold=parseFloat(e.threshold)}var r=new IntersectionObserver(function(e){for(var t=0;t<e.length;t++){var r=e[t];if(r.isIntersecting){lt(o,\"intersect\");break}}},t);r.observe(o);ke(o,n,i,a,e)}else if(e.trigger===\"load\"){Je(o,n,i,a,e.delay)}else if(e.pollInterval){a.polling=true;qe(o,n,i,e)}else{ke(o,n,i,a,e)}})}});return t}function Ge(e){if(e.type===\"text/javascript\"||e.type===\"\"){var t=P().createElement(\"script\");B(e.attributes,function(e){t.setAttribute(e.name,e.value)});t.textContent=e.textContent;t.async=false;var r=e.parentElement;try{r.insertBefore(t,e)}catch(e){ut(e)}finally{r.removeChild(e)}}}function Ke(e){if(v(e,\"script\")){Ge(e)}B(S(e,\"script\"),function(e){Ge(e)})}function Ye(){return document.querySelector(\"[hx-boost], [data-hx-boost]\")}function Qe(e){if(e.querySelectorAll){var t=Ye()?\", a, form\":\"\";var r=e.querySelectorAll(n+t+\", [hx-sse], [data-hx-sse], [hx-ws],\"+\" [data-hx-ws]\");return r}else{return[]}}function et(r){var e=function(e){if(v(e.target,\"button, input[type='submit']\")){var t=j(r);t.lastButtonClicked=e.target}};r.addEventListener(\"click\",e);r.addEventListener(\"focusin\",e);r.addEventListener(\"focusout\",function(e){var t=j(r);t.lastButtonClicked=null})}function tt(e){if(e.closest&&e.closest(D.config.disableSelector)){return}var t=j(e);if(!t.initialized){t.initialized=true;lt(e,\"htmx:beforeProcessNode\");if(e.value){t.lastValue=e.value}var r=Ce(e);var n=Ze(e,t,r);if(!n&&X(e,\"hx-boost\")===\"true\"){Oe(e,t,r)}if(e.tagName===\"FORM\"){et(e)}var i=F(e,\"hx-sse\");if(i){Be(e,t,i)}var o=F(e,\"hx-ws\");if(o){Fe(e,t,o)}lt(e,\"htmx:afterProcessNode\")}}function rt(e){e=H(e);tt(e);B(Qe(e),function(e){tt(e)})}function nt(e){return e.replace(/([a-z0-9])([A-Z])/g,\"$1-$2\").toLowerCase()}function it(e,t){var r;if(window.CustomEvent&&typeof window.CustomEvent===\"function\"){r=new CustomEvent(e,{bubbles:true,cancelable:true,detail:t})}else{r=P().createEvent(\"CustomEvent\");r.initCustomEvent(e,true,true,t)}return r}function ot(e,t,r){lt(e,t,V({error:t},r))}function at(e){return e===\"htmx:afterProcessNode\"}function st(e,t){B(tr(e),function(e){try{t(e)}catch(e){ut(e)}})}function ut(e){if(console.error){console.error(e)}else if(console.log){console.log(\"ERROR: \",e)}}function lt(e,t,r){e=H(e);if(r==null){r={}}r[\"elt\"]=e;var n=it(t,r);if(D.logger&&!at(t)){D.logger(e,t,r)}if(r.error){ut(r.error);lt(e,\"htmx:error\",{errorInfo:r})}var i=e.dispatchEvent(n);var o=nt(t);if(i&&o!==t){var a=it(o,n.detail);i=i&&e.dispatchEvent(a)}st(e,function(e){i=i&&e.onEvent(t,n)!==false});return i}var ft=null;function ct(){var e=P().querySelector(\"[hx-history-elt],[data-hx-history-elt]\");return e||P().body}function ht(e,t,r,n){var i=x(localStorage.getItem(\"htmx-history-cache\"))||[];for(var o=0;o<i.length;o++){if(i[o].url===e){i.splice(o,1);break}}i.push({url:e,content:t,title:r,scroll:n});while(i.length>D.config.historyCacheSize){i.shift()}while(i.length>0){try{localStorage.setItem(\"htmx-history-cache\",JSON.stringify(i));break}catch(e){ot(P().body,\"htmx:historyCacheError\",{cause:e,cache:i});i.shift()}}}function dt(e){var t=x(localStorage.getItem(\"htmx-history-cache\"))||[];for(var r=0;r<t.length;r++){if(t[r].url===e){return t[r]}}return null}function vt(e){var t=D.config.requestClass;var r=e.cloneNode(true);B(S(r,\".\"+t),function(e){R(e,t)});return r.innerHTML}function gt(){var e=ct();var t=ft||location.pathname+location.search;lt(P().body,\"htmx:beforeHistorySave\",{path:t,historyElt:e});if(D.config.historyEnabled)history.replaceState({htmx:true},P().title,window.location.href);ht(t,vt(e),P().title,window.scrollY)}function pt(e){if(D.config.historyEnabled)history.pushState({htmx:true},\"\",e);ft=e}function mt(e){B(e,function(e){e.call()})}function yt(n){var e=new XMLHttpRequest;var i={path:n,xhr:e};lt(P().body,\"htmx:historyCacheMiss\",i);e.open(\"GET\",n,true);e.setRequestHeader(\"HX-History-Restore-Request\",\"true\");e.onload=function(){if(this.status>=200&&this.status<400){lt(P().body,\"htmx:historyCacheMissLoad\",i);var e=u(this.response);e=e.querySelector(\"[hx-history-elt],[data-hx-history-elt]\")||e;var t=ct();var r=Ft(t);se(t,e,r);mt(r.tasks);ft=n;lt(P().body,\"htmx:historyRestore\",{path:n})}else{ot(P().body,\"htmx:historyCacheMissLoadError\",i)}};e.send()}function xt(e){gt();e=e||location.pathname+location.search;var t=dt(e);if(t){var r=u(t.content);var n=ct();var i=Ft(n);se(n,r,i);mt(i.tasks);document.title=t.title;window.scrollTo(0,t.scroll);ft=e;lt(P().body,\"htmx:historyRestore\",{path:e})}else{if(D.config.refreshOnHistoryMiss){window.location.reload(true)}else{yt(e)}}}function bt(e){var t=X(e,\"hx-push-url\");return t&&t!==\"false\"||j(e).boosted&&j(e).pushURL}function wt(e){var t=X(e,\"hx-push-url\");return t===\"true\"||t===\"false\"?null:t}function St(e){var t=X(e,\"hx-indicator\");if(t){var r=T(e,t)}else{r=[e]}B(r,function(e){e.classList[\"add\"].call(e.classList,D.config.requestClass)});return r}function Et(e){B(e,function(e){e.classList[\"remove\"].call(e.classList,D.config.requestClass)})}function Ct(e,t){for(var r=0;r<e.length;r++){var n=e[r];if(n.isSameNode(t)){return true}}return false}function Rt(e){if(e.name===\"\"||e.name==null||e.disabled){return false}if(e.type===\"button\"||e.type===\"submit\"||e.tagName===\"image\"||e.tagName===\"reset\"||e.tagName===\"file\"){return false}if(e.type===\"checkbox\"||e.type===\"radio\"){return e.checked}return true}function qt(t,r,n,e,i){if(e==null||Ct(t,e)){return}else{t.push(e)}if(Rt(e)){var o=c(e,\"name\");var a=e.value;if(e.multiple){a=p(e.querySelectorAll(\"option:checked\")).map(function(e){return e.value})}if(e.files){a=p(e.files)}if(o!=null&&a!=null){var s=r[o];if(s){if(Array.isArray(s)){if(Array.isArray(a)){r[o]=s.concat(a)}else{s.push(a)}}else{if(Array.isArray(a)){r[o]=[s].concat(a)}else{r[o]=[s,a]}}}else{r[o]=a}}if(i){Lt(e,n)}}if(v(e,\"form\")){var u=e.elements;B(u,function(e){qt(t,r,n,e,i)})}}function Lt(e,t){if(e.willValidate){lt(e,\"htmx:validation:validate\");if(!e.checkValidity()){t.push({elt:e,message:e.validationMessage,validity:e.validity});lt(e,\"htmx:validation:failed\",{message:e.validationMessage,validity:e.validity})}}}function Ot(e,t){var r=[];var n={};var i={};var o=[];var a=v(e,\"form\")&&e.noValidate!==true;if(t!==\"get\"){qt(r,i,o,O(e,\"form\"),a)}qt(r,n,o,e,a);var s=j(e);if(s.lastButtonClicked){var u=c(s.lastButtonClicked,\"name\");if(u){n[u]=s.lastButtonClicked.value}}var l=X(e,\"hx-include\");if(l){var f=T(e,l);B(f,function(e){qt(r,n,o,e,a);if(!v(e,\"form\")){B(e.querySelectorAll(Ee),function(e){qt(r,n,o,e,a)})}})}n=V(n,i);return{errors:o,values:n}}function Tt(e,t,r){if(e!==\"\"){e+=\"&\"}e+=encodeURIComponent(t)+\"=\"+encodeURIComponent(r);return e}function At(e){var t=\"\";for(var r in e){if(e.hasOwnProperty(r)){var n=e[r];if(Array.isArray(n)){B(n,function(e){t=Tt(t,r,e)})}else{t=Tt(t,r,n)}}}return t}function Ht(e){var t=new FormData;for(var r in e){if(e.hasOwnProperty(r)){var n=e[r];if(Array.isArray(n)){B(n,function(e){t.append(r,e)})}else{t.append(r,n)}}}return t}function kt(e,t,r){var n={\"HX-Request\":\"true\",\"HX-Trigger\":c(e,\"id\"),\"HX-Trigger-Name\":c(e,\"name\"),\"HX-Target\":F(t,\"id\"),\"HX-Current-URL\":P().location.href};Xt(e,\"hx-headers\",false,n);if(r!==undefined){n[\"HX-Prompt\"]=r}if(j(e).boosted){n[\"HX-Boosted\"]=\"true\"}return n}function Nt(t,e){var r=X(e,\"hx-params\");if(r){if(r===\"none\"){return{}}else if(r===\"*\"){return t}else if(r.indexOf(\"not \")===0){B(r.substr(4).split(\",\"),function(e){e=e.trim();delete t[e]});return t}else{var n={};B(r.split(\",\"),function(e){e=e.trim();n[e]=t[e]});return n}}else{return t}}function It(e){return c(e,\"href\")&&c(e,\"href\").indexOf(\"#\")>=0}function Mt(e){var t=X(e,\"hx-swap\");var r={swapStyle:j(e).boosted?\"innerHTML\":D.config.defaultSwapStyle,swapDelay:D.config.defaultSwapDelay,settleDelay:D.config.defaultSettleDelay};if(j(e).boosted&&!It(e)){r[\"show\"]=\"top\"}if(t){var n=y(t);if(n.length>0){r[\"swapStyle\"]=n[0];for(var i=1;i<n.length;i++){var o=n[i];if(o.indexOf(\"swap:\")===0){r[\"swapDelay\"]=h(o.substr(5))}if(o.indexOf(\"settle:\")===0){r[\"settleDelay\"]=h(o.substr(7))}if(o.indexOf(\"scroll:\")===0){var a=o.substr(7);var s=a.split(\":\");var u=s.pop();var l=s.length>0?s.join(\":\"):null;r[\"scroll\"]=u;r[\"scrollTarget\"]=l}if(o.indexOf(\"show:\")===0){var f=o.substr(5);var s=f.split(\":\");var c=s.pop();var l=s.length>0?s.join(\":\"):null;r[\"show\"]=c;r[\"showTarget\"]=l}}}}return r}function Dt(t,r,n){var i=null;st(r,function(e){if(i==null){i=e.encodeParameters(t,n,r)}});if(i!=null){return i}else{if(X(r,\"hx-encoding\")===\"multipart/form-data\"||v(r,\"form\")&&c(r,\"enctype\")===\"multipart/form-data\"){return Ht(n)}else{return At(n)}}}function Ft(e){return{tasks:[],elts:[e]}}function Pt(e,t){var r=e[0];var n=e[e.length-1];if(t.scroll){var i=null;if(t.scrollTarget){i=A(r,t.scrollTarget)}if(t.scroll===\"top\"&&(r||i)){i=i||r;i.scrollTop=0}if(t.scroll===\"bottom\"&&(n||i)){i=i||n;i.scrollTop=i.scrollHeight}}if(t.show){var i=null;if(t.showTarget){var o=t.showTarget;if(t.showTarget===\"window\"){o=\"body\"}i=A(r,o)}if(t.show===\"top\"&&(r||i)){i=i||r;i.scrollIntoView({block:\"start\",behavior:D.config.scrollBehavior})}if(t.show===\"bottom\"&&(n||i)){i=i||n;i.scrollIntoView({block:\"end\",behavior:D.config.scrollBehavior})}}}function Xt(e,t,r,n){if(n==null){n={}}if(e==null){return n}var i=F(e,t);if(i){var o=i.trim();var a=r;if(o.indexOf(\"javascript:\")===0){o=o.substr(11);a=true}else if(o.indexOf(\"js:\")===0){o=o.substr(3);a=true}if(o.indexOf(\"{\")!==0){o=\"{\"+o+\"}\"}var s;if(a){s=Ut(e,function(){return Function(\"return (\"+o+\")\")()},{})}else{s=x(o)}for(var u in s){if(s.hasOwnProperty(u)){if(n[u]==null){n[u]=s[u]}}}}return Xt(l(e),t,r,n)}function Ut(e,t,r){if(D.config.allowEval){return t()}else{ot(e,\"htmx:evalDisallowedError\");return r}}function jt(e,t){return Xt(e,\"hx-vars\",true,t)}function Bt(e,t){return Xt(e,\"hx-vals\",false,t)}function zt(e){return V(jt(e),Bt(e))}function Vt(t,r,n){if(n!==null){try{t.setRequestHeader(r,n)}catch(e){t.setRequestHeader(r,encodeURIComponent(n));t.setRequestHeader(r+\"-URI-AutoEncoded\",\"true\")}}}function _t(t){if(t.responseURL&&typeof URL!==\"undefined\"){try{var e=new URL(t.responseURL);return e.pathname+e.search}catch(e){ot(P().body,\"htmx:badResponseUrl\",{url:t.responseURL})}}}function Wt(e,t){return e.getAllResponseHeaders().match(t)}function $t(e,t,r){e=e.toLowerCase();if(r){if(r instanceof Element||a(r,\"String\")){return Zt(e,t,null,null,{targetOverride:H(r),returnPromise:true})}else{return Zt(e,t,H(r.source),r.event,{handler:r.handler,headers:r.headers,values:r.values,targetOverride:H(r.target),returnPromise:true})}}else{return Zt(e,t,null,null,{returnPromise:true})}}function Jt(e){var t=[];while(e){t.push(e);e=e.parentElement}return t}function Zt(e,t,n,r,i){var o=null;var a=null;i=i!=null?i:{};if(i.returnPromise&&typeof Promise!==\"undefined\"){var s=new Promise(function(e,t){o=e;a=t})}if(n==null){n=P().body}var u=i.handler||Gt;if(!z(n)){return}var l=i.targetOverride||_(n);if(l==null){ot(n,\"htmx:targetError\",{target:F(n,\"hx-target\")});return}var f=j(n);if(f.requestInFlight){var c=\"last\";if(r){var h=j(r);if(h&&h.triggerSpec&&h.triggerSpec.queue){c=h.triggerSpec.queue}}if(f.queuedRequests==null){f.queuedRequests=[]}if(c===\"first\"&&f.queuedRequests.length===0){f.queuedRequests.push(function(){Zt(e,t,n,r,i)})}else if(c===\"all\"){f.queuedRequests.push(function(){Zt(e,t,n,r,i)})}else if(c===\"last\"){f.queuedRequests=[];f.queuedRequests.push(function(){Zt(e,t,n,r,i)})}return}else{f.requestInFlight=true}var d=function(){f.requestInFlight=false;if(f.queuedRequests!=null&&f.queuedRequests.length>0){var e=f.queuedRequests.shift();e()}};var v=X(n,\"hx-prompt\");if(v){var g=prompt(v);if(g===null||!lt(n,\"htmx:prompt\",{prompt:g,target:l})){U(o);d();return s}}var p=X(n,\"hx-confirm\");if(p){if(!confirm(p)){U(o);d();return s}}var m=new XMLHttpRequest;var y=kt(n,l,g);if(i.headers){y=V(y,i.headers)}var x=Ot(n,e);var b=x.errors;var w=x.values;if(i.values){w=V(w,i.values)}var S=zt(n);var E=V(w,S);var C=Nt(E,n);if(e!==\"get\"&&X(n,\"hx-encoding\")==null){y[\"Content-Type\"]=\"application/x-www-form-urlencoded; charset=UTF-8\"}if(t==null||t===\"\"){t=P().location.href}var R=Xt(n,\"hx-request\");var q={parameters:C,unfilteredParameters:E,headers:y,target:l,verb:e,errors:b,withCredentials:i.credentials||R.credentials||D.config.withCredentials,timeout:i.timeout||R.timeout||D.config.timeout,path:t,triggeringEvent:r};if(!lt(n,\"htmx:configRequest\",q)){U(o);d();return s}t=q.path;e=q.verb;y=q.headers;C=q.parameters;b=q.errors;if(b&&b.length>0){lt(n,\"htmx:validation:halted\",q);U(o);d();return s}var L=t.split(\"#\");var O=L[0];var T=L[1];if(e===\"get\"){var A=O;var H=Object.keys(C).length!==0;if(H){if(A.indexOf(\"?\")<0){A+=\"?\"}else{A+=\"&\"}A+=At(C);if(T){A+=\"#\"+T}}m.open(\"GET\",A,true)}else{m.open(e.toUpperCase(),t,true)}m.overrideMimeType(\"text/html\");m.withCredentials=q.withCredentials;m.timeout=q.timeout;if(R.noHeaders){}else{for(var k in y){if(y.hasOwnProperty(k)){var N=y[k];Vt(m,k,N)}}}var I={xhr:m,target:l,requestConfig:q,pathInfo:{path:t,finalPath:A,anchor:T}};m.onload=function(){try{var e=Jt(n);u(n,I);Et(M);lt(n,\"htmx:afterRequest\",I);lt(n,\"htmx:afterOnLoad\",I);if(!z(n)){var t=null;while(e.length>0&&t==null){var r=e.shift();if(z(r)){t=r}}if(t){lt(t,\"htmx:afterRequest\",I);lt(t,\"htmx:afterOnLoad\",I)}}U(o);d()}catch(e){ot(n,\"htmx:onLoadError\",V({error:e},I));throw e}};m.onerror=function(){Et(M);ot(n,\"htmx:afterRequest\",I);ot(n,\"htmx:sendError\",I);U(a);d()};m.onabort=function(){Et(M);ot(n,\"htmx:afterRequest\",I);ot(n,\"htmx:sendAbort\",I);U(a);d()};m.ontimeout=function(){Et(M);ot(n,\"htmx:afterRequest\",I);ot(n,\"htmx:timeout\",I);U(a);d()};if(!lt(n,\"htmx:beforeRequest\",I)){U(o);d();return s}var M=St(n);B([\"loadstart\",\"loadend\",\"progress\",\"abort\"],function(t){B([m,m.upload],function(e){e.addEventListener(t,function(e){lt(n,\"htmx:xhr:\"+t,{lengthComputable:e.lengthComputable,loaded:e.loaded,total:e.total})})})});lt(n,\"htmx:beforeSend\",I);m.send(e===\"get\"?null:Dt(m,n,C));return s}function Gt(a,s){var u=s.xhr;var l=s.target;if(!lt(a,\"htmx:beforeOnLoad\",s))return;if(Wt(u,/HX-Trigger:/i)){he(u,\"HX-Trigger\",a)}if(Wt(u,/HX-Push:/i)){var f=u.getResponseHeader(\"HX-Push\")}if(Wt(u,/HX-Redirect:/i)){window.location.href=u.getResponseHeader(\"HX-Redirect\");return}if(Wt(u,/HX-Refresh:/i)){if(\"true\"===u.getResponseHeader(\"HX-Refresh\")){location.reload();return}}var c=bt(a)||f;var e=u.status>=200&&u.status<400&&u.status!==204;var h=u.response;var t=V({shouldSwap:e,serverResponse:h},s);if(!lt(l,\"htmx:beforeSwap\",t))return;l=t.target;h=t.serverResponse;if(t.shouldSwap){if(u.status===286){Re(a)}st(a,function(e){h=e.transformResponse(h,u,a)});if(c){gt()}var d=Mt(a);l.classList.add(D.config.swappingClass);var r=function(){try{var e=document.activeElement;var t={};try{t={elt:e,start:e?e.selectionStart:null,end:e?e.selectionEnd:null}}catch(e){}var r=Ft(l);ce(d.swapStyle,l,a,h,r);if(t.elt&&!z(t.elt)&&t.elt.id){var n=document.getElementById(t.elt.id);if(n){if(t.start&&n.setSelectionRange){n.setSelectionRange(t.start,t.end)}n.focus()}}l.classList.remove(D.config.swappingClass);B(r.elts,function(e){if(e.classList){e.classList.add(D.config.settlingClass)}lt(e,\"htmx:afterSwap\",s)});if(s.pathInfo.anchor){location.hash=s.pathInfo.anchor}if(Wt(u,/HX-Trigger-After-Swap:/i)){var i=a;if(!z(a)){i=P().body}he(u,\"HX-Trigger-After-Swap\",i)}var o=function(){B(r.tasks,function(e){e.call()});B(r.elts,function(e){if(e.classList){e.classList.remove(D.config.settlingClass)}lt(e,\"htmx:afterSettle\",s)});if(c){var e=f||wt(a)||_t(u)||s.pathInfo.finalPath||s.pathInfo.path;pt(e);lt(P().body,\"htmx:pushedIntoHistory\",{path:e})}Pt(r.elts,d);if(Wt(u,/HX-Trigger-After-Settle:/i)){var t=a;if(!z(a)){t=P().body}he(u,\"HX-Trigger-After-Settle\",t)}};if(d.settleDelay>0){setTimeout(o,d.settleDelay)}else{o()}}catch(e){ot(a,\"htmx:swapError\",s);throw e}};if(d.swapDelay>0){setTimeout(r,d.swapDelay)}else{r()}}else{ot(a,\"htmx:responseError\",V({error:\"Response Status Error Code \"+u.status+\" from \"+s.pathInfo.path},s))}}var Kt={};function Yt(){return{onEvent:function(e,t){return true},transformResponse:function(e,t,r){return e},isInlineSwap:function(e){return false},handleSwap:function(e,t,r,n){return false},encodeParameters:function(e,t,r){return null}}}function Qt(e,t){Kt[e]=V(Yt(),t)}function er(e){delete Kt[e]}function tr(e,r,n){if(e==undefined){return r}if(r==undefined){r=[]}if(n==undefined){n=[]}var t=F(e,\"hx-ext\");if(t){B(t.split(\",\"),function(e){e=e.replace(/ /g,\"\");if(e.slice(0,7)==\"ignore:\"){n.push(e.slice(7));return}if(n.indexOf(e)<0){var t=Kt[e];if(t&&r.indexOf(t)<0){r.push(t)}}})}return tr(l(e),r,n)}function rr(e){if(P().readyState!==\"loading\"){e()}else{P().addEventListener(\"DOMContentLoaded\",e)}}function nr(){if(D.config.includeIndicatorStyles!==false){P().head.insertAdjacentHTML(\"beforeend\",\"<style>                      .\"+D.config.indicatorClass+\"{opacity:0;transition: opacity 200ms ease-in;}                      .\"+D.config.requestClass+\" .\"+D.config.indicatorClass+\"{opacity:1}                      .\"+D.config.requestClass+\".\"+D.config.indicatorClass+\"{opacity:1}                    </style>\")}}function ir(){var e=P().querySelector('meta[name=\"htmx-config\"]');if(e){return x(e.content)}else{return null}}function or(){var e=ir();if(e){D.config=V(D.config,e)}}rr(function(){or();nr();var e=P().body;rt(e);window.onpopstate=function(e){if(e.state&&e.state.htmx){xt()}};setTimeout(function(){lt(e,\"htmx:load\",{})},0)});return D}()});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/htmx.org/dist/htmx.min.js\n");

/***/ }),

/***/ "./assets/css/app.scss":
/*!*****************************!*\
  !*** ./assets/css/app.scss ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY3NzL2FwcC5zY3NzPzAwNTkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBIiwiZmlsZSI6Ii4vYXNzZXRzL2Nzcy9hcHAuc2Nzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./assets/css/app.scss\n");

/***/ }),

/***/ "./node_modules/popper.js/dist/esm/popper.js":
/*!***************************************************!*\
  !*** ./node_modules/popper.js/dist/esm/popper.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**!\n * @fileOverview Kickass library to create and place poppers near their reference elements.\n * @version 1.16.1\n * @license\n * Copyright (c) 2016 Federico Zivolo and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && typeof navigator !== 'undefined';\n\nvar timeoutDuration = function () {\n  var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];\n  for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {\n    if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\n      return 1;\n    }\n  }\n  return 0;\n}();\n\nfunction microtaskDebounce(fn) {\n  var called = false;\n  return function () {\n    if (called) {\n      return;\n    }\n    called = true;\n    window.Promise.resolve().then(function () {\n      called = false;\n      fn();\n    });\n  };\n}\n\nfunction taskDebounce(fn) {\n  var scheduled = false;\n  return function () {\n    if (!scheduled) {\n      scheduled = true;\n      setTimeout(function () {\n        scheduled = false;\n        fn();\n      }, timeoutDuration);\n    }\n  };\n}\n\nvar supportsMicroTasks = isBrowser && window.Promise;\n\n/**\n* Create a debounced version of a method, that's asynchronously deferred\n* but called in the minimum time possible.\n*\n* @method\n* @memberof Popper.Utils\n* @argument {Function} fn\n* @returns {Function}\n*/\nvar debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;\n\n/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\nfunction isFunction(functionToCheck) {\n  var getType = {};\n  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\n}\n\n/**\n * Get CSS computed property of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Eement} element\n * @argument {String} property\n */\nfunction getStyleComputedProperty(element, property) {\n  if (element.nodeType !== 1) {\n    return [];\n  }\n  // NOTE: 1 DOM access here\n  var window = element.ownerDocument.defaultView;\n  var css = window.getComputedStyle(element, null);\n  return property ? css[property] : css;\n}\n\n/**\n * Returns the parentNode or the host of the element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} parent\n */\nfunction getParentNode(element) {\n  if (element.nodeName === 'HTML') {\n    return element;\n  }\n  return element.parentNode || element.host;\n}\n\n/**\n * Returns the scrolling parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} scroll parent\n */\nfunction getScrollParent(element) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  if (!element) {\n    return document.body;\n  }\n\n  switch (element.nodeName) {\n    case 'HTML':\n    case 'BODY':\n      return element.ownerDocument.body;\n    case '#document':\n      return element.body;\n  }\n\n  // Firefox want us to check `-x` and `-y` variations as well\n\n  var _getStyleComputedProp = getStyleComputedProperty(element),\n      overflow = _getStyleComputedProp.overflow,\n      overflowX = _getStyleComputedProp.overflowX,\n      overflowY = _getStyleComputedProp.overflowY;\n\n  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {\n    return element;\n  }\n\n  return getScrollParent(getParentNode(element));\n}\n\n/**\n * Returns the reference node of the reference object, or the reference object itself.\n * @method\n * @memberof Popper.Utils\n * @param {Element|Object} reference - the reference element (the popper will be relative to this)\n * @returns {Element} parent\n */\nfunction getReferenceNode(reference) {\n  return reference && reference.referenceNode ? reference.referenceNode : reference;\n}\n\nvar isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);\nvar isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);\n\n/**\n * Determines if the browser is Internet Explorer\n * @method\n * @memberof Popper.Utils\n * @param {Number} version to check\n * @returns {Boolean} isIE\n */\nfunction isIE(version) {\n  if (version === 11) {\n    return isIE11;\n  }\n  if (version === 10) {\n    return isIE10;\n  }\n  return isIE11 || isIE10;\n}\n\n/**\n * Returns the offset parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} offset parent\n */\nfunction getOffsetParent(element) {\n  if (!element) {\n    return document.documentElement;\n  }\n\n  var noOffsetParent = isIE(10) ? document.body : null;\n\n  // NOTE: 1 DOM access here\n  var offsetParent = element.offsetParent || null;\n  // Skip hidden elements which don't have an offsetParent\n  while (offsetParent === noOffsetParent && element.nextElementSibling) {\n    offsetParent = (element = element.nextElementSibling).offsetParent;\n  }\n\n  var nodeName = offsetParent && offsetParent.nodeName;\n\n  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n    return element ? element.ownerDocument.documentElement : document.documentElement;\n  }\n\n  // .offsetParent will return the closest TH, TD or TABLE in case\n  // no offsetParent is present, I hate this job...\n  if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {\n    return getOffsetParent(offsetParent);\n  }\n\n  return offsetParent;\n}\n\nfunction isOffsetContainer(element) {\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY') {\n    return false;\n  }\n  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;\n}\n\n/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} node\n * @returns {Element} root node\n */\nfunction getRoot(node) {\n  if (node.parentNode !== null) {\n    return getRoot(node.parentNode);\n  }\n\n  return node;\n}\n\n/**\n * Finds the offset parent common to the two provided nodes\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element1\n * @argument {Element} element2\n * @returns {Element} common offset parent\n */\nfunction findCommonOffsetParent(element1, element2) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n    return document.documentElement;\n  }\n\n  // Here we make sure to give as \"start\" the element that comes first in the DOM\n  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;\n  var start = order ? element1 : element2;\n  var end = order ? element2 : element1;\n\n  // Get common ancestor container\n  var range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  var commonAncestorContainer = range.commonAncestorContainer;\n\n  // Both nodes are inside #document\n\n  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {\n    if (isOffsetContainer(commonAncestorContainer)) {\n      return commonAncestorContainer;\n    }\n\n    return getOffsetParent(commonAncestorContainer);\n  }\n\n  // one of the nodes is inside shadowDOM, find which one\n  var element1root = getRoot(element1);\n  if (element1root.host) {\n    return findCommonOffsetParent(element1root.host, element2);\n  } else {\n    return findCommonOffsetParent(element1, getRoot(element2).host);\n  }\n}\n\n/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {String} side `top` or `left`\n * @returns {number} amount of scrolled pixels\n */\nfunction getScroll(element) {\n  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';\n\n  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n  var nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    var html = element.ownerDocument.documentElement;\n    var scrollingElement = element.ownerDocument.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}\n\n/*\n * Sum or subtract the element scroll values (left and top) from a given rect object\n * @method\n * @memberof Popper.Utils\n * @param {Object} rect - Rect object you want to change\n * @param {HTMLElement} element - The element from the function reads the scroll values\n * @param {Boolean} subtract - set to true if you want to subtract the scroll values\n * @return {Object} rect - The modifier rect object\n */\nfunction includeScroll(rect, element) {\n  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var scrollTop = getScroll(element, 'top');\n  var scrollLeft = getScroll(element, 'left');\n  var modifier = subtract ? -1 : 1;\n  rect.top += scrollTop * modifier;\n  rect.bottom += scrollTop * modifier;\n  rect.left += scrollLeft * modifier;\n  rect.right += scrollLeft * modifier;\n  return rect;\n}\n\n/*\n * Helper to detect borders of a given element\n * @method\n * @memberof Popper.Utils\n * @param {CSSStyleDeclaration} styles\n * Result of `getStyleComputedProperty` on the given element\n * @param {String} axis - `x` or `y`\n * @return {number} borders - The borders size of the given axis\n */\n\nfunction getBordersSize(styles, axis) {\n  var sideA = axis === 'x' ? 'Left' : 'Top';\n  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n\n  return parseFloat(styles['border' + sideA + 'Width']) + parseFloat(styles['border' + sideB + 'Width']);\n}\n\nfunction getSize(axis, body, html, computedStyle) {\n  return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);\n}\n\nfunction getWindowSizes(document) {\n  var body = document.body;\n  var html = document.documentElement;\n  var computedStyle = isIE(10) && getComputedStyle(html);\n\n  return {\n    height: getSize('Height', body, html, computedStyle),\n    width: getSize('Width', body, html, computedStyle)\n  };\n}\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\n\n\n\n\nvar defineProperty = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\n/**\n * Given element offsets, generate an output similar to getBoundingClientRect\n * @method\n * @memberof Popper.Utils\n * @argument {Object} offsets\n * @returns {Object} ClientRect like output\n */\nfunction getClientRect(offsets) {\n  return _extends({}, offsets, {\n    right: offsets.left + offsets.width,\n    bottom: offsets.top + offsets.height\n  });\n}\n\n/**\n * Get bounding client rect of given element\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} element\n * @return {Object} client rect\n */\nfunction getBoundingClientRect(element) {\n  var rect = {};\n\n  // IE10 10 FIX: Please, don't ask, the element isn't\n  // considered in DOM in some circumstances...\n  // This isn't reproducible in IE10 compatibility mode of IE11\n  try {\n    if (isIE(10)) {\n      rect = element.getBoundingClientRect();\n      var scrollTop = getScroll(element, 'top');\n      var scrollLeft = getScroll(element, 'left');\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    } else {\n      rect = element.getBoundingClientRect();\n    }\n  } catch (e) {}\n\n  var result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top\n  };\n\n  // subtract scrollbar size from sizes\n  var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};\n  var width = sizes.width || element.clientWidth || result.width;\n  var height = sizes.height || element.clientHeight || result.height;\n\n  var horizScrollbar = element.offsetWidth - width;\n  var vertScrollbar = element.offsetHeight - height;\n\n  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n  // we make this check conditional for performance reasons\n  if (horizScrollbar || vertScrollbar) {\n    var styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, 'x');\n    vertScrollbar -= getBordersSize(styles, 'y');\n\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result);\n}\n\nfunction getOffsetRectRelativeToArbitraryNode(children, parent) {\n  var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var isIE10 = isIE(10);\n  var isHTML = parent.nodeName === 'HTML';\n  var childrenRect = getBoundingClientRect(children);\n  var parentRect = getBoundingClientRect(parent);\n  var scrollParent = getScrollParent(children);\n\n  var styles = getStyleComputedProperty(parent);\n  var borderTopWidth = parseFloat(styles.borderTopWidth);\n  var borderLeftWidth = parseFloat(styles.borderLeftWidth);\n\n  // In cases where the parent is fixed, we must ignore negative scroll in offset calc\n  if (fixedPosition && isHTML) {\n    parentRect.top = Math.max(parentRect.top, 0);\n    parentRect.left = Math.max(parentRect.left, 0);\n  }\n  var offsets = getClientRect({\n    top: childrenRect.top - parentRect.top - borderTopWidth,\n    left: childrenRect.left - parentRect.left - borderLeftWidth,\n    width: childrenRect.width,\n    height: childrenRect.height\n  });\n  offsets.marginTop = 0;\n  offsets.marginLeft = 0;\n\n  // Subtract margins of documentElement in case it's being used as parent\n  // we do this only on HTML because it's the only element that behaves\n  // differently when margins are applied to it. The margins are included in\n  // the box of the documentElement, in the other cases not.\n  if (!isIE10 && isHTML) {\n    var marginTop = parseFloat(styles.marginTop);\n    var marginLeft = parseFloat(styles.marginLeft);\n\n    offsets.top -= borderTopWidth - marginTop;\n    offsets.bottom -= borderTopWidth - marginTop;\n    offsets.left -= borderLeftWidth - marginLeft;\n    offsets.right -= borderLeftWidth - marginLeft;\n\n    // Attach marginTop and marginLeft because in some circumstances we may need them\n    offsets.marginTop = marginTop;\n    offsets.marginLeft = marginLeft;\n  }\n\n  if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {\n    offsets = includeScroll(offsets, parent);\n  }\n\n  return offsets;\n}\n\nfunction getViewportOffsetRectRelativeToArtbitraryNode(element) {\n  var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var html = element.ownerDocument.documentElement;\n  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n  var width = Math.max(html.clientWidth, window.innerWidth || 0);\n  var height = Math.max(html.clientHeight, window.innerHeight || 0);\n\n  var scrollTop = !excludeScroll ? getScroll(html) : 0;\n  var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;\n\n  var offset = {\n    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\n    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\n    width: width,\n    height: height\n  };\n\n  return getClientRect(offset);\n}\n\n/**\n * Check if the given element is fixed or is inside a fixed parent\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {Element} customContainer\n * @returns {Boolean} answer to \"isFixed?\"\n */\nfunction isFixed(element) {\n  var nodeName = element.nodeName;\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    return false;\n  }\n  if (getStyleComputedProperty(element, 'position') === 'fixed') {\n    return true;\n  }\n  var parentNode = getParentNode(element);\n  if (!parentNode) {\n    return false;\n  }\n  return isFixed(parentNode);\n}\n\n/**\n * Finds the first parent of an element that has a transformed property defined\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} first transformed parent or documentElement\n */\n\nfunction getFixedPositionOffsetParent(element) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element || !element.parentElement || isIE()) {\n    return document.documentElement;\n  }\n  var el = element.parentElement;\n  while (el && getStyleComputedProperty(el, 'transform') === 'none') {\n    el = el.parentElement;\n  }\n  return el || document.documentElement;\n}\n\n/**\n * Computed the boundaries limits and return them\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} popper\n * @param {HTMLElement} reference\n * @param {number} padding\n * @param {HTMLElement} boundariesElement - Element used to define the boundaries\n * @param {Boolean} fixedPosition - Is in fixed position mode\n * @returns {Object} Coordinates of the boundaries\n */\nfunction getBoundaries(popper, reference, padding, boundariesElement) {\n  var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n  // NOTE: 1 DOM access here\n\n  var boundaries = { top: 0, left: 0 };\n  var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));\n\n  // Handle viewport case\n  if (boundariesElement === 'viewport') {\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);\n  } else {\n    // Handle other cases based on DOM element used as boundaries\n    var boundariesNode = void 0;\n    if (boundariesElement === 'scrollParent') {\n      boundariesNode = getScrollParent(getParentNode(reference));\n      if (boundariesNode.nodeName === 'BODY') {\n        boundariesNode = popper.ownerDocument.documentElement;\n      }\n    } else if (boundariesElement === 'window') {\n      boundariesNode = popper.ownerDocument.documentElement;\n    } else {\n      boundariesNode = boundariesElement;\n    }\n\n    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);\n\n    // In case of HTML, we need a different computation\n    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n      var _getWindowSizes = getWindowSizes(popper.ownerDocument),\n          height = _getWindowSizes.height,\n          width = _getWindowSizes.width;\n\n      boundaries.top += offsets.top - offsets.marginTop;\n      boundaries.bottom = height + offsets.top;\n      boundaries.left += offsets.left - offsets.marginLeft;\n      boundaries.right = width + offsets.left;\n    } else {\n      // for all the other DOM elements, this one is good\n      boundaries = offsets;\n    }\n  }\n\n  // Add paddings\n  padding = padding || 0;\n  var isPaddingNumber = typeof padding === 'number';\n  boundaries.left += isPaddingNumber ? padding : padding.left || 0;\n  boundaries.top += isPaddingNumber ? padding : padding.top || 0;\n  boundaries.right -= isPaddingNumber ? padding : padding.right || 0;\n  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;\n\n  return boundaries;\n}\n\nfunction getArea(_ref) {\n  var width = _ref.width,\n      height = _ref.height;\n\n  return width * height;\n}\n\n/**\n * Utility used to transform the `auto` placement to the placement with more\n * available space.\n * @method\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {\n  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n\n  if (placement.indexOf('auto') === -1) {\n    return placement;\n  }\n\n  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);\n\n  var rects = {\n    top: {\n      width: boundaries.width,\n      height: refRect.top - boundaries.top\n    },\n    right: {\n      width: boundaries.right - refRect.right,\n      height: boundaries.height\n    },\n    bottom: {\n      width: boundaries.width,\n      height: boundaries.bottom - refRect.bottom\n    },\n    left: {\n      width: refRect.left - boundaries.left,\n      height: boundaries.height\n    }\n  };\n\n  var sortedAreas = Object.keys(rects).map(function (key) {\n    return _extends({\n      key: key\n    }, rects[key], {\n      area: getArea(rects[key])\n    });\n  }).sort(function (a, b) {\n    return b.area - a.area;\n  });\n\n  var filteredAreas = sortedAreas.filter(function (_ref2) {\n    var width = _ref2.width,\n        height = _ref2.height;\n    return width >= popper.clientWidth && height >= popper.clientHeight;\n  });\n\n  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;\n\n  var variation = placement.split('-')[1];\n\n  return computedPlacement + (variation ? '-' + variation : '');\n}\n\n/**\n * Get offsets to the reference element\n * @method\n * @memberof Popper.Utils\n * @param {Object} state\n * @param {Element} popper - the popper element\n * @param {Element} reference - the reference element (the popper will be relative to this)\n * @param {Element} fixedPosition - is in fixed position mode\n * @returns {Object} An object containing the offsets which will be applied to the popper\n */\nfunction getReferenceOffsets(state, popper, reference) {\n  var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));\n  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);\n}\n\n/**\n * Get the outer sizes of the given element (offset size + margins)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Object} object containing width and height properties\n */\nfunction getOuterSizes(element) {\n  var window = element.ownerDocument.defaultView;\n  var styles = window.getComputedStyle(element);\n  var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);\n  var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);\n  var result = {\n    width: element.offsetWidth + y,\n    height: element.offsetHeight + x\n  };\n  return result;\n}\n\n/**\n * Get the opposite placement of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement\n * @returns {String} flipped placement\n */\nfunction getOppositePlacement(placement) {\n  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };\n  return placement.replace(/left|right|bottom|top/g, function (matched) {\n    return hash[matched];\n  });\n}\n\n/**\n * Get offsets to the popper\n * @method\n * @memberof Popper.Utils\n * @param {Object} position - CSS position the Popper will get applied\n * @param {HTMLElement} popper - the popper element\n * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\n * @param {String} placement - one of the valid placement options\n * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\n */\nfunction getPopperOffsets(popper, referenceOffsets, placement) {\n  placement = placement.split('-')[0];\n\n  // Get popper node sizes\n  var popperRect = getOuterSizes(popper);\n\n  // Add position, width and height to our offsets object\n  var popperOffsets = {\n    width: popperRect.width,\n    height: popperRect.height\n  };\n\n  // depending by the popper placement we have to compute its offsets slightly differently\n  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n  var mainSide = isHoriz ? 'top' : 'left';\n  var secondarySide = isHoriz ? 'left' : 'top';\n  var measurement = isHoriz ? 'height' : 'width';\n  var secondaryMeasurement = !isHoriz ? 'height' : 'width';\n\n  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;\n  if (placement === secondarySide) {\n    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\n  } else {\n    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];\n  }\n\n  return popperOffsets;\n}\n\n/**\n * Mimics the `find` method of Array\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction find(arr, check) {\n  // use native find if supported\n  if (Array.prototype.find) {\n    return arr.find(check);\n  }\n\n  // use `filter` to obtain the same behavior of `find`\n  return arr.filter(check)[0];\n}\n\n/**\n * Return the index of the matching object\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nfunction findIndex(arr, prop, value) {\n  // use native findIndex if supported\n  if (Array.prototype.findIndex) {\n    return arr.findIndex(function (cur) {\n      return cur[prop] === value;\n    });\n  }\n\n  // use `find` + `indexOf` if `findIndex` isn't supported\n  var match = find(arr, function (obj) {\n    return obj[prop] === value;\n  });\n  return arr.indexOf(match);\n}\n\n/**\n * Loop trough the list of modifiers and run them in order,\n * each of them will then edit the data object.\n * @method\n * @memberof Popper.Utils\n * @param {dataObject} data\n * @param {Array} modifiers\n * @param {String} ends - Optional modifier name used as stopper\n * @returns {dataObject}\n */\nfunction runModifiers(modifiers, data, ends) {\n  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));\n\n  modifiersToRun.forEach(function (modifier) {\n    if (modifier['function']) {\n      // eslint-disable-line dot-notation\n      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n    }\n    var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation\n    if (modifier.enabled && isFunction(fn)) {\n      // Add properties to offsets to make them a complete clientRect object\n      // we do this before each modifier to make sure the previous one doesn't\n      // mess with these values\n      data.offsets.popper = getClientRect(data.offsets.popper);\n      data.offsets.reference = getClientRect(data.offsets.reference);\n\n      data = fn(data, modifier);\n    }\n  });\n\n  return data;\n}\n\n/**\n * Updates the position of the popper, computing the new offsets and applying\n * the new style.<br />\n * Prefer `scheduleUpdate` over `update` because of performance reasons.\n * @method\n * @memberof Popper\n */\nfunction update() {\n  // if popper is destroyed, don't perform any further update\n  if (this.state.isDestroyed) {\n    return;\n  }\n\n  var data = {\n    instance: this,\n    styles: {},\n    arrowStyles: {},\n    attributes: {},\n    flipped: false,\n    offsets: {}\n  };\n\n  // compute reference element offsets\n  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);\n\n  // store the computed placement inside `originalPlacement`\n  data.originalPlacement = data.placement;\n\n  data.positionFixed = this.options.positionFixed;\n\n  // compute the popper offsets\n  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);\n\n  data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';\n\n  // run the modifiers\n  data = runModifiers(this.modifiers, data);\n\n  // the first `update` will call `onCreate` callback\n  // the other ones will call `onUpdate` callback\n  if (!this.state.isCreated) {\n    this.state.isCreated = true;\n    this.options.onCreate(data);\n  } else {\n    this.options.onUpdate(data);\n  }\n}\n\n/**\n * Helper used to know if the given modifier is enabled.\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean}\n */\nfunction isModifierEnabled(modifiers, modifierName) {\n  return modifiers.some(function (_ref) {\n    var name = _ref.name,\n        enabled = _ref.enabled;\n    return enabled && name === modifierName;\n  });\n}\n\n/**\n * Get the prefixed supported property name\n * @method\n * @memberof Popper.Utils\n * @argument {String} property (camelCase)\n * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\n */\nfunction getSupportedPropertyName(property) {\n  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];\n  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);\n\n  for (var i = 0; i < prefixes.length; i++) {\n    var prefix = prefixes[i];\n    var toCheck = prefix ? '' + prefix + upperProp : property;\n    if (typeof document.body.style[toCheck] !== 'undefined') {\n      return toCheck;\n    }\n  }\n  return null;\n}\n\n/**\n * Destroys the popper.\n * @method\n * @memberof Popper\n */\nfunction destroy() {\n  this.state.isDestroyed = true;\n\n  // touch DOM only if `applyStyle` modifier is enabled\n  if (isModifierEnabled(this.modifiers, 'applyStyle')) {\n    this.popper.removeAttribute('x-placement');\n    this.popper.style.position = '';\n    this.popper.style.top = '';\n    this.popper.style.left = '';\n    this.popper.style.right = '';\n    this.popper.style.bottom = '';\n    this.popper.style.willChange = '';\n    this.popper.style[getSupportedPropertyName('transform')] = '';\n  }\n\n  this.disableEventListeners();\n\n  // remove the popper if user explicitly asked for the deletion on destroy\n  // do not use `remove` because IE11 doesn't support it\n  if (this.options.removeOnDestroy) {\n    this.popper.parentNode.removeChild(this.popper);\n  }\n  return this;\n}\n\n/**\n * Get the window associated with the element\n * @argument {Element} element\n * @returns {Window}\n */\nfunction getWindow(element) {\n  var ownerDocument = element.ownerDocument;\n  return ownerDocument ? ownerDocument.defaultView : window;\n}\n\nfunction attachToScrollParents(scrollParent, event, callback, scrollParents) {\n  var isBody = scrollParent.nodeName === 'BODY';\n  var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;\n  target.addEventListener(event, callback, { passive: true });\n\n  if (!isBody) {\n    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);\n  }\n  scrollParents.push(target);\n}\n\n/**\n * Setup needed event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction setupEventListeners(reference, options, state, updateBound) {\n  // Resize event listener on window\n  state.updateBound = updateBound;\n  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });\n\n  // Scroll event listener on scroll parents\n  var scrollElement = getScrollParent(reference);\n  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);\n  state.scrollElement = scrollElement;\n  state.eventsEnabled = true;\n\n  return state;\n}\n\n/**\n * It will add resize/scroll events and start recalculating\n * position of the popper element when they are triggered.\n * @method\n * @memberof Popper\n */\nfunction enableEventListeners() {\n  if (!this.state.eventsEnabled) {\n    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);\n  }\n}\n\n/**\n * Remove event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nfunction removeEventListeners(reference, state) {\n  // Remove resize event listener on window\n  getWindow(reference).removeEventListener('resize', state.updateBound);\n\n  // Remove scroll event listener on scroll parents\n  state.scrollParents.forEach(function (target) {\n    target.removeEventListener('scroll', state.updateBound);\n  });\n\n  // Reset state\n  state.updateBound = null;\n  state.scrollParents = [];\n  state.scrollElement = null;\n  state.eventsEnabled = false;\n  return state;\n}\n\n/**\n * It will remove resize/scroll events and won't recalculate popper position\n * when they are triggered. It also won't trigger `onUpdate` callback anymore,\n * unless you call `update` method manually.\n * @method\n * @memberof Popper\n */\nfunction disableEventListeners() {\n  if (this.state.eventsEnabled) {\n    cancelAnimationFrame(this.scheduleUpdate);\n    this.state = removeEventListeners(this.reference, this.state);\n  }\n}\n\n/**\n * Tells if a given input is a number\n * @method\n * @memberof Popper.Utils\n * @param {*} input to check\n * @return {Boolean}\n */\nfunction isNumeric(n) {\n  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n\n/**\n * Set the style to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the style to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setStyles(element, styles) {\n  Object.keys(styles).forEach(function (prop) {\n    var unit = '';\n    // add unit if the value is numeric and is one of the following\n    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {\n      unit = 'px';\n    }\n    element.style[prop] = styles[prop] + unit;\n  });\n}\n\n/**\n * Set the attributes to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the attributes to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nfunction setAttributes(element, attributes) {\n  Object.keys(attributes).forEach(function (prop) {\n    var value = attributes[prop];\n    if (value !== false) {\n      element.setAttribute(prop, attributes[prop]);\n    } else {\n      element.removeAttribute(prop);\n    }\n  });\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} data.styles - List of style properties - values to apply to popper element\n * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The same data object\n */\nfunction applyStyle(data) {\n  // any property present in `data.styles` will be applied to the popper,\n  // in this way we can make the 3rd party modifiers add custom styles to it\n  // Be aware, modifiers could override the properties defined in the previous\n  // lines of this modifier!\n  setStyles(data.instance.popper, data.styles);\n\n  // any property present in `data.attributes` will be applied to the popper,\n  // they will be set as HTML attributes of the element\n  setAttributes(data.instance.popper, data.attributes);\n\n  // if arrowElement is defined and arrowStyles has some properties\n  if (data.arrowElement && Object.keys(data.arrowStyles).length) {\n    setStyles(data.arrowElement, data.arrowStyles);\n  }\n\n  return data;\n}\n\n/**\n * Set the x-placement attribute before everything else because it could be used\n * to add margins to the popper margins needs to be calculated to get the\n * correct popper offsets.\n * @method\n * @memberof Popper.modifiers\n * @param {HTMLElement} reference - The reference element used to position the popper\n * @param {HTMLElement} popper - The HTML element used as popper\n * @param {Object} options - Popper.js options\n */\nfunction applyStyleOnLoad(reference, popper, options, modifierOptions, state) {\n  // compute reference element offsets\n  var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);\n\n  popper.setAttribute('x-placement', placement);\n\n  // Apply `position` to popper before anything else because\n  // without the position applied we can't guarantee correct computations\n  setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });\n\n  return options;\n}\n\n/**\n * @function\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Boolean} shouldRound - If the offsets should be rounded at all\n * @returns {Object} The popper's position offsets rounded\n *\n * The tale of pixel-perfect positioning. It's still not 100% perfect, but as\n * good as it can be within reason.\n * Discussion here: https://github.com/FezVrasta/popper.js/pull/715\n *\n * Low DPI screens cause a popper to be blurry if not using full pixels (Safari\n * as well on High DPI screens).\n *\n * Firefox prefers no rounding for positioning and does not have blurriness on\n * high DPI screens.\n *\n * Only horizontal placement and left/right values need to be considered.\n */\nfunction getRoundedOffsets(data, shouldRound) {\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n  var round = Math.round,\n      floor = Math.floor;\n\n  var noRound = function noRound(v) {\n    return v;\n  };\n\n  var referenceWidth = round(reference.width);\n  var popperWidth = round(popper.width);\n\n  var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;\n  var isVariation = data.placement.indexOf('-') !== -1;\n  var sameWidthParity = referenceWidth % 2 === popperWidth % 2;\n  var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;\n\n  var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;\n  var verticalToInteger = !shouldRound ? noRound : round;\n\n  return {\n    left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),\n    top: verticalToInteger(popper.top),\n    bottom: verticalToInteger(popper.bottom),\n    right: horizontalToInteger(popper.right)\n  };\n}\n\nvar isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction computeStyle(data, options) {\n  var x = options.x,\n      y = options.y;\n  var popper = data.offsets.popper;\n\n  // Remove this legacy support in Popper.js v2\n\n  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'applyStyle';\n  }).gpuAcceleration;\n  if (legacyGpuAccelerationOption !== undefined) {\n    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');\n  }\n  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;\n\n  var offsetParent = getOffsetParent(data.instance.popper);\n  var offsetParentRect = getBoundingClientRect(offsetParent);\n\n  // Styles\n  var styles = {\n    position: popper.position\n  };\n\n  var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);\n\n  var sideA = x === 'bottom' ? 'top' : 'bottom';\n  var sideB = y === 'right' ? 'left' : 'right';\n\n  // if gpuAcceleration is set to `true` and transform is supported,\n  //  we use `translate3d` to apply the position to the popper we\n  // automatically use the supported prefixed version if needed\n  var prefixedProperty = getSupportedPropertyName('transform');\n\n  // now, let's make a step back and look at this code closely (wtf?)\n  // If the content of the popper grows once it's been positioned, it\n  // may happen that the popper gets misplaced because of the new content\n  // overflowing its reference element\n  // To avoid this problem, we provide two options (x and y), which allow\n  // the consumer to define the offset origin.\n  // If we position a popper on top of a reference element, we can set\n  // `x` to `top` to make the popper grow towards its top instead of\n  // its bottom.\n  var left = void 0,\n      top = void 0;\n  if (sideA === 'bottom') {\n    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)\n    // and not the bottom of the html element\n    if (offsetParent.nodeName === 'HTML') {\n      top = -offsetParent.clientHeight + offsets.bottom;\n    } else {\n      top = -offsetParentRect.height + offsets.bottom;\n    }\n  } else {\n    top = offsets.top;\n  }\n  if (sideB === 'right') {\n    if (offsetParent.nodeName === 'HTML') {\n      left = -offsetParent.clientWidth + offsets.right;\n    } else {\n      left = -offsetParentRect.width + offsets.right;\n    }\n  } else {\n    left = offsets.left;\n  }\n  if (gpuAcceleration && prefixedProperty) {\n    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';\n    styles[sideA] = 0;\n    styles[sideB] = 0;\n    styles.willChange = 'transform';\n  } else {\n    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\n    var invertTop = sideA === 'bottom' ? -1 : 1;\n    var invertLeft = sideB === 'right' ? -1 : 1;\n    styles[sideA] = top * invertTop;\n    styles[sideB] = left * invertLeft;\n    styles.willChange = sideA + ', ' + sideB;\n  }\n\n  // Attributes\n  var attributes = {\n    'x-placement': data.placement\n  };\n\n  // Update `data` attributes, styles and arrowStyles\n  data.attributes = _extends({}, attributes, data.attributes);\n  data.styles = _extends({}, styles, data.styles);\n  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);\n\n  return data;\n}\n\n/**\n * Helper used to know if the given modifier depends from another one.<br />\n * It checks if the needed modifier is listed and enabled.\n * @method\n * @memberof Popper.Utils\n * @param {Array} modifiers - list of modifiers\n * @param {String} requestingName - name of requesting modifier\n * @param {String} requestedName - name of requested modifier\n * @returns {Boolean}\n */\nfunction isModifierRequired(modifiers, requestingName, requestedName) {\n  var requesting = find(modifiers, function (_ref) {\n    var name = _ref.name;\n    return name === requestingName;\n  });\n\n  var isRequired = !!requesting && modifiers.some(function (modifier) {\n    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;\n  });\n\n  if (!isRequired) {\n    var _requesting = '`' + requestingName + '`';\n    var requested = '`' + requestedName + '`';\n    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');\n  }\n  return isRequired;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction arrow(data, options) {\n  var _data$offsets$arrow;\n\n  // arrow depends on keepTogether in order to work\n  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {\n    return data;\n  }\n\n  var arrowElement = options.element;\n\n  // if arrowElement is a string, suppose it's a CSS selector\n  if (typeof arrowElement === 'string') {\n    arrowElement = data.instance.popper.querySelector(arrowElement);\n\n    // if arrowElement is not found, don't run the modifier\n    if (!arrowElement) {\n      return data;\n    }\n  } else {\n    // if the arrowElement isn't a query selector we must check that the\n    // provided DOM node is child of its popper node\n    if (!data.instance.popper.contains(arrowElement)) {\n      console.warn('WARNING: `arrow.element` must be child of its popper element!');\n      return data;\n    }\n  }\n\n  var placement = data.placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isVertical = ['left', 'right'].indexOf(placement) !== -1;\n\n  var len = isVertical ? 'height' : 'width';\n  var sideCapitalized = isVertical ? 'Top' : 'Left';\n  var side = sideCapitalized.toLowerCase();\n  var altSide = isVertical ? 'left' : 'top';\n  var opSide = isVertical ? 'bottom' : 'right';\n  var arrowElementSize = getOuterSizes(arrowElement)[len];\n\n  //\n  // extends keepTogether behavior making sure the popper and its\n  // reference have enough pixels in conjunction\n  //\n\n  // top/left side\n  if (reference[opSide] - arrowElementSize < popper[side]) {\n    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);\n  }\n  // bottom/right side\n  if (reference[side] + arrowElementSize > popper[opSide]) {\n    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];\n  }\n  data.offsets.popper = getClientRect(data.offsets.popper);\n\n  // compute center of the popper\n  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;\n\n  // Compute the sideValue using the updated popper offsets\n  // take popper margin in account because we don't have this info available\n  var css = getStyleComputedProperty(data.instance.popper);\n  var popperMarginSide = parseFloat(css['margin' + sideCapitalized]);\n  var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width']);\n  var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;\n\n  // prevent arrowElement from being placed not contiguously to its popper\n  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\n\n  data.arrowElement = arrowElement;\n  data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);\n\n  return data;\n}\n\n/**\n * Get the opposite placement variation of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement variation\n * @returns {String} flipped placement variation\n */\nfunction getOppositeVariation(variation) {\n  if (variation === 'end') {\n    return 'start';\n  } else if (variation === 'start') {\n    return 'end';\n  }\n  return variation;\n}\n\n/**\n * List of accepted placements to use as values of the `placement` option.<br />\n * Valid placements are:\n * - `auto`\n * - `top`\n * - `right`\n * - `bottom`\n * - `left`\n *\n * Each placement can have a variation from this list:\n * - `-start`\n * - `-end`\n *\n * Variations are interpreted easily if you think of them as the left to right\n * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\n * is right.<br />\n * Vertically (`left` and `right`), `start` is top and `end` is bottom.\n *\n * Some valid examples are:\n * - `top-end` (on top of reference, right aligned)\n * - `right-start` (on right of reference, top aligned)\n * - `bottom` (on bottom, centered)\n * - `auto-end` (on the side with more space available, alignment depends by placement)\n *\n * @static\n * @type {Array}\n * @enum {String}\n * @readonly\n * @method placements\n * @memberof Popper\n */\nvar placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];\n\n// Get rid of `auto` `auto-start` and `auto-end`\nvar validPlacements = placements.slice(3);\n\n/**\n * Given an initial placement, returns all the subsequent placements\n * clockwise (or counter-clockwise).\n *\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement - A valid placement (it accepts variations)\n * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\n * @returns {Array} placements including their variations\n */\nfunction clockwise(placement) {\n  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var index = validPlacements.indexOf(placement);\n  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));\n  return counter ? arr.reverse() : arr;\n}\n\nvar BEHAVIORS = {\n  FLIP: 'flip',\n  CLOCKWISE: 'clockwise',\n  COUNTERCLOCKWISE: 'counterclockwise'\n};\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction flip(data, options) {\n  // if `inner` modifier is enabled, we can't use the `flip` modifier\n  if (isModifierEnabled(data.instance.modifiers, 'inner')) {\n    return data;\n  }\n\n  if (data.flipped && data.placement === data.originalPlacement) {\n    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\n    return data;\n  }\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);\n\n  var placement = data.placement.split('-')[0];\n  var placementOpposite = getOppositePlacement(placement);\n  var variation = data.placement.split('-')[1] || '';\n\n  var flipOrder = [];\n\n  switch (options.behavior) {\n    case BEHAVIORS.FLIP:\n      flipOrder = [placement, placementOpposite];\n      break;\n    case BEHAVIORS.CLOCKWISE:\n      flipOrder = clockwise(placement);\n      break;\n    case BEHAVIORS.COUNTERCLOCKWISE:\n      flipOrder = clockwise(placement, true);\n      break;\n    default:\n      flipOrder = options.behavior;\n  }\n\n  flipOrder.forEach(function (step, index) {\n    if (placement !== step || flipOrder.length === index + 1) {\n      return data;\n    }\n\n    placement = data.placement.split('-')[0];\n    placementOpposite = getOppositePlacement(placement);\n\n    var popperOffsets = data.offsets.popper;\n    var refOffsets = data.offsets.reference;\n\n    // using floor because the reference offsets may contain decimals we are not going to consider here\n    var floor = Math.floor;\n    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);\n\n    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\n    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\n    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\n    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);\n\n    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;\n\n    // flip the variation if required\n    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n\n    // flips variation if reference element overflows boundaries\n    var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);\n\n    // flips variation if popper content overflows boundaries\n    var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === 'start' && overflowsRight || isVertical && variation === 'end' && overflowsLeft || !isVertical && variation === 'start' && overflowsBottom || !isVertical && variation === 'end' && overflowsTop);\n\n    var flippedVariation = flippedVariationByRef || flippedVariationByContent;\n\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\n      // this boolean to detect any flip loop\n      data.flipped = true;\n\n      if (overlapsRef || overflowsBoundaries) {\n        placement = flipOrder[index + 1];\n      }\n\n      if (flippedVariation) {\n        variation = getOppositeVariation(variation);\n      }\n\n      data.placement = placement + (variation ? '-' + variation : '');\n\n      // this object contains `position`, we want to preserve it along with\n      // any additional property we may add in the future\n      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));\n\n      data = runModifiers(data.instance.modifiers, data, 'flip');\n    }\n  });\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction keepTogether(data) {\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var placement = data.placement.split('-')[0];\n  var floor = Math.floor;\n  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n  var side = isVertical ? 'right' : 'bottom';\n  var opSide = isVertical ? 'left' : 'top';\n  var measurement = isVertical ? 'width' : 'height';\n\n  if (popper[side] < floor(reference[opSide])) {\n    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];\n  }\n  if (popper[opSide] > floor(reference[side])) {\n    data.offsets.popper[opSide] = floor(reference[side]);\n  }\n\n  return data;\n}\n\n/**\n * Converts a string containing value + unit into a px value number\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} str - Value + unit string\n * @argument {String} measurement - `height` or `width`\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @returns {Number|String}\n * Value in pixels, or original string if no values were extracted\n */\nfunction toValue(str, measurement, popperOffsets, referenceOffsets) {\n  // separate value from unit\n  var split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\n  var value = +split[1];\n  var unit = split[2];\n\n  // If it's not a number it's an operator, I guess\n  if (!value) {\n    return str;\n  }\n\n  if (unit.indexOf('%') === 0) {\n    var element = void 0;\n    switch (unit) {\n      case '%p':\n        element = popperOffsets;\n        break;\n      case '%':\n      case '%r':\n      default:\n        element = referenceOffsets;\n    }\n\n    var rect = getClientRect(element);\n    return rect[measurement] / 100 * value;\n  } else if (unit === 'vh' || unit === 'vw') {\n    // if is a vh or vw, we calculate the size based on the viewport\n    var size = void 0;\n    if (unit === 'vh') {\n      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\n    } else {\n      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\n    }\n    return size / 100 * value;\n  } else {\n    // if is an explicit pixel unit, we get rid of the unit and keep the value\n    // if is an implicit unit, it's px, and we return just the value\n    return value;\n  }\n}\n\n/**\n * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} offset\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @argument {String} basePlacement\n * @returns {Array} a two cells array with x and y offsets in numbers\n */\nfunction parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {\n  var offsets = [0, 0];\n\n  // Use height if placement is left or right and index is 0 otherwise use width\n  // in this way the first offset will use an axis and the second one\n  // will use the other one\n  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;\n\n  // Split the offset string to obtain a list of values and operands\n  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\n  var fragments = offset.split(/(\\+|\\-)/).map(function (frag) {\n    return frag.trim();\n  });\n\n  // Detect if the offset string contains a pair of values or a single one\n  // they could be separated by comma or space\n  var divider = fragments.indexOf(find(fragments, function (frag) {\n    return frag.search(/,|\\s/) !== -1;\n  }));\n\n  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {\n    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');\n  }\n\n  // If divider is found, we divide the list of values and operands to divide\n  // them by ofset X and Y.\n  var splitRegex = /\\s*,\\s*|\\s+/;\n  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];\n\n  // Convert the values with units to absolute pixels to allow our computations\n  ops = ops.map(function (op, index) {\n    // Most of the units rely on the orientation of the popper\n    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';\n    var mergeWithPrevious = false;\n    return op\n    // This aggregates any `+` or `-` sign that aren't considered operators\n    // e.g.: 10 + +5 => [10, +, +5]\n    .reduce(function (a, b) {\n      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {\n        a[a.length - 1] = b;\n        mergeWithPrevious = true;\n        return a;\n      } else if (mergeWithPrevious) {\n        a[a.length - 1] += b;\n        mergeWithPrevious = false;\n        return a;\n      } else {\n        return a.concat(b);\n      }\n    }, [])\n    // Here we convert the string values into number values (in px)\n    .map(function (str) {\n      return toValue(str, measurement, popperOffsets, referenceOffsets);\n    });\n  });\n\n  // Loop trough the offsets arrays and execute the operations\n  ops.forEach(function (op, index) {\n    op.forEach(function (frag, index2) {\n      if (isNumeric(frag)) {\n        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);\n      }\n    });\n  });\n  return offsets;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @argument {Number|String} options.offset=0\n * The offset value as described in the modifier description\n * @returns {Object} The data object, properly modified\n */\nfunction offset(data, _ref) {\n  var offset = _ref.offset;\n  var placement = data.placement,\n      _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var basePlacement = placement.split('-')[0];\n\n  var offsets = void 0;\n  if (isNumeric(+offset)) {\n    offsets = [+offset, 0];\n  } else {\n    offsets = parseOffset(offset, popper, reference, basePlacement);\n  }\n\n  if (basePlacement === 'left') {\n    popper.top += offsets[0];\n    popper.left -= offsets[1];\n  } else if (basePlacement === 'right') {\n    popper.top += offsets[0];\n    popper.left += offsets[1];\n  } else if (basePlacement === 'top') {\n    popper.left += offsets[0];\n    popper.top -= offsets[1];\n  } else if (basePlacement === 'bottom') {\n    popper.left += offsets[0];\n    popper.top += offsets[1];\n  }\n\n  data.popper = popper;\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction preventOverflow(data, options) {\n  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);\n\n  // If offsetParent is the reference element, we really want to\n  // go one step up and use the next offsetParent as reference to\n  // avoid to make this modifier completely useless and look like broken\n  if (data.instance.reference === boundariesElement) {\n    boundariesElement = getOffsetParent(boundariesElement);\n  }\n\n  // NOTE: DOM access here\n  // resets the popper's position so that the document size can be calculated excluding\n  // the size of the popper element itself\n  var transformProp = getSupportedPropertyName('transform');\n  var popperStyles = data.instance.popper.style; // assignment to help minification\n  var top = popperStyles.top,\n      left = popperStyles.left,\n      transform = popperStyles[transformProp];\n\n  popperStyles.top = '';\n  popperStyles.left = '';\n  popperStyles[transformProp] = '';\n\n  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);\n\n  // NOTE: DOM access here\n  // restores the original style properties after the offsets have been computed\n  popperStyles.top = top;\n  popperStyles.left = left;\n  popperStyles[transformProp] = transform;\n\n  options.boundaries = boundaries;\n\n  var order = options.priority;\n  var popper = data.offsets.popper;\n\n  var check = {\n    primary: function primary(placement) {\n      var value = popper[placement];\n      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {\n        value = Math.max(popper[placement], boundaries[placement]);\n      }\n      return defineProperty({}, placement, value);\n    },\n    secondary: function secondary(placement) {\n      var mainSide = placement === 'right' ? 'left' : 'top';\n      var value = popper[mainSide];\n      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {\n        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));\n      }\n      return defineProperty({}, mainSide, value);\n    }\n  };\n\n  order.forEach(function (placement) {\n    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\n    popper = _extends({}, popper, check[side](placement));\n  });\n\n  data.offsets.popper = popper;\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction shift(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var shiftvariation = placement.split('-')[1];\n\n  // if shift shiftvariation is specified, run the modifier\n  if (shiftvariation) {\n    var _data$offsets = data.offsets,\n        reference = _data$offsets.reference,\n        popper = _data$offsets.popper;\n\n    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n    var side = isVertical ? 'left' : 'top';\n    var measurement = isVertical ? 'width' : 'height';\n\n    var shiftOffsets = {\n      start: defineProperty({}, side, reference[side]),\n      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])\n    };\n\n    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction hide(data) {\n  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {\n    return data;\n  }\n\n  var refRect = data.offsets.reference;\n  var bound = find(data.instance.modifiers, function (modifier) {\n    return modifier.name === 'preventOverflow';\n  }).boundaries;\n\n  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === true) {\n      return data;\n    }\n\n    data.hide = true;\n    data.attributes['x-out-of-boundaries'] = '';\n  } else {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === false) {\n      return data;\n    }\n\n    data.hide = false;\n    data.attributes['x-out-of-boundaries'] = false;\n  }\n\n  return data;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nfunction inner(data) {\n  var placement = data.placement;\n  var basePlacement = placement.split('-')[0];\n  var _data$offsets = data.offsets,\n      popper = _data$offsets.popper,\n      reference = _data$offsets.reference;\n\n  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;\n\n  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;\n\n  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);\n\n  data.placement = getOppositePlacement(placement);\n  data.offsets.popper = getClientRect(popper);\n\n  return data;\n}\n\n/**\n * Modifier function, each modifier can have a function of this type assigned\n * to its `fn` property.<br />\n * These functions will be called on each update, this means that you must\n * make sure they are performant enough to avoid performance bottlenecks.\n *\n * @function ModifierFn\n * @argument {dataObject} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {dataObject} The data object, properly modified\n */\n\n/**\n * Modifiers are plugins used to alter the behavior of your poppers.<br />\n * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\n * needed by the library.\n *\n * Usually you don't want to override the `order`, `fn` and `onLoad` props.\n * All the other properties are configurations that could be tweaked.\n * @namespace modifiers\n */\nvar modifiers = {\n  /**\n   * Modifier used to shift the popper on the start or end of its reference\n   * element.<br />\n   * It will read the variation of the `placement` property.<br />\n   * It can be one either `-end` or `-start`.\n   * @memberof modifiers\n   * @inner\n   */\n  shift: {\n    /** @prop {number} order=100 - Index used to define the order of execution */\n    order: 100,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: shift\n  },\n\n  /**\n   * The `offset` modifier can shift your popper on both its axis.\n   *\n   * It accepts the following units:\n   * - `px` or unit-less, interpreted as pixels\n   * - `%` or `%r`, percentage relative to the length of the reference element\n   * - `%p`, percentage relative to the length of the popper element\n   * - `vw`, CSS viewport width unit\n   * - `vh`, CSS viewport height unit\n   *\n   * For length is intended the main axis relative to the placement of the popper.<br />\n   * This means that if the placement is `top` or `bottom`, the length will be the\n   * `width`. In case of `left` or `right`, it will be the `height`.\n   *\n   * You can provide a single value (as `Number` or `String`), or a pair of values\n   * as `String` divided by a comma or one (or more) white spaces.<br />\n   * The latter is a deprecated method because it leads to confusion and will be\n   * removed in v2.<br />\n   * Additionally, it accepts additions and subtractions between different units.\n   * Note that multiplications and divisions aren't supported.\n   *\n   * Valid examples are:\n   * ```\n   * 10\n   * '10%'\n   * '10, 10'\n   * '10%, 10'\n   * '10 + 10%'\n   * '10 - 5vh + 3%'\n   * '-10px + 5vh, 5px - 6%'\n   * ```\n   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap\n   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.\n   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  offset: {\n    /** @prop {number} order=200 - Index used to define the order of execution */\n    order: 200,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: offset,\n    /** @prop {Number|String} offset=0\n     * The offset value as described in the modifier description\n     */\n    offset: 0\n  },\n\n  /**\n   * Modifier used to prevent the popper from being positioned outside the boundary.\n   *\n   * A scenario exists where the reference itself is not within the boundaries.<br />\n   * We can say it has \"escaped the boundaries\" — or just \"escaped\".<br />\n   * In this case we need to decide whether the popper should either:\n   *\n   * - detach from the reference and remain \"trapped\" in the boundaries, or\n   * - if it should ignore the boundary and \"escape with its reference\"\n   *\n   * When `escapeWithReference` is set to`true` and reference is completely\n   * outside its boundaries, the popper will overflow (or completely leave)\n   * the boundaries in order to remain attached to the edge of the reference.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  preventOverflow: {\n    /** @prop {number} order=300 - Index used to define the order of execution */\n    order: 300,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: preventOverflow,\n    /**\n     * @prop {Array} [priority=['left','right','top','bottom']]\n     * Popper will try to prevent overflow following these priorities by default,\n     * then, it could overflow on the left and on top of the `boundariesElement`\n     */\n    priority: ['left', 'right', 'top', 'bottom'],\n    /**\n     * @prop {number} padding=5\n     * Amount of pixel used to define a minimum distance between the boundaries\n     * and the popper. This makes sure the popper always has a little padding\n     * between the edges of its container\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='scrollParent'\n     * Boundaries used by the modifier. Can be `scrollParent`, `window`,\n     * `viewport` or any DOM element.\n     */\n    boundariesElement: 'scrollParent'\n  },\n\n  /**\n   * Modifier used to make sure the reference and its popper stay near each other\n   * without leaving any gap between the two. Especially useful when the arrow is\n   * enabled and you want to ensure that it points to its reference element.\n   * It cares only about the first axis. You can still have poppers with margin\n   * between the popper and its reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  keepTogether: {\n    /** @prop {number} order=400 - Index used to define the order of execution */\n    order: 400,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: keepTogether\n  },\n\n  /**\n   * This modifier is used to move the `arrowElement` of the popper to make\n   * sure it is positioned between the reference element and its popper element.\n   * It will read the outer size of the `arrowElement` node to detect how many\n   * pixels of conjunction are needed.\n   *\n   * It has no effect if no `arrowElement` is provided.\n   * @memberof modifiers\n   * @inner\n   */\n  arrow: {\n    /** @prop {number} order=500 - Index used to define the order of execution */\n    order: 500,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: arrow,\n    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */\n    element: '[x-arrow]'\n  },\n\n  /**\n   * Modifier used to flip the popper's placement when it starts to overlap its\n   * reference element.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   *\n   * **NOTE:** this modifier will interrupt the current update cycle and will\n   * restart it if it detects the need to flip the placement.\n   * @memberof modifiers\n   * @inner\n   */\n  flip: {\n    /** @prop {number} order=600 - Index used to define the order of execution */\n    order: 600,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: flip,\n    /**\n     * @prop {String|Array} behavior='flip'\n     * The behavior used to change the popper's placement. It can be one of\n     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\n     * placements (with optional variations)\n     */\n    behavior: 'flip',\n    /**\n     * @prop {number} padding=5\n     * The popper will flip if it hits the edges of the `boundariesElement`\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='viewport'\n     * The element which will define the boundaries of the popper position.\n     * The popper will never be placed outside of the defined boundaries\n     * (except if `keepTogether` is enabled)\n     */\n    boundariesElement: 'viewport',\n    /**\n     * @prop {Boolean} flipVariations=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the reference element overlaps its boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariations: false,\n    /**\n     * @prop {Boolean} flipVariationsByContent=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the popper element overlaps its reference boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariationsByContent: false\n  },\n\n  /**\n   * Modifier used to make the popper flow toward the inner of the reference element.\n   * By default, when this modifier is disabled, the popper will be placed outside\n   * the reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  inner: {\n    /** @prop {number} order=700 - Index used to define the order of execution */\n    order: 700,\n    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\n    enabled: false,\n    /** @prop {ModifierFn} */\n    fn: inner\n  },\n\n  /**\n   * Modifier used to hide the popper when its reference element is outside of the\n   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\n   * be used to hide with a CSS selector the popper when its reference is\n   * out of boundaries.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   * @memberof modifiers\n   * @inner\n   */\n  hide: {\n    /** @prop {number} order=800 - Index used to define the order of execution */\n    order: 800,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: hide\n  },\n\n  /**\n   * Computes the style that will be applied to the popper element to gets\n   * properly positioned.\n   *\n   * Note that this modifier will not touch the DOM, it just prepares the styles\n   * so that `applyStyle` modifier can apply it. This separation is useful\n   * in case you need to replace `applyStyle` with a custom implementation.\n   *\n   * This modifier has `850` as `order` value to maintain backward compatibility\n   * with previous versions of Popper.js. Expect the modifiers ordering method\n   * to change in future major versions of the library.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  computeStyle: {\n    /** @prop {number} order=850 - Index used to define the order of execution */\n    order: 850,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: computeStyle,\n    /**\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: true,\n    /**\n     * @prop {string} [x='bottom']\n     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\n     * Change this if your popper should grow in a direction different from `bottom`\n     */\n    x: 'bottom',\n    /**\n     * @prop {string} [x='left']\n     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\n     * Change this if your popper should grow in a direction different from `right`\n     */\n    y: 'right'\n  },\n\n  /**\n   * Applies the computed styles to the popper element.\n   *\n   * All the DOM manipulations are limited to this modifier. This is useful in case\n   * you want to integrate Popper.js inside a framework or view library and you\n   * want to delegate all the DOM manipulations to it.\n   *\n   * Note that if you disable this modifier, you must make sure the popper element\n   * has its position set to `absolute` before Popper.js can do its work!\n   *\n   * Just disable this modifier and define your own to achieve the desired effect.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  applyStyle: {\n    /** @prop {number} order=900 - Index used to define the order of execution */\n    order: 900,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: applyStyle,\n    /** @prop {Function} */\n    onLoad: applyStyleOnLoad,\n    /**\n     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: undefined\n  }\n};\n\n/**\n * The `dataObject` is an object containing all the information used by Popper.js.\n * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\n * @name dataObject\n * @property {Object} data.instance The Popper.js instance\n * @property {String} data.placement Placement applied to popper\n * @property {String} data.originalPlacement Placement originally defined on init\n * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\n * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper\n * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\n * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.boundaries Offsets of the popper boundaries\n * @property {Object} data.offsets The measurements of popper, reference and arrow elements\n * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\n */\n\n/**\n * Default options provided to Popper.js constructor.<br />\n * These can be overridden using the `options` argument of Popper.js.<br />\n * To override an option, simply pass an object with the same\n * structure of the `options` object, as the 3rd argument. For example:\n * ```\n * new Popper(ref, pop, {\n *   modifiers: {\n *     preventOverflow: { enabled: false }\n *   }\n * })\n * ```\n * @type {Object}\n * @static\n * @memberof Popper\n */\nvar Defaults = {\n  /**\n   * Popper's placement.\n   * @prop {Popper.placements} placement='bottom'\n   */\n  placement: 'bottom',\n\n  /**\n   * Set this to true if you want popper to position it self in 'fixed' mode\n   * @prop {Boolean} positionFixed=false\n   */\n  positionFixed: false,\n\n  /**\n   * Whether events (resize, scroll) are initially enabled.\n   * @prop {Boolean} eventsEnabled=true\n   */\n  eventsEnabled: true,\n\n  /**\n   * Set to true if you want to automatically remove the popper when\n   * you call the `destroy` method.\n   * @prop {Boolean} removeOnDestroy=false\n   */\n  removeOnDestroy: false,\n\n  /**\n   * Callback called when the popper is created.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onCreate}\n   */\n  onCreate: function onCreate() {},\n\n  /**\n   * Callback called when the popper is updated. This callback is not called\n   * on the initialization/creation of the popper, but only on subsequent\n   * updates.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onUpdate}\n   */\n  onUpdate: function onUpdate() {},\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the popper.\n   * They provide most of the functionalities of Popper.js.\n   * @prop {modifiers}\n   */\n  modifiers: modifiers\n};\n\n/**\n * @callback onCreate\n * @param {dataObject} data\n */\n\n/**\n * @callback onUpdate\n * @param {dataObject} data\n */\n\n// Utils\n// Methods\nvar Popper = function () {\n  /**\n   * Creates a new Popper.js instance.\n   * @class Popper\n   * @param {Element|referenceObject} reference - The reference element used to position the popper\n   * @param {Element} popper - The HTML / XML element used as the popper\n   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\n   * @return {Object} instance - The generated Popper.js instance\n   */\n  function Popper(reference, popper) {\n    var _this = this;\n\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    classCallCheck(this, Popper);\n\n    this.scheduleUpdate = function () {\n      return requestAnimationFrame(_this.update);\n    };\n\n    // make update() debounced, so that it only runs at most once-per-tick\n    this.update = debounce(this.update.bind(this));\n\n    // with {} we create a new object with the options inside it\n    this.options = _extends({}, Popper.Defaults, options);\n\n    // init state\n    this.state = {\n      isDestroyed: false,\n      isCreated: false,\n      scrollParents: []\n    };\n\n    // get reference and popper elements (allow jQuery wrappers)\n    this.reference = reference && reference.jquery ? reference[0] : reference;\n    this.popper = popper && popper.jquery ? popper[0] : popper;\n\n    // Deep merge modifiers options\n    this.options.modifiers = {};\n    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {\n      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});\n    });\n\n    // Refactoring modifiers' list (Object => Array)\n    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {\n      return _extends({\n        name: name\n      }, _this.options.modifiers[name]);\n    })\n    // sort the modifiers by order\n    .sort(function (a, b) {\n      return a.order - b.order;\n    });\n\n    // modifiers have the ability to execute arbitrary code when Popper.js get inited\n    // such code is executed in the same order of its modifier\n    // they could add new properties to their options configuration\n    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!\n    this.modifiers.forEach(function (modifierOptions) {\n      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\n        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);\n      }\n    });\n\n    // fire the first update to position the popper in the right place\n    this.update();\n\n    var eventsEnabled = this.options.eventsEnabled;\n    if (eventsEnabled) {\n      // setup event listeners, they will take care of update the position in specific situations\n      this.enableEventListeners();\n    }\n\n    this.state.eventsEnabled = eventsEnabled;\n  }\n\n  // We can't use class properties because they don't get listed in the\n  // class prototype and break stuff like Sinon stubs\n\n\n  createClass(Popper, [{\n    key: 'update',\n    value: function update$$1() {\n      return update.call(this);\n    }\n  }, {\n    key: 'destroy',\n    value: function destroy$$1() {\n      return destroy.call(this);\n    }\n  }, {\n    key: 'enableEventListeners',\n    value: function enableEventListeners$$1() {\n      return enableEventListeners.call(this);\n    }\n  }, {\n    key: 'disableEventListeners',\n    value: function disableEventListeners$$1() {\n      return disableEventListeners.call(this);\n    }\n\n    /**\n     * Schedules an update. It will run on the next UI update available.\n     * @method scheduleUpdate\n     * @memberof Popper\n     */\n\n\n    /**\n     * Collection of utilities useful when writing custom modifiers.\n     * Starting from version 1.7, this method is available only if you\n     * include `popper-utils.js` before `popper.js`.\n     *\n     * **DEPRECATION**: This way to access PopperUtils is deprecated\n     * and will be removed in v2! Use the PopperUtils module directly instead.\n     * Due to the high instability of the methods contained in Utils, we can't\n     * guarantee them to follow semver. Use them at your own risk!\n     * @static\n     * @private\n     * @type {Object}\n     * @deprecated since version 1.8\n     * @member Utils\n     * @memberof Popper\n     */\n\n  }]);\n  return Popper;\n}();\n\n/**\n * The `referenceObject` is an object that provides an interface compatible with Popper.js\n * and lets you use it as replacement of a real DOM node.<br />\n * You can use this method to position a popper relatively to a set of coordinates\n * in case you don't have a DOM node to use as reference.\n *\n * ```\n * new Popper(referenceObject, popperNode);\n * ```\n *\n * NB: This feature isn't supported in Internet Explorer 10.\n * @name referenceObject\n * @property {Function} data.getBoundingClientRect\n * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\n * @property {number} data.clientWidth\n * An ES6 getter that will return the width of the virtual reference element.\n * @property {number} data.clientHeight\n * An ES6 getter that will return the height of the virtual reference element.\n */\n\n\nPopper.Utils = (typeof window !== 'undefined' ? window : __webpack_require__.g).PopperUtils;\nPopper.placements = placements;\nPopper.Defaults = Defaults;\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Popper);\n//# sourceMappingURL=popper.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/popper.js/dist/esm/popper.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					result = fn();
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/js/app": 0,
/******/ 			"css/app": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			for(moduleId in moreModules) {
/******/ 				if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 					__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 				}
/******/ 			}
/******/ 			if(runtime) var result = runtime(__webpack_require__);
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkIds[i]] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunk"] = self["webpackChunk"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./assets/js/app.js")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["css/app"], () => (__webpack_require__("./assets/css/app.scss")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;